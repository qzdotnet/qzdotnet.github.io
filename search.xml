<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[记一次客户网站变更过程]]></title>
    <url>%2F2019%2F06%2F04%2F%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%A2%E6%88%B7%E7%BD%91%E7%AB%99%E5%8F%98%E6%9B%B4%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[git 常用命令总结]]></title>
    <url>%2F2019%2F03%2F25%2Fgit-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[git init 创建项目git init 可以将将目录初始化为 git 项目目录 git clone 克隆项目使用 git clone 可以拷贝一个 git 仓库到本地。 1git clone [url] git add 修改提交到缓冲区使用 git add 命令可以将新添加的文件添加到暂存区。 1git add [文件名列表] 使用 git add . 命令可以将工作区的修改都添加到暂存区里。 git pull 获取最新版本代码我们可以使用 git pull 命令获取当前分支的最新版本。 git checkout 命令创建新的分支 1git checkout -b [分支名称] 切换分支 1git checkout [分支名称] 撤销某个文件的修改 1git checkout [文件名] 撤销所有的修改 1git checkout . git commit 提交命令提交代码，将暂存区的代码提交到仓库 1git commit -m "说明" git push 命令提交本地分支的修改到远端仓库的分支中 1git push [主机名] [分支名] git merge 合并分支将分支的内容合并到其他的分支中 1git merge [分支名] 参考资料 gitpro 中文 朋友虎子现场教学]]></content>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用 Fiddler 获取微信公众号的HTML源码]]></title>
    <url>%2F2018%2F05%2F25%2F%E4%BD%BF%E7%94%A8-Fiddler-%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84HTML%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 搭建 KODExplorer 服务]]></title>
    <url>%2F2017%2F11%2F28%2F%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-KODExplorer-%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[部署 XAMPP 服务下载 XAMPPXAMPP 是个集成了多个组件的开发环境 ，我们通过 wget 命令获取其安装包 1wget https://www.apachefriends.org/xampp-files/7.1.10/xampp-linux-x64-7.1.10-0-installer.run 安装 XAMMP12chmod a+x xampp-linux-x64-7.1.10-0-installer.run./xampp-linux-x64-7.1.10-0-installer.run 询问是否继续安装时，输入 Y 后按回车继续安装。 启动 XAMMP1/opt/lampp/lampp start 部署可道云 KODExplorer开源的云服务有好多，而可道云 KODExplorer 是目前国内有代表性、美观易用性好的私有云软件，用户可以通过远程网页，手机来访问，非常方便。 安装 GitKODExplorer 需要通过 git 下载，我们需要先安装 Git 1yum -y install git 下载 KODExplorer1git clone https://github.com/kalcaddle/KODExplorer.git 移动 KODExplorer本实验希望能够通过 http//111.230.5.61/KODExplorer 来访问云服务，所以需要把下载到的 KODExplorer 移动到之前下载的 LAMPP 相应目录下，一般来说是 /opt/lampp/htdocs 1mv KODExplorer /opt/lampp/htdocs/ &amp; cd /opt/lampp/htdocs/ 然后要给这个目录添加权限 1chmod -Rf 777 ./KODExplorer/* 使用 KODExplorer现在，在任意客户端访问 http://127.0.0.1/KODExplorer 就可以使用部署的云服务了。 总结记得之前部署过 Seafile ，感觉 KOD 界面更加简单操作起来非常的舒服 。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>网盘</tag>
        <tag>KODExplorer</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 Ubuntu 搭建 Django 站点]]></title>
    <url>%2F2017%2F11%2F08%2F%E5%9F%BA%E4%BA%8E-Ubuntu-%E6%90%AD%E5%BB%BA-Django-%E7%AB%99%E7%82%B9%2F</url>
    <content type="text"><![CDATA[Django 是一个用 Python 开发的开源 Web 应用框架，采用 MVC 模式。本实验带您搭建一个最简单的 Django 站点，并使用 uwsgi 和 nginx 作为 Web 服务器。 安装 django安装 pip1sudo apt install python-pip -y 使用 pip 安装 django1sudo pip install django 创建 Hello World 应用并启动 Web 服务器创建项目12cd /datasudo django-admin startproject helloworld 定位到 /data/helloworld 目录 修改配置文件修改 /data/helloworld/helloworld/settings.py 文件权限为其它人可写 1sudo chmod 666 /data/helowrold/helloworld/settings.py 编辑 /data/helloworld/helloworld/settings.py 将 ALLOWED_HOSTS =[] 修改为 `ALLOWED_HOSTS =[“您的 CVM IP 地址”] ，这样可以允许通过 ip 访问 在实际运营中一般要改为对应的域名 启动 django 自带的 Web 服务器12cd helloworldsudo python manage.py runserver 0.0.0.0:8000 使用浏览器访问 1http://&lt;IP 地址&gt;:8080/ 看到如下页面，表示 django 服务已经部署成功 创建简单的页面关闭 WEB 服务器按 Ctrl + C 关闭 Web 服务器 创建 views.py创建文件 /data/helloworld/helloworld/views.py ，并修改权限其它人可写 12sudo touch /data/helloworld/helloworld/views.pysudo chmod 666 /data/helloworld/helloworld/views.py 添加视图函数编辑 /data/helloworld/helloworld/views.py 添加内容如下,并保存 12345678# -*- coding: utf-8 -*-from django.http.response import HttpResponsedef hello(request): user = request.GET.get('user') if not user: user = 'world' return HttpResponse('hello %s' % user) 修改 urls.py 文件权限修改 /data/helloworold/helloworold/urls.py 文件权限为其它人可写 1sudo chmod 666 /data/helloworld/helloworld/urls.py 添加路由配置编辑 /data/helloworld/helloworld/urls.py 将 123urlpatterns = [ url(r'^admin/', admin.site.urls),] 修改为 123456import viewsurlpatterns = [ url(r'^admin/', admin.site.urls), url(r'^hello', views.hello),] 测试 url 访问是否正常再次启动 Web 服务器 1sudo python manage.py runserver 0.0.0.0:8080 使用浏览器访问下面两个 url 12http://&lt;IP 地址&gt;:8080/hellohttp://&lt;IP 地址&gt;:8080/hello?user=test 关闭 Web 服务器按 Ctrl + C 停止 Web 服务器 部署 uwsgi 和 nginx使用 pip 安装 uwsgi1sudo pip install uwsgi 配置 uwsgi创建文件 /data/helloworld/uwsgi.ini,并修改权限为其它人可写 12sudo touch /data/helloworld/uwsgi.inisudo chmod 666 /data/helloworold/uwsgi.ini 输入以下内容，并保存 123456789101112131415[uwsgi]chdir = /data/helloworldmodule = helloworld.wsgisocket = 127.0.0.1:8080master = truevhost = trueno-site = trueworkers = 2reload-mercy = 10 vacuum = truemax-requests = 1000 limit-as = 512buffer-size = 30000pidfile = /tmp/uwsgi.piddaemonize = /tmp/uwsgi.log 启动uwsgi12export PYTHOONPATH=/usr/local/lib/python2.7/dist-packagesuwsgi --ini /data/helloworold/uwsgi.ini 安装 nginx1sudo apt-get install nginx -y 添加 nginx 配置文件创建文件 /etc/nginx/sites-enabled/helloworld.conf ,并修改权限为其它人可写 12sudo touch /etc/nginx/sites-enabled/helloworld.confsudo chmod 666 /etc/nginx/sites-enabled/helloworld.conf 编辑 /etc/nginx/sites-enabled/helloworld.conf 输入一下内容，并保存 1234567891011121314151617server &#123; listen 80; server_name &lt;您的 CVM IP 地址&gt;; charset utf-8; location / &#123; uwsgi_pass 127.0.0.1:8080; include /etc/nginx/uwsgi_params; client_max_body_size 10m; &#125; client_body_timeout 3m; send_timeout 3m; proxy_send_timeout 3m; proxy_read_timeout 3m;&#125; 重启 nginx 服务1sudo systemctl restart nginx 测试 nginx + uwsgi + django 是否工作正常测试页面是否能够正常访问使用浏览器测试下面的 url 是否可以正常访问 1http://&lt;您的IP 地址&gt;/hello]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Python</tag>
        <tag>Nginx</tag>
        <tag>uwsgi</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 搭建 Ghost 博客]]></title>
    <url>%2F2017%2F11%2F07%2F%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-Ghost-%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[Ghost 是一块非常出色的开源博客平台，界面简洁，专注写作。本教程中，您将学到如何在 CentOS 7 上安装 Ghost ，包括安装 Nodejs 环境以及配置 Nginx 对 Ghost 的代理请求等步骤。 安装 Node.js 及相关包安装 Node.js逐行输入下面的命令进行安装： 1234567yum update -yyum groupinstall -y "Development Tools"curl --silent --location https://rpm.nodesource.com/setup_6.x | sudo bash -yum -y install nodejs#npm config set registry https://registry.npm.taobao.org#npm i -g cnpmnpm install -g cnpm --registry=https://registry.npm.taobao.org 安装成功后通过运行node -v及npm -v 出现版本号即可表示安装成功。 因为国内网络的关系，也同时安装了 cnpm 模块，后续将使用该命令代替 npm 命令。 安装 Ghost Client (ghost-cli)1cnmp i -g ghost-cli 一般而言，安装成功后通过运行 ghost -v，出现版本号即可表示安装成功。但因为国内的网络问题，安装后请检查下终端的 log，如果有出现任意红色报错信息，则证明只有部分安装成功，需要重新执行命令安装。 如果不能正常安装请多次执行上面的命令 安装 Ghost添加 Ghost 运行用户并创建目录请按行依次输入下面的命令 1234adduser ghostmkdir /var/wwwmkdir /var/www/ghostchown ghost /var/www/ghost 安装 Ghost本教程以 SQLlite3 作为 Ghost 的数据库 12cd /var/www/ghostghost install local --db=sqlite3 安装成功的截图： 如果你安装后不是类似上面的截图，则证明 Ghost-cli 没有安装成功；请重复执行上一步的“安装 Ghost Client”步骤。 启动Ghost安装成功后 Ghost 默认就已经启动了，下面的命令是分别是让 Ghost 停止、启动、重启命令，可尝试使用。 123ghost stopghost startghost restart 安装成功后默认是运行在http://localhost:2368/，如果需要对外访问，则需要通过 Nginx 进行反向代理。 安装 Nginx添加 Nginx 到 yum 源使用以下命令添加 CentOS 7 Nginx yum 资源库： 1rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm 安装 Nginx1yum install -y nginx 如无意外，Nginx 将完成安装在你的服务器中。 启动 Nginx刚安装的 Nginx 不会自行启动，需要通过如下命令启动 1systemctl start nginx.service 如果一切进展顺利的话，现在你可以通过你 IP( http://123.207.15.141/ )来访问你的 Web 页面syste来预览一下 Nginx 的默认页面。 如果看到上面的页面,那么说明你的 CentOS 中的 Nginx 已经正确安装。 另外还可以通过systemctl enable nginx.service命令加入开机启动项。 Nginx 配置反向代理修改 config 文件请确保 Ghost 已经在运行阶段方可进行如下操作。 1vi /etc/nginx/conf.d/default.conf 运行上面的命令后，再键入 i 然后移动光标在约第七行修改相关文件代码： 12345:qlocation / &#123; root /usr/share/nginx/html; index index.html index.htm; &#125; 改为： 123456location / &#123; proxy_pass http://127.0.0.1:2368; proxy_redirect default; root /usr/share/nginx/html; index index.html index.htm; &#125; 完成后通过按 ESC ，随后输入 :wq 回车保存。 然后运行 nginx -s reload 重启 Nginx。 Ghost 的界面管理首页完成了上面的步骤之后，访问 http://123.207.15.141/ 就能看到 Ghost 的默认页面变成了如下： 管理界面访问http://123.207.15.141/ghost 就可以继续相关写作设置了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 7 搭建 GitLab]]></title>
    <url>%2F2017%2F11%2F07%2F%E5%9F%BA%E4%BA%8E-CentOS-7-%E6%90%AD%E5%BB%BA-GitLab%2F</url>
    <content type="text"><![CDATA[准备环境在正式开始安装之前，先更新软件包并打开相关服务的权限。 更新软件包1yum update -y 安装 sshd安装 sshd: 1yum install -y curl policycoreutils-python openssh-server 配置防火墙打开 /etc/sysctl.conf 文件，在文件最后添加新的一行并保存： 1net.ipv4.ip_forward = 1 启动并启动防火墙 12systemctl enable firewalldsystemctl start firewalld 放通 HTTP: 1firewall-cmd --permanent --add-service=http 重启防火墙： 1systemctl reload firewalld 在实际使用中，可以使用 systemctl status firewalld 命令查看防火墙的状态。 安装 postfixGitLab 需要使用 postfix 来发送邮件。当然，也可以使用 SMTP 服务器。具体步骤请参考 官方教程。 安装： 1yum install -y postfix 打开v文件 , 在第 119 行附近找到 inet_protocols = all ，将 all 改为 ipv4 并保存： 1inet_protocols = ipv4 启用并启动 postfix: 12systemctl enable postfixsystemctl start postfix 配置 swap 交换分区由于 GitLab 较为消耗资源，我们需要先创建交换分区，以降低物理内存的压力。在实际生产环境中，如果服务器配置够高，则不必配置交换分区。 新建 2 GB 大小的交换分区： 1dd if=/dev/zero of=/root/swapfile bs=1M count=2048 格式化为交换分区文件并启用： 12mkswap /root/swapfileswapon /root/swapfile 添加并启动，打开 /etc/fstab 文件,在文件最后添加新的一行并保存： 1/root/swapfile swap swap defaults 0 0 安装 GitLab将软件源修改为国内源由于网络环境的原因，将 repo 源修改为清华大学。 在 /etc/yum.repos.d 目录下新建 gitlab-ce.repo 文件并保存，内容如下： 12345[gitlab-ce]name=Gitlab CE Repositorybaseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/gpgcheck=0enabled=1 安装 GitLab刚才修改过了 yum 源，因此先重新生成缓存：（此步骤执行时间较长，一般需要 3~5 分钟左右，请耐心等待） 1yum makecache 安装 GitLab：（此步骤执行时间较长，一般需要 3~5 分钟左右，请耐心等待） 1yum install -y gitlab-ce 初始化 GitLab配置 GitLab 的域名（非必须）打开 /etc/gitlab/gitlab.rb 文件，在第 13 行附近找到 external_url &#39;http://gitlab.example.com&#39;，将单引号中的内容改为自己的域名（带上协议头，末尾无斜杠），并保存。 1external_url 'http://work.myteam.com' 初始化 GitLab特别重要！ 使用如下命令初始化 GitLab：（此步骤执行时间较长，一般需要 5~10 分钟左右，请耐心等待） 1sudo gitlab-ctl reconfigure GitLab 安装已完成至此，我们已经成功地在 CentOS 7 上搭建了 GitLab。 现在可以在这里（http://&lt;您的 CVM IP 地址&gt;/）访问 GitLab 了。 在实际生产中，建议您使用 2 核 4 GB 或更高配置。点击这里 可以查看 GitLab 官方推荐的配置和可承载人数对应表。 再次提醒您，定期执行 yum update -y 以保持各软件包的最新状态。]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建基于 ZIPKIN 的数据追踪系统]]></title>
    <url>%2F2017%2F11%2F06%2F%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8E-ZIPKIN-%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[ZipkinZipkin 是一个分布式数据追踪系统，适用于微服务架构下的调用链路数据采集及分析工作。 配置 Java 环境安装 JDKZipkin 使用 Java 8 1yum install java-1.8.0-openjdk* -y 安装 Zipkin新建目录1mkdir -p /data/release/zipkin &amp;&amp; cd "$_" 下载 Zipkin1wget -O zipkin.jar &apos;https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&apos; 启动 Zipkin1java -jar zipkin.jar Zipkin 默认监听 9411 端口， 使用浏览器访问 http://:9411 即可看到 Zipkin 自带的图形化界面。 配置 MySQL 数据持久化方案Zipkin 支持的持久化方案很多 ，如： Cassandra,MySQL,Elasticsearch . 本实验使用 MySQL 5.7 作为数据库持久化方案。 ### 安装 MySQL 5.7使用 Ctrl + C 退出上个步骤的 Java 进程并下载 rmp 包。 1wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm 安装 rpm 包 1rpm -Uvh mysql57-community-release-el7-9.noarch.rpm 安装 MySQL 1yun install mysql-community-server -y 启动 MySQL 服务 1systemctl start mysqld.service 设置 MySQL 密码获取 root 临时密码 1grep 'temporary password' /var/log/mysqld.log | awk '&#123;print $NF&#125;' 使用上一步的获得的临时密码登入 MySQL 1mysql -uroot -p 设置 MySQL 账户的 root 密码 1ALTER USER 'root'@'localhost' IDENTIFIED BY 'Xx$Zipkin2017'; 登录 MySQL 1mysql -u root --password='Xx$Zipkin2017' 创建 Zipkin 数据库 1create database zipkin; 切换数据库 1use zipkin; 初始化表及索引 1source /data/release/zipkin/zipkin_init.sql 执行以下命令会看到zipkin_annotations, zipkin_dependencies, zipkin_spans 三张数据表，说明初始化成功了 1show tables; 退出 MySQL, 回到 Bash shell 1exit 启动 Zipkin注： 此处默认使用实验生成的密码 123cd /data/release/zipkinSTORAGE_TYPE=mysql MYSQL_HOST=localhost MYSQL_TCP_PORT=3306 MYSQL_DB=zipkin MYSQL_USER=root MYSQL_PASS='Xx$Zipkin2017' \nohup java -jar zipkin.jar &amp; 创建具有数据上报能力的Demo搭建 NodeJS 环境12curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -yum install nodejs -y 创建 Demo 目录创建 /data/release/service_a 目录 1mkdir -p /data/release/service_a &amp;&amp; cd "$_" 使用 NPM 安装相关依赖 请在 /data/release/service_a 目录下创建并编辑package.json, 参考下面的内容。 123456789101112131415&#123; "name": "service_a", "version": "1.0.0", "description": "", "main": "index.js", "scripts": &#123;&#125;, "author": "", "license": "ISC", "dependencies": &#123; "express": "^4.15.3", "zipkin": "^0.7.2", "zipkin-instrumentation-express": "^0.7.2", "zipkin-transport-http": "^0.7.2" &#125;&#125; 安装相关依赖 1npm install 创建并编辑 app.js请在 /data/release/service_a 目录下创建 app.js ，参考下面的内容。 12345678910111213141516171819202122232425262728const express = require('express');const &#123;Tracer, ExplicitContext, BatchRecorder&#125; = require('zipkin');const &#123;HttpLogger&#125; = require('zipkin-transport-http');const zipkinMiddleware = require('zipkin-instrumentation-express').expressMiddleware;const ctxImpl = new ExplicitContext();const recorder = new BatchRecorder(&#123; logger: new HttpLogger( &#123; endpoint: 'http://127.0.0.1:9411/api/v1/spans' &#125;)&#125;);const tracer = new Tracer(&#123;ctxImpl, recorder&#125;);const app = express();app.use(zipkinMiddleware(&#123; tracer, serviceName: 'service-a'&#125;));app.use('/', (req, res, next) =&gt; &#123; res.send('hello world');&#125;);app.listen(3000, () =&gt; &#123; console.log('service-a listening on port 3000!')&#125;); 启动服务1node app.js 该服务监听 3000 端口， 使用浏览器访问 http://:3000 后，看到“hello world” 的文本字样说明服务已经正常工作。 至此，本入门教程已结束，而 Zipkin 的学习只是一个开始，如有兴趣，可尝试搭建一个基于 Kafka + Zookeeper + Elasticsearch 的分布式服务。]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建 PySpider 爬虫服务]]></title>
    <url>%2F2017%2F11%2F06%2F%E6%90%AD%E5%BB%BA-PySpider-%E7%88%AC%E8%99%AB%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[PySpider 简介PySpider 是一个国人编写的强大的网络爬虫系统并带有强大的 WebUI。 采用 Python 语言编写，分布式架构，支持多种数据库后端，强大的 WebUI 支持脚本编辑器，任务监视器，项目管理器以及结果查看器。本教程将一步一步指引您搭建属于自己的 PySpider 爬虫服务。 环境准备在开始部署前，我们需要做一些前置准备。yum 更新 1yum update -yum 安装开发编译工具 1yum install gcc gcc-c++ -y 安装依赖库 1yum install python-pip python-devel python-distribute libxml2-devel python-lxml libxslt libxslt-devel openssl openssl-devel -y 升级 pip 1pip install --upgrade pip 部署 mariadb由于 CentOS 7 中 MySQL 数据库已从默认的程序列表中移除，我们使用 mariadb 代替。 安装 mariadb1yum install mariadb-server mariadb -y 启动 mariadb 服务1systemctl start mariadb 设置 root 密码默认的 root 用户密码为空，你可以使用一下命令来创建 root 密码：（该步骤也可以跳过，password 后的 dkOgKv 可以改为任何你希望设置的密码） 1mysqladmin -u root password "QuZheng" 检查是否安装成功现在你可以尝试通过以下命令来连接到 Mysql 服务器 1mysql -u root -p 然后输入您刚才设置的密码 （ 默认：QuZheng ），如果一切正常，您应该可以在命令行看到以 MariaDB [(none)]&gt; 或 mysql&gt; 开头的提示了，说明连接成功。此时输入 SHOW DATABASES; 并回车，应该可以看到类似下面这样的输出，说明一切正常。 12345678mysql&gt; SHOW DATABASES;+----------+| Database |+----------+| mysql || test |+----------+2 rows in set (0.13 sec) 完成后，可以通过快捷键 Ctrl+C 或者命令行键入 exit 来退出，进入下一步。 部署 redis下载、解压安装包1wget http://download.redis.io/redis-stable.tar.gz 移动压缩包到 /usr/local 内 1mv redis-stable /usr/local/redis 编译安装 123cd /usr/local/redismakemake install 配置 redis 设置配置文件路径 12mkdir -p /etc/rediscp /usr/local/redis/redis.conf /etc/redis/redis.conf 修改 /etc/redis/redis.conf 文件的 daemonize 配置项为如下： 1damemonize yes 启动 redis 服务 1/usr/local/bin/redis-server /etc/redis/redis.conf 部署 pyspider安装依赖123pip install --upgrade chardeteasy_install mysql-connector==2.1.3easy_install redis 安装 pyspider1pip install pyspider 配置 pyspider首先创建配置目录 1mkdir /etc/pyspider 然后 /etc/pyspider 目录下创建 pyspider.conf.json ,参考下面的内容。具体配置的说明文件参考 官方文档 1234567891011&#123; "taskdb": "mysql+taskdb://root:Password@127.0.0.1:3306/taskdb", "projectdb": "mysql+projectdb://root:Password@127.0.0.1:3306/projectdb", "resultdb": "mysql+resultdb://root:Password@127.0.0.1:3306/resultdb", "message_queue": "redis://127.0.0.1:6379/db", "webui": &#123; "username": "root", "password": "Password", "need-auth": true &#125;&#125; 其中 mysql 配置中的 root 为您 mysql 的用户名， root: 后面的 Password 为您刚设置的密码。 webui 配置中的 username 及 password 为您访问 WebUI 时候需要的用户名，你也可以不设置用户名密码，直接将 need-auth 设为 false 即可。 启动服务1pyspider -c /etc/pyspider/pyspider.conf.json 如果一切正常，现在访问 http://&lt;您的 IP 地址&gt;:5000，您应该可以看到 pyspider dashboard 的首页了。 服务能够正常启动后，我们需要让它能够在后台运行，您可以通过以下命令让服务在后台运行 1nohup pyspider -c /etc/pyspider/pyspider.conf.json &amp; 也可以使用官方推荐的 Supervisor 来启动，这里就不详细介绍了，具体用法可以参考 Supervisor 的文档 部署完成此时您可以访问 http://&lt;您的 IP 地址&gt;:5000 使用您的爬虫来搜集数据了，具体 pyspider 爬虫脚本的编写及使用教程可以参考 网上资料。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Pyspider</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 LNMP 环境]]></title>
    <url>%2F2017%2F10%2F27%2F%E6%90%AD%E5%BB%BA-LNMP-%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[LNMP是建立web应用的平台，是Linux、NGINX，MySQL（有时也指MariaDB，数据库软件） 和PHP（有时也是指Perl或Python） 的简称。 搭建 Nginx 静态服务器安装 Nginx使用 yum 安装 Nginx 1yum -y install nginx 修改 /etc/nginx/conf.d/default.conf ，去除对 IPv6 地址的监听，可以参考下面的示例代码 123456789101112131415161718192021server &#123; listen 80 default_server; # listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location /&#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 修改完成后，启动 Nginx 1nginx 此时，可以访问 http://\ 来确认是否安装成功 将 nginx 设置为开机自动启动 1chkconfig nginx 安装 MySQL 数据库服务使用 yum 安装 MySQL : 1yum -y install mysql-server 安装完成后，启动 MySQL 服务 1service mysqld start 设置 MySQL 管理员密码 1/usr/bin/mysqladmin -u root password 'QuZheng' 将 MySQL 设置开机自动启动 1chkconfig mysql on 安装 PHP使用 yum 安装 PHP: 1yum -y install php php-fpm php-mysql 安装之后，启动 php-fpm 进程： 1service php-fpm start 启动之后，可以使用下面的命令查看 PHP-FPM 进程监听那个端口 1netstat -nplt | grep php-fpm 将 PHP-FPM 设置开机自动启动 1chkconfig php-fpm on 配置 Nginx 并运行 PHP 程序配置 Nginx在 /etc/nginx/conf.d 目录中新建一个名为 php.conf 的文件，并配置 Nginx 端口 ，配置示例如下： 1234567891011server &#123; listen 8000; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 location ~ .php$ &#123; root /usr/share/php; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 修改配置完成后，重启 nginx 服务 1service nginx restart 这时候，我们就可以在/usr/share/php 目录下新建一个 info.php 文件来检查 php 是否安装成功了，文件内容参考如下： 1&lt;?php phpinfo(); ?&gt;]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建 LAMP 服务]]></title>
    <url>%2F2017%2F10%2F27%2F%E6%90%AD%E5%BB%BA-LAMP-%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[搭建 MYSQL 数据库使用 yum 安装 MySQL : 1yum install mysql-server -y 安装完成后启动 MySQL 服务 : 1service mysqld restart 将 MySQL 加入开机自动启动 1chkconfig mysqld on 设置 MySQL 账户 root 密码： 1usr/bin/mysqladmin -u root password 'QuZheng' 安装 APACHE 服务器使用 yum 安装 Apache 1yum -y install httpd 启动 Apache 服务 1service httpd start 将 Apache 加入开机自动启动 1chkconfig httpd on 安装 PHP安装 PHP 和 PHP-MYSQL 支持工具：使用 yum 安装 PHP: 1yum install php php-mysql -y 检查安装是否成功检测 PHP 是否安装成功我们在 /var/www/html 目录下创建一个 info.php 文件来检查 php 是否安装成功 ，示例代码参考如下 1touch /var/www/html/info.php 1&lt;?php phpinfo(); ?&gt; 重启 Apache 服务 ： 1service httpd restart 此时，访问 http://1270.0.0.1/info.php 可浏览到我们刚刚创建的 info.php 页面了]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建 ShowDoc 文档工具]]></title>
    <url>%2F2017%2F10%2F26%2F%E6%90%AD%E5%BB%BA-ShowDoc-%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文档工具。 准备 Nginx + PHP 环境安装 Nginx使用 yum 安装 Nginx 1yum install nginx 修改 /etc/nginx/nginx.conf 文件的内容如下 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server &#123; listen 80; server_name 127.0.0.1; root /var/www/html; index index.php index.html error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; location ~ .php$ &#123; root /var/www/html; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125; location ~ /.ht &#123; deny all; &#125; &#125;&#125; 启动 Nginx 并设置为开机启动： 12service nginx startchkconfig nginx on 安装 PHP使用 yum 安装 php-fpm: 1yum -y install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo 启动 php-fpm 并设置开机启动： 12service php-fpm startchkconfig php-fpm on 创建项目下载安装 ComposerComposer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。 执行如下命令安装 Composer: 12curl -sS https://getcomposer.org/installer | phpmv composer.phar /usr/local/bin/composer 设置 Compooser 使用国内镜像1composer config -g repo.packagist composer https://packagist.phpcomposer.com 使用 Compooser 创建项目执行命令创建项目： 1cd /var/www/html/ &amp;&amp; composer create-project showdoc/showdoc 设置 showdoc 目录写权限执行命令赋予 showdoc 下部分目录的写权限 12345678chmod a+w showdoc/installchmod a+w showdoc/Sqlitechmod a+w showdoc/Sqlite/showdoc.db.phpchmod a+w showdoc/Public/Uploads/chmod a+w showdoc/Application/Runtimechmod a+w showdoc/server/Application/Runtimechmod a+w showdoc/Application/Common/Conf/config.phpchmod a+w showdoc/Application/Home/Conf/config.php 创建完毕，您现在可以通过浏览器访问 http://&lt; IP地址&gt;/showdoc/install/ ，进行语言的选择以后即可通过 http://&lt; IP地址&gt;/showdoc 查看站点效果。]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建 Thinkjs 开发环境]]></title>
    <url>%2F2017%2F10%2F26%2F%E6%90%AD%E5%BB%BA-Thinkjs-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装 Node.jsThinkJS 是一款 Node.js 的MVC 框架，所以安装 ThinkJS 之前需要安装 Node.js 环境。 安装 Node.js 6.x0ThinkJS 支持 Node.js 的 0.12 以上版本，本教程以 Node.js 6.x 为例，其他版本安装过程相似 12curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -sudo apt-get install -y nodejs 安装 ThinkJSnpm 安装 ThinkJS执行如下命令安装 ThinkJS 1sudo npm install thinkjs@2 -g --verbose 创建项目执行如下命令创建项目： 1thinkjs new project_path; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162create : project_pathcreate : project_path/package.jsoncreate : project_path/.babelrccreate : project_path/.thinkjsrccreate : project_path/nginx.confcreate : project_path/pm2.jsoncreate : project_path/.gitignorecreate : project_path/README.mdcreate : project_path/wwwcreate : project_path/www/development.jscreate : project_path/www/production.jscreate : project_path/www/testing.jscreate : project_path/www/README.mdcreate : project_path/www/staticcreate : project_path/www/static/jscreate : project_path/www/static/csscreate : project_path/www/static/imgcreate : project_path/srccreate : project_path/src/common/bootstrapcreate : project_path/src/common/bootstrap/middleware.jscreate : project_path/src/common/bootstrap/global.jscreate : project_path/src/common/configcreate : project_path/src/common/config/config.jscreate : project_path/src/common/config/view.jscreate : project_path/src/common/config/db.jscreate : project_path/src/common/config/hook.jscreate : project_path/src/common/config/session.jscreate : project_path/src/common/config/error.jscreate : project_path/src/common/config/envcreate : project_path/src/common/config/env/development.jscreate : project_path/src/common/config/env/testing.jscreate : project_path/src/common/config/env/production.jscreate : project_path/src/common/config/localecreate : project_path/src/common/config/locale/en.jscreate : project_path/src/common/controllercreate : project_path/src/common/controller/error.jscreate : project_path/view/commoncreate : project_path/view/common/error_400.htmlcreate : project_path/view/common/error_403.htmlcreate : project_path/view/common/error_404.htmlcreate : project_path/view/common/error_500.htmlcreate : project_path/view/common/error_503.htmlcreate : project_path/src/home/configcreate : project_path/src/home/config/config.jscreate : project_path/src/home/controllercreate : project_path/src/home/controller/base.jscreate : project_path/src/home/controller/index.jscreate : project_path/src/home/logiccreate : project_path/src/home/logic/index.jscreate : project_path/src/home/modelcreate : project_path/src/home/model/index.jscreate : project_path/view/homecreate : project_path/view/home/index_index.htmlenter path:$ cd project_pathinstall dependencies:$ npm installrun the app:$ npm start 安装项目依赖执行如下命令安装依赖： 12cd project_pathnpm install --verbose 启动项目执行如下命令启动项目 1npm start 启动成功将看到提示如截图所示： 123456789101112131415161718192021222324252627[2017-10-26 14:27:34] [Babel] Compile file common/bootstrap/global.js 512ms[2017-10-26 14:27:34] [Babel] Compile file common/bootstrap/middleware.js 21ms[2017-10-26 14:27:34] [Babel] Compile file common/config/config.js 33ms[2017-10-26 14:27:34] [Babel] Compile file common/config/db.js 49ms[2017-10-26 14:27:34] [Babel] Compile file common/config/env/development.js 6ms[2017-10-26 14:27:34] [Babel] Compile file common/config/env/production.js 17ms[2017-10-26 14:27:34] [Babel] Compile file common/config/env/testing.js 5ms[2017-10-26 14:27:34] [Babel] Compile file common/config/error.js 18ms[2017-10-26 14:27:34] [Babel] Compile file common/config/hook.js 8ms[2017-10-26 14:27:34] [Babel] Compile file common/config/locale/en.js 11ms[2017-10-26 14:27:34] [Babel] Compile file common/config/session.js 20ms[2017-10-26 14:27:34] [Babel] Compile file common/config/view.js 26ms[2017-10-26 14:27:35] [Babel] Compile file common/controller/error.js 167ms[2017-10-26 14:27:35] [Babel] Compile file home/config/config.js 7ms[2017-10-26 14:27:35] [Babel] Compile file home/controller/base.js 18ms[2017-10-26 14:27:35] [Babel] Compile file home/controller/index.js 21ms[2017-10-26 14:27:35] [Babel] Compile file home/logic/index.js 34ms[2017-10-26 14:27:35] [Babel] Compile file home/model/index.js 27ms[2017-10-26 14:27:35] [THINK] Server running at http://127.0.0.1:8360/[2017-10-26 14:27:35] [THINK] ThinkJS Version: 2.2.24[2017-10-26 14:27:35] [THINK] Cluster Status: closed[2017-10-26 14:27:35] [THINK] WebSocket Status: closed[2017-10-26 14:27:35] [THINK] File Auto Compile: true[2017-10-26 14:27:35] [THINK] File Auto Reload: true[2017-10-26 14:27:35] [THINK] App Enviroment: development[2017-10-26 14:27:36] [HTTP] HEAD / 200 60ms]]></content>
  </entry>
  <entry>
    <title><![CDATA[搭建邮件服务器]]></title>
    <url>%2F2017%2F10%2F26%2F%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[Postfix 是一个标准的 MTA [Mail Transfer Agent] 服务器 ，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。 域名解析添加两条域名解析 A 记录记录类型：A 主机记录：@ 记录值：IP 地址 MX 记录记录类型：MX 主机记录：@ 记录值：yourdomain.com（替换为自己域名） 生效检查域名设置解析后需要过一段时间才会生效，通过 1ping ping yourdomain.com 命令检查域名是否生效 检查 MX 记录替换下面命令中的 yourdomain.com 为您自己的注册的域名： 1nslookup -q=mx yourdomain.com 如果 nslookup 命令返回的信息中含有你设置的域名的记录值，说明解析成功。 实验之前配置一个功能完善的邮件服务器并不是一项容易的工作，本实验知识搭建一个简单的邮件服务器，一些更为强大的功能还需要你去探索。 Postfix、Dovecot 简介PostfixPostfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。 DovecotDovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。 Postfix、Dovecot 安装在 CentOS 7 上，我们可以直接使用 yum 进行下载安装： 1yum -y install postfix dovecot Postfix配置 Postfix有关配置参数的具体含义，请参考 Postfix 配置文档 配置在终端中输入一下命令修改 Postfix 相关配置： 注意：记得将 yourdomain.com 替换为你自己的域名 1234567891011121314151617postconf -e 'myhostname = server.yourdomain.com'postconf -e 'mydestination = localhost, localhost.localdomain'postconf -e 'myorigin = $mydomain'postconf -e 'mynetworks = 127.0.0.0/8'postconf -e 'inet_interfaces = all'postconf -e 'inet_protocols = all'postconf -e 'mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain'postconf -e 'home_mailbox = Maildir/'postconf -e 'smtpd_sasl_type = dovecot'postconf -e 'smtpd_sasl_path = private/auth'postconf -e 'smtpd_sasl_auth_enable = yes'postconf -e 'broken_sasl_auth_clients = yes'postconf -e 'smtpd_sasl_authenticated_header = yes'postconf -e 'smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination'postconf -e 'smtpd_use_tls = yes'postconf -e 'smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem'postconf -e 'smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem' 配置中 Postfix 使用 sasl 和 tls 来完成身份认证和传输信息加密。 试验中使用了 Dovecot 默认的 ssl 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。 配置 smtps部分邮件客户端依赖于使用 465 端口提供加密连接，所以我们修改配置，允许 postfix 使用 465 端口发送邮件。 打开 /etc/postfix/master.cf 文件，将如下两行前的 # 去除： 12smtps inet n - n - - smtpd-o smtpd_tls_wrappermode=yes （注意：-o 前要保留空格） 启动使用以下命令，将 Postfix 设为自动启动并首次启动该服务： 12systemctl enable postfix.servicesystemctl start postfix.service]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 Node.js 环境]]></title>
    <url>%2F2017%2F10%2F25%2F%E6%90%AD%E5%BB%BA-Node-js-%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[yum 简介Node.js 是运行在服务端的 JavaScript, 是基于 Chrome JavaScript V8 引擎建立的平台。 yum 安装 Node.js 环境安装相关的依赖包1yum -y install openssl 安装 Node.js1yum -y install nodejs 源码包安装配置下载并安装 Node.js下载最新的稳定版 v6.10.3 到本地 1wget https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.xz 下载完成后，将其解压 1tar xvJf node-v6.10.3-linux-x64.tar.xz 将解压的 Node.js 目录移动到 /usr/local 兖下 1mv node-v6.10.3-linux-x64 /usr/local/node-v6 配置 node 软连接 到 /bin 目录 1ln -s /usr/local/node-v6/bin/node /bin/node 配置和使用 npm配置 npmnpm 是 Node.js 的包管理和分发工具。它可以让 Node.js 开发者能够更加轻松的共享代码和共用代码片段 下载 node 的压缩包中已经包含了 npm , 我们只需要将其软链接到 bin 目录下即可 1ln -s /usr/local/node-v6/bin/npm /bin/npm 配置环境变量将 /usr/local/node-v6/bin 目录添加到 $PATH 环境变量中可以方便地使用通过 npm 全局安装的第三方工具 1echo 'export PATH=/usr/local/node-v6/bin:$PATH' &gt;&gt; /etc/profile 生效环境变量1source /etc/profile 使用 npm通过 npm 安装进程管理模块 forever 1npm install forever -g]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 SVN 服务器]]></title>
    <url>%2F2017%2F10%2F25%2F%E6%90%AD%E5%BB%BA-SVN-%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[SVN 简介SVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。本实验带您一步步搭建属于自己的 SVN 服务器 安装 SVN 服务器安装 SubversionSubversion 是一个版本控制系统个 ，相对于的 RCS、CVS ，采用了分支管理系统，他的设计目标就是取代 CVS 1yum install -y subversion 创建 SVN 版本库创建项目版本库 12mkdir -p /data/svn/myprojectsvnadmin create /data/svn/myproject 配置 SVN 信息配置文件简介版本库中的配置目录 conf 有三个文件: authz 是权限控制文件 passwd 是帐号密码文件 svnserve.conf 是SVN服务综合配置文件 配置权限配置文件 authz现在编辑 authz ，内容参考如下： 12345678910[groups] #用户组admin = admin,root,test #用户组所对应的用户[/] #库目录权限@admin = rw #用户组权限*=r #非用户组权限 而配置账号密码文件 passwd内容参考如下 123456[users]# harry = harryssecret# sally = sallyssecretadmin = 123456root = 123456test = 123456 配置 SVN 服务综合配置文件 svnserve.conf编辑 编辑 svnserve.conf ，内容参考如下： 1234567891011121314[general]# force-username-case = none# 匿名访问的权限 可以是read、write，none，默认为readanon-access = none#使授权用户有写权限auth-access = write#密码数据库的路径password-db = passwd#访问控制文件authz-db = authz#认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字realm = /data/svn/myproject[sasl] 启动 SVN 服务启动 SVN1svnserve -d -r /data/svn checkout SVN 项目12mkdir -p /data/workspace/myprojectsvn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache 提交文件到 SVN 服务器从本地提交文件到 SVN 服务器 ，其中 root 密码为 /data/svn/myrpoject/conf/passwd 文件存储的密码 1234cd /data/workspace/myprojectecho test &gt;&gt;test.txtsvn add test.txtsvn commit test.txt -, 'test' 提交成功后可以通过如下命令从本地项目删除文件 12cd /data/workspace/myprojectrm -rf test.txt 删除后可以通过 SVN 服务器恢复 12cd /data/workspace/myprojectsvn update 部署完成至此 SVN 环境的搭建就已经完成了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建个人 Leanote 云笔记本]]></title>
    <url>%2F2017%2F10%2F25%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA-Leanote-%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[Leanote 简介Leanote 是目前为止发现的最有 bigger 的云笔记，具备 markdown 输入，代码高亮，多人协作，笔记历史记录，笔记内导航，直接发布为博客等等能力。本实验将带您一步步搭建属于自己的云笔记本，您将可以通过云笔记记录生活工作的点滴。 下载启动 MongoDBleanote 依赖 MongoDB 作为数据存储 ，下面开始安装 MongoDB: 下载 MongoDB进入 /home 目录，并下载 MongoDB: 1cd /home 下载源码 1wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz 解压缩源码包 1tar -xzvf mongodb-linux-x86_64-3.0.1.tgz 创建用于存储的文件夹目录1mkdir -p /data/db 配置 MongoDB 的环境变量： 编辑 /etc/profile, 在文件夹末尾追加以下配置： 1export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin 并执行以下命令，是环境变量生效。 1source /etc/profile 启动 MongoDB执行下面的命令启动 MongoDB 需要 3 ~ 5 分钟，耐心等待 1mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork 安装 leanoteLeanote 是一款 Linux 下开源的软件，下面开始安装 Leanote： ###下载 leanote 进入 /home 目录 1cd /home 下载 Leanote 源码 1wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz 解开压缩包1tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz 编辑 Leanote 配置文件编辑文件 app.conf，在文件中找到 app.secret= 项，并修改为如下内容： 1app.secret=qcloud666 初始化数据库导入初始化数据： 1mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/ 启动 Leanote 服务 1nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp; 访问 Leanote 云笔记本通过 ip 访问笔记本 通过访问 http://&lt;您的 IP 地址&gt;:9000 就可以了使用自己的笔记本。 初始化账户： admin 初始化密码： abc123 请修改密码已确保使用安全！]]></content>
      <categories>
        <category>Linux</category>
        <category>leanote</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[玩转 Jupyter Notebook]]></title>
    <url>%2F2017%2F10%2F24%2F%E7%8E%A9%E8%BD%AC-Jupyter-Notebook%2F</url>
    <content type="text"><![CDATA[安装 Juptyer NotebookJupyter Notebook 简介jupter Notebook 是一个开源的 Web 应用程序，可以用来创建和共享包含动态代码、方程式、可视化及解释性文本的文档。 其应用包括：数据整理与转换、数值模拟、统计建模、机器学习等等。 更多信息请见 官网 检查 Python 环境CentOS 7.2 中默认集成了 Python 2.7 ,可以通过下面命令检查 Python 版本： 1python --version 安装 pip pip 是一个 Python 包管理工具，我们使用 yum 命令来安装该工具： 1yum -y install python-pip 笔者在自己的机器测试的时候遇到了问题 需要安装 epel-release，解决办法参考传送门 使用下面命令升级 pip 到最新版本： 1pip install --upgrade pip 非常扯淡，不知道为什么下载的不是最新版本，还得升级。这个要是不熟悉就完蛋了。。。 安装相关依赖安装 Jupyter 过工程中还需要一些依赖，我们使用一下命令安装他们： 12yum -y groupinstall "Development Tools"yum -y install python-devel 配置虚拟环境安装 virtualenv我们将为 Jupyter 创建一个独立的虚拟环境，与系统自带的 Python 隔离开来，为此，先安装 virtualenv 库: 1pip install virtualenv 创建虚拟环境创建一个专门的虚拟环境 ，并直接激活进入该环境： 12virtualenv venvsource venv/bin/activate 使用 pip 安装 Jupyter我们使用 pip 命令安装 jupyter 1pip install jupyter 配置 Jupyter Notebook建立项目目录我们先为 Jupyter 相关文件准备一个目录： 12mkdir /data/jupytercd /data/jupyterpy 在建立一个目录作为 /jupyter 运行的根目录： 1mkdir /data/jupyter/root 准备密码密文由于我们将以需要密码验证的模式启动 Jupyter ,所以我们要预先生成所需的秘药对应的密文。 生成密文 使用下面的命令，创建一个密文的密码： 1python -c "import IPython;print IPython.lib.passwd()" 执行后需要输入并确认密码，然后程序会返回一个 &#39;sha1:...&#39; 的密文，我们接下来将会用到它。 1sha1:6889357b4a1f:1dc884a41c8c3db35f01dcdc0817c64fdc845c69 ### 修改配置文件生成配置文件我们使用 –generate-config 参数生成默认配置文件： 1jupyter notebook --generate-config --allow-root 生成的配置文件在 /root/.jupyter/ 目录下。 修改配置然后在配置文件最下方加入以下配置： 123456c.NotebookApp.ip = '*'c.NotebookApp.allow_root = Truec.NotebookApp.open_browser = Falsec.NotebookApp.port = 8888c.NotebookApp.password = u'sha:6889357b4a1f:1dc884a41c8c3db35f01dcdc0817c64fdc845c69e'c.ContentsManager.root_dir = '/data/jupyter/root' 其中： c.NotebookApp.password 请将上一步中密文填入此项，包括 sha: 部分。 你也可以直接配置或使用 Nginx 将服务代理到 80 或 443 端口。 启动 Jupyter Notebook直接启动使用一下指令启动 Jupyter Notebook： 1jupyter notebook 创建 Notebook 进入【首页】 首先需要输入前面不走中设置的密码。 然后点击右侧的【new】 ，选择 Python2 新建一个 notebook ,这时跳转到编辑界面。 现在我们可以看到 /data/jupyter/root/ 目录中出现了一个 Untitled.ipynb 文件，这就是我们刚刚新建的 Notebook 文件。我们建立的所有 Notebook 都将默认以该类型的文件格式保存。 后台运行直接以 jupyter notebook 命令启动 Jupyter 的方式在连接断开时将会中断，所以我们需要让 Jupyter 服务在后台常驻。 先按 Ctrl + C 并输入 y 停止 Jupyter 服务，然后执行以下命令： 1nohup jupyter notebook &gt; /data/jupyter/jupyter.log 2&gt;&amp;1 &amp; 该命令将使得 Jupyter 在后台运行，并将日志写在 /data/jupyter/jupyter.log 文件中。 准备后续步骤的 Notebook为了后面实验中实验室的步骤检查器能够更好的工作，此时我们使用以下命令预先创建几份 ipynb 文件： 12345cd /data/jupyter/rootcp Untitled.ipynb first.ipynbcp Untitled.ipynb matplotlib.ipynbcp Untitled.ipynb tensorflow.ipynbrm -f Untitled.ipynb 使用 Jupyter Notebook 接下来的步骤中如遇到步骤检查未通过，请按下 Ctrl + S 保存，等待步骤检查器确认。 编辑界面打开 first.ipynb 编辑界面。 Jupyter Notebook 的编辑界面主要由 工具栏 和 内容编辑区 构成。 下方编辑区，由 Cell 组成。每个 notebook 由多个 Cell 构成，每个 Cell 都可以有不同的用途。 Code Cell新建的 notebook 中包含一个代码 Cell（Code Cell），以 [ ] 开头，在该类型的 Cell 中，可以输入任意代码并执行。如输入： 11+1 然后按下 Shift + Enter 键， Cell 中代码就会被执行，光标也会移动至下个新 Cell 中。我们接着输入： 1print("Hello Jupyter") 再次按下 Shift + Enter ，可以看到这次没有出现 Out[..] 这样的文字。这是因为我们只打印出来了某些值，而没有返回任何的值。 按下 Ctrl + S 保存，等待步骤检查器确认。 Heading Cell新版本中已经没有独立的 Heading Cell，现在标题被整合在 Markdown Cell 之中。 如果我们想在顶部添加一个的标题。选中第一个 Cell，然后点击 Insert -&gt; Insert Cell Above。 你会发现，文档顶部马上就出现了一个新的 Cell。点击在工具栏中 Cell 类型（默认为 Code），将其变成 Markdown。接着在 Cell 中写下： 1# My First Notebook 然后按下 Shift + Enter 键，便可以看到生成了一行一级标题。 与 Markdown 语法相同，使用多个#将改变标题级别。 Markdown Cell上一步中我们尝试了使用 Markdown Cell 。 在该 Cell 中，除标题外其他语法同样支持。比如，我们在一个新的 Cell 中插入以下文本： 1234567This is a **table**:| Name | Value ||:----:|:-----:|| A | 1 || B | 2 || C | 3 | 然后按下 Shift + Enter，即可渲染出相应内容。 高级用法 - HTMLMarkDown Cell 中同样接受 HTML 代码。 这样，你就可以实现更加丰富的样式及结构、添加图片等等。 例如，如果想在 notebook 中添加 Jupyter 的 logo，并且添加 2px 的黑色边框，放置在单元格左侧，可以这样编写 1&lt;img src="http://jupyter.org/assets/nav_logo.svg" style="border: 2px solid black; float:left" /&gt; 然后按下 Shift + Enter，即可渲染出图片。 高级用法 - LaTexMarkdown Cell 还支持 LaTex 语法。 在 Cell 中插入以下本文： 1$$int_0^&#123;+infty&#125; x^2 dx$$ 同样按下 Shift + Enter，即可渲染出公式。 导出notebook 支持导出导出为 HTML、Markdown、PDF 等多种格式。 如点击 File -&gt; Download as -&gt; HTML(.html)，即可下载到 HTML 版本的 notebook。 导出 PDF其中，导出 PDF 需要其他包的支持，我们需要使用一下命令安装这些依赖： 1yum -y install pandoc texlive-* 注：直接导出 PDF 时 Jupyter 可能会忽略一些 Cell，建议先导出为 HTML，然后使用浏览器将其转为 PDF。 安装 Matplotlib我们使用 pip 来安装 Matplotlib ： 1pip install matplotlib 测试 Matplotlib 我们使用另一个 notebook （matplotlib.ipynb）来测试 Matplotlib。 打开 matplotlib.ipynb 编辑界面。 魔法命令在第一个 Cell 中，我们插入并执行： 1%matplotlib inline 测试关于 matplotlib 的使用请移步其官网。 在接下来 Cell 中，我们插入几个官方示例测试： plot_bmh 示例代码：/plot_bmh.py 12from numpy.random import betaimport matplotlib.pyplot as plt plt.style.use(‘bmh’) def plot_beta_hist(ax, a, b): ax.hist(beta(a, b, size=10000), histtype=”stepfilled”, bins=25, alpha=0.8, normed=True) fig, ax = plt.subplots() plot_beta_hist(ax, 10, 10) plot_beta_hist(ax, 4, 12) plot_beta_hist(ax, 50, 12) plot_beta_hist(ax, 6, 55) ax.set_title(“‘bmh’ style sheet”) plt.show() 1234567891011121314151617181920212223242526 `Shift + Enter` 执行 **Cell**，即可看到绘制出的图像。2. [whats_new_99_mplot3d](http://matplotlib.org/examples/pyplots/whats_new_99_mplot3d.html)： 示例代码：/whats_new_99_mplot3d.py ```python import random import numpy as np import matplotlib.pyplot as plt from matplotlib import cm from mpl_toolkits.mplot3d import Axes3D X = np.arange(-5, 5, 0.25) Y = np.arange(-5, 5, 0.25) X, Y = np.meshgrid(X, Y) R = np.sqrt(X**2 + Y**2) Z = np.sin(R) fig = plt.figure() ax = Axes3D(fig) ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.viridis) plt.show() 动手试试最后，我们来尝试回执一个二次函数图像，可以参考下面代码： 示例代码：/my.py 123456import matplotlib.pyplot as pltimport numpy as npx = np.arange(-10,11)y = x**2plt.plot(x,y)plt.show(); 搭配 TensorFlow (可选)TensorFlow是一个采用数据流图，用于数值计算的开源软件库。他灵活的架构让你可以在多平台上展开计算，例如台式计算机中一个或多个CPU(或GPU),服务器，移动设备等等。 TensorFlow 最初由 Google 大脑小组的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。 安装 TensorFlow我们使用 pip 安装相关依赖及 Tensorflow 12pip install protobufpip install tensorflow 测试 TensorFlow关于 TensorFlow 的使用请移步其官网，这里只是测试其在 Jupiter 中是否可用。 打开 tensorflow.ipynb 编辑界面。 在 Cell 中加入以下代码（整理自官网 MNIST 教程）： 示例代码：/tensorflow.py123456789101112131415161718192021222324252627282930from tensorflow.examples.tutorials.mnist import input_dataimport tensorflow as tf# The MNIST Datamnist = input_data.read_data_sets("MNIST_data/", one_hot=True)# Regressionx = tf.placeholder(tf.float32, [None, 784])W = tf.Variable(tf.zeros([784, 10]))b = tf.Variable(tf.zeros([10]))y = tf.nn.softmax(tf.matmul(x, W) + b)# Trainingy_ = tf.placeholder(tf.float32, [None, 10])cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))train_step = tf.train.GradientDescentOptimizer(0.05).minimize(cross_entropy)sess = tf.InteractiveSession()tf.global_variables_initializer().run()for _ in range(1000): batch_xs, batch_ys = mnist.train.next_batch(100) sess.run(train_step, feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)# Evaluatingcorrect_prediction = tf.equal(tf.argmax(y,1), tf.argmax(y_,1))accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))print(sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;)) 按下 Shift + Enter，学习过程结束后可以看到输出了准确率（92% 左右）。 完成我们已经成功搭建起了一个 Jupyter Notebook 环境。 参考链接CentOS7使用firewalld打开关闭防火墙与端口 http://matplotlib.org/ https://www.liaoxuefeng.com/]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Jupyter</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 Nginx 静态网站]]></title>
    <url>%2F2017%2F10%2F23%2F%E6%90%AD%E5%BB%BA-Nginx-%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%2F</url>
    <content type="text"><![CDATA[安装 Nginx搭建静态网站，首先需要部署环境。下面的步骤，江告诉大家如何在服务器上通过 Nginx 部署 HTTP 静态服务。 在 CentOS 上，可直接使用 yum 来安装 Nginx 1yum install nginx -y 安装完成后，使用 nginx 命令启动 Nginx 1nginx 此时，访问 http://127.0.0.1 可以看到 Nginx 的测试页面 配置静态服务器访问路径外网用户访问服务器的 Web 服务由 Nginx 提供， Nginx 需要配置静态资源的路径才能通过 url 正确访问到服务器上的静态资源。 打开 Nginx 默认配置文件 /etc/nginx/nginx.conf，修改 Nginx 配置，将默认的 root /usr/share/nginx/html; 修改为: root /data/www;，如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950user nginx;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid;include /usr/share/nginx/modules/*.conf;events &#123; worker_connections 1024;&#125;http &#123; log_format main '$remote_addr - $remote_user [$time_local] "$request" ' '$status $body_bytes_sent "$http_referer" ' '"$http_user_agent" "$http_x_forwarded_for"'; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; include /etc/nginx/conf.d/*.conf; server &#123; listen 80 default_server; listen [::]:80 default_server; server_name _; root /data/www; include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125; &#125;&#125; 配置文件将 /data/www/static 作为所有静态资源请求的根路径，如访问: http://127.0.0.1/index.js，将会去 /data/www/static/ 目录下去查找 index.js。现在我们需要重启 Nginx 让新的配置生效： 1nginx -s reload 创建第一个静态文件 在 /data/www 目录下创建我们第一个静态文件 index.html 1touch /data/www/index.html 内容如下 12345678910&lt;!DOCTYPE html&gt;&lt;html lang="zh"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;title&gt;第一个静态文件&lt;/title&gt;&lt;/head&gt;&lt;body&gt;Hello world！&lt;/body&gt;&lt;/html&gt; 现在访问 http://127.0.0.1/index.html 应该可以看到页面输出 Hello world! 到此，一个基于 Nginx 的静态服务器就搭建完成了，现在所有放在 /data/www 目录下的的静态资源都可以直接通过域名访问。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 系统常用命令]]></title>
    <url>%2F2017%2F10%2F20%2FLinux-%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[命令格式命令格式： 命令 [-选项] [参数]例： ls -la /etc说明 个别命令使用不遵循此格式 当有多个选项时，可以写在一起 简化选项与完整选项 -a 等于 –all 文件处理命令目录处理命令ls 查看目录英文原意：list命令所在路径：/bin/ls执行权限： 所有用户功能描述：显示目录文件语法： ls [-ald] [文件或目录] -a 显示所有的文件，包括隐藏文件，隐藏文件以.开头 -l 详细信息显示 -d 查看目录属性 -h 人性化选项，可以显示 -i 查询文件的 i 节点，可以理解为文件的ID或者索引号码文件属性主要包含7个方面的内容：[权限][索引[ 所有者][用户组][\文件大小][最后修改时间][名称],权限描述Linux 将文件的访问属性分为三类，所有者(u)、所属组(g)、其他人(o)。-rw-r–r– 第一个字符 - 代表文件类型 （- 二进制文件 d 目录 l 软连接文件） rw- r– r– rw- 代表 u 所有者的权限 r– 代表 g 用户组的权限 r– 代表 o 其他用户的权限r 代表具有读权限 w 代表具有写权限 x代表具有执行的权限（命令和脚本有意义） mkdir 目录创建命令英文原意： make directories所在路径：/bin/mkdir执行权限：所有用户语法 ： mkdir [-p] [目录名称] -p 递归创建 -m 或 –mode 建立目录同时设置目录权限12345mkdir -p /tmp/china/quzheng# 可以使用 mkdir 一次创建多个文件mkdir /tmp/china/quzheng / /tmp/china/quzheng2 # 创建目录，所有者有读、写和执行权限，其他人无权访问mkdir -p-m 700 /tmp/quzheng cd 移动目录英文原意： change directory执行权限：所有用户123456789101112#进入用户主目录；cd #进入用户主目录；cd ~ #返回进入此目录之前所在的目录； cd - #返回上级目录（若当前目录为“/“，则执行完后还在“/"；".."为上级目录的意思）；cd .. #返回上两级目录；cd ../.. # 把上个命令的参数作为cd参数使用。cd !$ pwd 显示当前目录英文原意： print working directory命令所在路径：/bin/执行权限：所有用户1pwd rmdir 删除空目录英文原意： remove empty directory命令所在路径：/bin/执行权限：所有用户1rmdir /tmp/quzheng cp 复制文件或目录英文原意： copy命令所在路径：/bin/语法：cp -rp [原文件或目录] [目标目录] -r 复制目录 -p 保留文件属性12345678#复制目录cp -r /tmp/quzheng /bin/#复制文件cp /etc/grub.conf /tmp#同时复制多个文件cp /root/install.log /root/install.log.syslog /tmp#复制同时修改名称cp /tmp/quzheng mv 剪切文件改名英文原意： move命令所在路径：/bin/语法： mv [源文件或目录] [目标目录]12345mv /tmp/quzheng /root# 剪切改名mv /tmp/quzheng /root/quzheng2# 当前目录改名mv /tmp/quzheng /tmp/quzheng3 rm 删除文件和目录英文原意： remove命令所在路径：/bin/语法： rm -rf [文件或目录] -r 删除目录 -f 强制删除1234# 删除文件rm /tmp/confg.conf# 删除目录rm -rf /tmp/quzheng2 文件处理命令touch 创建文件命令命令所在路径：/bin/ 语法： touch [文件名] 功能：有两个功能：一是用于把已存在文件的时间标签更新为系统当前的时间（默认方式），它们的数据将原封不动地保留下来；二是用来创建新的空文件 12#在当前目录下面创建一个quzheng的文件名touch quzheng 如果想创建文件需要有空格的时候，必须使用双引号将文件引起来，在 Linux 里面除了代表根分区的 / 其他的符号都可以作为文件名 cat 查看文件内容命令所在路径：/bin/ 语法：cat [文件名][-nbs] -n或-number：有1开始对所有输出的行数编号 -b或–number-nonblank：和-n相似，只不过对于空白行不编号； -s或–squeeze-blank：当遇到有连续两行以上的空白行，就代换为一行的空白行； 1cat quzheng tac 倒序显示文件内容命令所在路径：/bin/ 语法：cat [文件名][-nbs] 1tac quzheng more 分页显示文件内容命令所在路径: /bin 语法：more [文件名] f 或(空格) 翻页 Enter 换行 q 或者 exit 退出 1more /etc/services less 分页显示文件内容（可向上翻页）命令所在路径： /usr/bin 语法： less [文件名] f 或(空格) 翻页 Enter 换行 q 或者 exit 退出 PgUp 上翻页 上箭头 向上一行 /关键字 查找 如果当前内容没有刻意点击 n 1less /etc/services head 显示文件前几行命令所在路径：/usr/ 语法： head [-n] [文件名] -n 制定前多少行，默认前10行 1head -n 20 /etc/servies tail 显示文件末尾的几行命令所在路径：/usr/ 语法： tail [-nf] [文件名] -n 显示最后多少行，默认后10行 f 动态显示新增加的内容 链接命令ln 生成连接文件英文原意： link 命令所在路径：/bin/ 语法： ln -s\ [源文件][目标文件] -s 创建软链接 软连接的特征：类似Windows 的快捷方式 权限：lrwxrwxrwx l 代表软链接 文件比较小 /tmp/issu.soft-&gt;/etc/issue 硬链接的特征： 复制cp - p + 同步更新 源文件删除，硬链接还可以访问 通过 i 节点识别 不能跨分区 不能针对目录使用 文件权限chmod 权限管理命令英文原意： change the permissions mode of a file 命令所在路名: /bin 语法： chmod [{ugoa} {+-=} {rwx},] [文件或目录] [mode=421] [文件或目录] -R 地递归修改 权限的数字表示 -r —-4 -w —2 -x —1 12chmod u+x,g+w /tmp/issue.bakchmod 572 /tmp/issue.bak 权限 含义 文件 目录 r 读权限 可以查看文件内容 可以列出目录中的内容 w 写权限 可以修改文件 可以在目录中创建、删除文件 x 执行权限 可以执行文件 目录执行 只有文件的创建者和管理员可以改变文件的权限 chown 改变文件或目录的所有者命令所在路径： /bin 英文原意： change file ownership 语法： chown [用户][文件或目录] 1chown quzheng /tmp/issue.bak 只有管理员 root 可以操作该命令 chgrp 改变文件或目录的所属组英文原意： 命令所在路径：/bin 语法： charp [用户组] [文件或目录] 1chgrp dotnet /tmp/issue.bak 一个用户可以属于多个组，缺省组是他自己的名字 umask 显示、设置文件的缺省权限umask [-S][权限值] -S 以rwx 形式显示新建文件缺省权限 123456# 已 umask -S# 已掩码的形式显示权限，022,777-022 = 755umask# 设置文件或文件夹的默认权限umask 023 缺省创建文件是不具有可执行权限的 文件搜索命令find 文件搜索命令命令所在路径 :/bin 语法 : find [搜索范围] [匹配条件] 1234567891011121314151617181920212223242526272829# 在目录/etc 中查找文件 initfind /etc -name init# 在目录/etc 中查找 包含 init 的文件# * 匹配任意字符 ？ 匹配单个字符find /etc -name *init*# 不区分大小写 -inamefind /etc -iname init# 根据文件大小来查找 -size [+-=] 数据块大小 # linux 数据块大小是 512 字节find /etc -size +1024find /etc -size -1024# -user 所有者find /etc -usr quzheng# -group 所属组find /etc -group quzheng# 根据时间访问# -amin 访问时间 [+-=] 时间# -cmin 文件属性 change [+-=] 时间# -mmin 文件内容 modify [+-=] 时间find /etc -cmin -5## -a 表示 and 两个条件都满足## -o 表示 or 任意满足一个find /etc -size +163840 -a -size -204800find /etc -size +163840 -0 -size -204800## -exec/-ok 对搜索结果执行操作find /etc -name inittab -exec ls -l &#123;&#125; \;## -type 根据文件类型查找 f:文件 d:目录 l：软连接find /etc -type f ## -inum 根据 i 节点查找 locate 文件搜索命令命令所在路径：/usr/bin 语法：locate 文件名 [-i] -i 搜索文件的时候不考虑大小写 在文件资料库搜索文件，优点就是快速，缺点是有可能没有收录到资料库。 tmp文件夹里面的文件是找不到的 123locate quzheng#升级资料库updatedb which 文件命令所在目录命令所在路径：/usr/bin 语法：which 命令 1which ls whereis 文件命令所在目录及帮助文档路径命令所在路径：/usr/bin 语法：whereis 命令 1whereis ls grep 在文件中搜索字符匹配的行并输出命令所在路径：/usr/bin 语法：grep [-i-v] [关键词] [文件] -i 不区分大小写 -v 排除制定字符串 123grep multiuser /etc/inittabgrep -v ^# /etc/inittab 帮助命令man 获取命令的帮助信息英文原意： manual 所在路径：/usr/bin/man 语法： man [命令或配置文件] 1234man ls man servicesman passwdman 5 passwd 帮助文件 1 代表命令 5是配置文件 whatis 得到命令的基本信息语法 whatis [命令] apropos 得到配置文件的简短信息语法 apropos [配置文件] –help 查看命令的参数命令 –help info 获取命令的帮助help 获得Shell内置命令帮助用户管理命令useradd 添加新用户命令所在路径 : /usr/sbin/ 语法: useradd 用户名 1useradd quzheng passwd 设置用户密码命令所在路径 ：/usr/bin 语法： passwd 用户名 12passwd quzheng#输入两次密码 密码复杂度，大小写字母+数字，普通用户只能改自己的密码，管理员可以该所有人的密码 who 查看登录用户信息语法：who 123456who##结果用户名 登录终端 登录时间root tty1 2017-10-27 19:06root pts/1 2017-10-28 09:26 (192.168.111.1)# tty 本地终端 pts 远程终端 w 查看详细的登录用户信息语法：w 12345678910w# 系统运行时间 用户数 负载均衡CPU 1 2 510:23:53 up 2 days, 2:46, 2 users, load average: 0.00, 0.01, 0.05 空闲时间 上一次执行的命令USER TTY FROM LOGIN@ IDLE JCPU PCPU WHATroot tty1 五19 15:17m 0.08s 0.08s -bashroot pts/1 192.168.111.1 09:26 1.00s 1.51s 0.42s w[root@localhost ~]# uptime 10:24:18 up 2 days, 2:47, 2 users, load average: 0.00, 0.01, 0.05 压缩解压命令压缩格式 ​ gzip gunzip 压缩解压命令语法： 12345gzip 文件名 # 压缩gzip -d 解压文件名 #gunzip 解压文件名 gzip 压缩和解压缩都不保留源文件 tar 打包压缩命令语法：tar [-cxtzjvfpPN] 压缩后的文件名 -c 打包 -v 显示详细信息 -x ：解开一个压缩文件的参数指令 -f 指定文件名 -z 打包同时gzip压缩 -j 打包同时以 bzip2 的格式压缩 12345tar -cvf /tmp/etc.tar /etc #仅打包，不压缩！tar -zcvf /tmp/etc.tar.gz /etc #打包后，以 gzip 压缩tar -jcvf /tmp/etc.tar.bz2 /etc #打包后，以 bzip2 压缩tar -zxvf /tmp/etc.tar.gz /etc #解压缩 .tar.gztar -jxvf /tmp/etc.tar.bz2 /etc zip unzip 压缩文件或目录语法： zip 选项[-r] [压缩后的文件名] [文件或目录] -r 压缩目录 12zip quzheng.zip quzheng # 压缩文件zip quzheng2.zip /quzheng2 # 压缩目录 bzip2 bunzip2 压缩解压缩语法: bzip2 -k [压缩后的文件名] [压缩文件名] -k 产生压缩文件后保留原文件 12bzip2 -k boduo.bz2 boduobunzip -k boduo.bz2 网络命令write 给用户发信息，以 Ctrl+D 保存结束语法： write [用户名] 进入输入模式后退格 Ctrl + Backspace Ctrl+D 发送信息 Wall 给所有用户发送信息语法： wall [信息] ping 测试网络连通性语法: ping 选项 IP地址 ifconfig 查看本机网络mail 查看发送电子邮件语法： mail [用户名] Last 查看用户登录重启的日志LastLog 查看用户最后一次登录信息语法 : lastlog -u 12lastlog -u uidlastlog traceroute 显示数据包到主机的路径语法：traceroute 域名 netstat 显示网络相关信息语法 netstat 选项 -t : tcp 协议 -u: upd协议 -l：监听 -r: 路由 -n: 显示IP地址和端口号 123netstat -tuln # 查看本机监听的端口netstat -an # 查看本机所有的网络连接netstat-rn # 查看本机路由表 setup 工具包 该命令在其他版本的Linux 系统不存在，只有 ReaHat 系列的系统有 CentOS 7 已经没有了对网络的配置功能了 关机重启命令shutdown 命令语法： shutdown [选项] 时间 -c 取消 -h 关机 -r 重启 123456# 现在重启shutdown -r now# 现在关机shutdown -h now# 指定时间whutdown -h 20:30 其他关机命令haltpoweroffinit 0重启命令rebootinit 6系统运行级别系统运行级别代表系统启动时可以进入的系统级别 0 关机 1 单用户 2 不完全多用户，不含NFS服务 3 完全多用户 4 未分配 5 图形界面 6 重启 1234# 查看修改系统默认运行级别cat etc/inittab#查询系统运行级别runlevel logout 退出登录命令 相当于锁屏 ####]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux系统注意事项]]></title>
    <url>%2F2017%2F10%2F20%2FLinux-%E7%B3%BB%E7%BB%9F%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[注意事项Linux 严格区分大小写Linux 系统严格区分大小写，文件名称 、目录名称、Shell 命令的参数 都是严格区分大小写的。Linux 的 Shell 命令都是小写的。 Linux 系统中所有的内容都是已文件的形式保存的，包括硬件保存硬件的文件夹/dev/ 硬盘文件是 /dev/sd[a-p] 光盘文件是 /dev/sr0 等 Linux 不靠扩展名区分文件类型Linux 系统本身不依靠扩展名来区分文件，但是最好还是讲需要的文件进行扩展名命名。 压缩包：“*.gz”、”*.bz2”、”*.tar.bz2”、”*.tgz” 二进制软件包：”*.rpm” 网页文件：”*.html”、”*.php” 脚本文件：”*.sh” 配置文件：”*.conf” 挂载Linux 所有的存储设备都必须挂载之后用户才能使用，包括硬盘、U盘和光盘 Windows程序Windows 的程序不能直接在 Linux 中的安装和运行, 但是可以在 Linux 系统上安装 Windows 模拟器进行安装使用。但是模拟器不是所有的程序都能运行，也不稳定。 服务器的管理和维护建议Linux 各目录的作用 目录名 目录作用 /bin/ 存放系统命令的目录，普通用户和超级用户都可以执行。不过放在/bin下的命令在单用户模式下也可以执行 /sbin/ 保存和系统环境设置相关的命令，只有超级用户可以使用这些命令进行系统环境设置，但是有些命令可以允许普通用户查看 /usr/bin/ 存放系统命令的目录，普通用户和超级用户都可以执行，这些命令和系统启动无关。在单用户模式下不能执行。 /usr/sbin/ 存放根文件系统不必要的系统命令，例如多数的服务器程序。只有超级用户可以使用。大家其实可以注意到 Linux 的系统，在所有 sbin 目录中保存的命令只有超级用户可以使用， bin 目录中保存的命令所有用户都可以使用。 /boot/ 系统启动目录，保存系统启动相关的目录，如内核文件和启动引导程序(grup) /dev/ 设备文件保存位置。这个目录用来存放所有硬件设备文件 /etc/ 配置文件保存位置。系统内所有采用默认安装方式(rpm 安装) 的服务的配置文件全部都保存在这个目录中，如用户账户和密码，服务的启动脚本，常用服务的配置文件等。 /home/ 普通用户的家目录。建立每个用户时，每个用户要有一个默认登录位置，这个位置就是这个用户的家（宿主）目录，所有的普通用户的家目录就是在 /home 下建立一个和用户名相同的目录。如用户 user1 的家目录就是 /home/user1 ，只有管理员的目录是一级目录 /root/ /lib/ 系统调用的函数库保存位置。 /lost+found/ 当系统意外崩溃或机器意外关机，而产生一些文件碎片放在这里。当系统启动的过程中 fsck 工具会检查这里，并修复已经损坏的文件系统。这个目录只在每个分区中出现，例如/lost+found 就是根分区的备份恢复目录， /boot/lost+found 就是 /boot 分区的备份恢复目录。 /media/ 挂载目录。系统建议是用来挂载媒体设备的。例如软盘和光盘 /mnt/ ls挂载目录，早期 Linux 中只有这一个挂载目录，并没有细分。现在这个目录系统建议挂载额外设备，如U盘，移动硬盘和其他操作系统的分区。 /misc/ 挂载目录。系统建议用来挂载 NFS 服务的共享目录。只要是一个已经建立的空目录就可以作为挂载点。那么系统虽然准备了桑格挂载目录，但是到底在哪个目录中挂载什么设备可以又管理员自己决定。 /opt/ 第三方安装软件保存位置。这个目录就是防止和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。还有一个常用的软件安装目录 /usr/local/ /proc/ 虚拟文件系统，该目录中的数据不保存在硬盘当中，而是保存在内存当中。主要保存系统的内核，进程，外部设备状态和网络状态灯。如 /proc/cpuinfo 是保存 CPU 信息的，proc/devices 是保存设备驱动的列表， /proc/filesystems 是保存文件系统列表的，/proc/net 是保存网络协议信息的。 /sys/ 虚拟文件系统。和/proc目录相似，都是保存在内存当中的，主要保存内核相关信息。 /root/ 超级用户的家目录/src /srv/ 服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据。 /tmp/ 临时目录。系统存放临时目录的，该目录下所有的用户都可以访问和写入。建议在此目录中不要保存重要数据，最好每次开机都把该目录清空 /usr/ 系统软件资源目录。usr 不是 user 的缩写，而是 Unix Software Resource 的缩写，所以不是存放用户数据，而是存放系统软件资源的目录。系统中安装软件大多保存在这里。 /var 动态数据目录，主要保存缓存、日志以及软件运行所产生的文件。 服务器的注意事项 远程服务器不允许关机，只能重启 重启时应该关闭服务 不要再服务器访问高峰运行高负载命令 远程配置防火墙时，不要把自己踢出服务器 制定合理的密码规范并定期更新 合理分配权限 定期备份重要数据和日志，备份的原则不要把鸡蛋放在同一个篮子里]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 Docker 环境]]></title>
    <url>%2F2017%2F10%2F19%2F%E6%90%AD%E5%BB%BA-Docker-%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装配置Docker安装DockerDocker 软件包已经包括在默认的 CentOS-Extras 软件源里。因此想要安装 docker，只需要运行下面的 yum 命令： 1yum install docker-io -y 使用 yum 命令安装完成后可以查看版本 1docker -v 设置开机启动 1chkconfig docker on 配置 Docker因为国内访问 Docker Hub 较慢，可以使用腾讯云提供的国内镜像源，加速访问 Docker Hub 依次执行以下命令 1echo "OPTIONS='--registry-mirror=https://mirror.ccs.tencentyun.com'" &gt;&gt; /etc/sysconfig/docker 1systemctl daemon-reload 1service docker restart Docker 简单操作下载镜像下载一个官方的 CentOS 镜像到本地 1docker pull centos 下载好的镜像就会出现在镜像列表里 1docker images 运行容器知识我们可以在刚才下载的 CentOS 镜像生成的容器内操作了。 生成一个 centos 进项为模板的内容并使用 bashshell 1docker run -it centos /bin/bash 这个时候可以看到命令行的前端已经变成了 [root@(一串 hash Id)] 的形式, 这说明我们已经成功进入了 CentOS 容器。 在容器内执行任意命令, 不会影响到宿主机, 如下 1mkdir -p /data/simple_docker 可以看到 /data 目录下已经创建成功了 simple_docker 文件夹 1ls /data 退出容器 1exit 查看宿主机的 /data 目录, 并没有 simple_docker 文件夹, 说明容器内的操作不会影响到宿主机 1ls /data 保存容器查看所有容器信息，能狗获取容器的 id 1docker ps =a 然后执行如下命令，保存镜像 1docker commit -m="备注" 你的CONTAINER_ID 你的IMAGE]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 操作系统安装]]></title>
    <url>%2F2017%2F10%2F17%2FLinux-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[本文主要介绍基于 VMware Workstations Pro 安装 CentOS 7 系统的介绍，并简单介绍 Linux 文件格式和远程连接 VMware 虚拟机的安装与使用下载VMware下载传送门 下载完毕后就可以对软件进行安装了，安装过程比较简单就不介绍了。 虚拟机快照VMware 可以给虚拟机创建快照，恢复快照将系统恢复到快照时的状态 虚拟机克隆如果需要多个操作系统，可以使用克隆命令。 克隆有两种：链接克隆和完全克隆。 链接克隆创建被克隆机器的镜像。如果原始机删除克隆机无法使用。但是占用资源较少。 VMware文档 CentOS安装下载CentOS从CentOs的官方网站下载CentOS 使用VMware将ISO挂在到虚拟光驱打开VMware Workstation 的虚拟机设置对话框，选择CD/DVD,使用 ISO 映像文件(M): 点击浏览按钮，选中刚才下载的 ISO 文件 打开电源开始安装安装过程比较简单，注意选择安装内容的时候不要使用最小安装，使用基本安装。 设置密码，安装系统密码原则复杂性 八位字符以上，大小写字符、数字、符号 不能是英文单词 不能是和用户相关的内容 易记忆性 时效性 设置网络默认安装完毕后，登录系统是不能上网的，CentOS默认不启动网卡，需要手动启动 123456789101112 cd /etc/sysconfig/network-scripts/ ls 查看一下ifcfg-eno后面对应的数字是什么，以ens33为例 #切换到root用户下， vi ifcfg-ens33 #编辑该文件 IPADDR=192.168.x.xx（添加ip地址）NETWORK=255.255.255.0（添加默认网关）GETWAY=192.168.x.x（添加网关地址）UUID=04c1f501-d0af-41c4-b1b0-fc0f56c5edc7ONBOOT=yes （由not改成yes） #即开启自动启用网络连接 :wq 保存退出 系统分区分区类型 主分区：最多只能有4个 扩展分区：扩展分区只能有一个，主分区加扩展分区最多有4个，用途就是存放逻辑分区定义，扩展分区不能存放数据。 逻辑分区：存放文件 格式化格式化（高级格式化）又称逻辑格式化，它是指根据用户选定的文件系统（如FAT16、FAT32、NTFS、EXT2、EXT3、EXT4等），在磁盘的特定区域存放特定的数据，在分区中划出一片用于存放文件分配表、目录表等用于文件管理的磁盘空间 硬件设备文件名 硬件 设备文件名 IDE硬盘 /dev/hd[a-d] SCSI/SATA/USB硬盘 /dev/sd[a-p] 光驱 /dev/cdrom或者/dev/sr0 软驱 dev/fd[0-1] 打印机(25针) /dev/lp[0-2] 打印机（ＵＳＢ） dev/usb/lp[0-15] 鼠标 /dev/mouse 分区设备文件名IDE:133MB/s SCSI:200MB/s SATA:500MB/s 设备文件名 /dev/had1(IDE) /dev/dev/sda1(SCSI\STAT) 挂载给每一个分区分配挂载点，分区的设备必须挂载了以后才能使用。 / (根分区) swap 分区 （交换分区，内存2倍，不超过2GB） 推荐分区 /boot (启动分区，200MB) 文件系统结构 /分区 ​/boot /etc passwd shadow group /home Linux 系统每一个文件夹都可以制定一个硬盘分区 远程登录管理管理工具SecureCRT Linux的常用远程管理工具 Winscp 文件拷贝工具 VNC 图形界面远程管理Linux SecureCRT 远程登录打开 SecureCRT 点击快速连接 输入主机名和用户名点击链接，在弹出的密码窗口中输入用户密码 乱码问题解决由于我们安装的 Linux 是中文语言的，所以远程的时候可能会出现乱码的情况 使用查看分区的命令来测试是否能显示中文 1df 如果显示乱码就需要对 SecureCRT 进行配置 选项 -&gt; 会话选项 ，调整外观中的字符编码和字体。 字体需要设置成支持中文的字体，字符编码需要设置成 GB2312，字符编码需要设置成 UFT-8]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 系统简介]]></title>
    <url>%2F2017%2F10%2F17%2FLinux-%E7%B3%BB%E7%BB%9F%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[UNIX 和 LINUX的发展历史UNIX 发展历史 1965 MIT、GE、AT&amp;T联合开发 Multics 工程计划，其目标是开发一种交互式的具有多道程序处理能力的分时操作系统，但因 Multics 追求的目标过于庞大复杂，项目进度远远落后与计划，最后贝尔实验室退出。 1969年，美国贝尔实验室的肯·汤普森在DEC PDP-7机器上开发出了UNIX系统。 1971年，肯·汤普森的同事丹尼斯·里奇发明了C语言，1973年，UNIX系统的绝大部分源代码用C语言重写，这为提高UNIX系统的可移植性打下基础。 UNIX 发型版本 操作系统 公司 硬件平台 AIX IBM PowerPC HP-UX HP PA-RISC Solaris Sun SPARC Linux Red Hat Linux、Ubuntu Linux…… IA(Intel、ADM、Cyrix、RISE) BSD 伯克利大学 LINUX 发展史Linux系统诞生与1991年，由芬兰大学生李纳斯(Linus Torvalds)和后来陆续加入的众多爱好者共同开发完成。 Linux是开源软件，源代码开放的UNIX。 LINUX 内核版本Linux 内核官网： www.kernel.org 内核版本说明：[主版本].[此版本].[末版本] 2.6.18 kernel源代码标记：mainline 、longterm、stable、linux-next、snapsho mainline：指由Linus Torvalds亲自制作的内核发布版，是官方当前最新版本的kernel source。在Torvalds对所有其他程序员所做出的重大变化进行整合，并且对先前版本的bug进行几轮修复之后，大约每十周正式发布一个新版本。mainline事实上代表着一个linux kernel分支，这个分支有另一个名称，叫做vanilla。 longterm：Long Term Support的缩写，长期维护的意思 stable ： 稳定版 linux-next、snapshot ：linux-next和snapshot，都是代码提交周期结束之前生成的快照 用于给Linux代码贡献者们做测试。 LINUX 发行版Linux 主要的发行版主要有两个系列 redhat 系列和 debian 系列,这两个操作系统使用的命令都差不多，但是安装软件的命令不太一样。 redhat readhat CentOS SuSE fedora 红旗Linux turbolinux gentoo linux Mandriva debian debian ubuntu KNOPPIX 详细的发行版信息参考http://futurist.se/gldt/) 开源软件简介###Linux上的开软软件列表 Linux上的服务器开源软件比WINODWS丰富，Windows服务器的个人软件更加丰富。 Apache Nginx MySQL php samba mongoDB python Ruby Sphinx 开源软件开源软件是指在软件发行的时候，附上软件的源代码，并授权允许用户更改/自由再散布/衍生著作，开源并不抵制商业收费。 主要的特点 使用的自由：绝大多数的开源软件免费 研究的自由：可以获得软件源代码 散布及改良的自由：可以自由传播、改良甚至销售 自由软件自由软件是一项思想运动，强调用户拥有如何使用软件的自由 可以自由地运行； 可以自由地拷贝； 可以自由地修改； 可以自由地再发行。 这里指的自由，并不是价格免费，这和价格无关而是使用软件对所有的用户来说是自由的。（英语中FREE有自由和免费的意思，比如自由的话语权，免费的夜宵）。 免费软件免费软件就是免费提供给用户使用的软件，但是其免费的时候，通常都会有其他的限制，比如其源码不一定会公开，而且使用者也并没有使用、复制、研究、修改和再散布的权利。 支撑互联网的开源技术LAMP : Linux 、Apache、MySQL、PHP LNMP : Linux、Nginx、MySQL、PHP Linux 应用领域基于Linux的企业服务器和网站服务器通过扫描网站：netcraft.com，可以扫描网站使用的服务器类型。国内大型的网站都使用Linux 全球前500的计算服务器基本上也都使用的Linux服务器：www.top500.org 嵌入式应用 手机 、平板电脑（Android） 智能电视（Android） 小米盒子、乐视盒子（Android） 航空系统、银行系统、卡拉OK点歌系统 智能汽车 Linux 学习方法为什么使用命令行WINDOWS主要是图形界面，Linux早期都是用于服务器操作系统的。所以基本上都是使用命令控制的，图形界面是占用资源的。 解决问题的智慧 帮助 文档 示例 查找 英文提示的困惑Command not found No Such file or directory Linux 学习方法 计划 专注 坚持 练习]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 搭建个人网盘]]></title>
    <url>%2F2017%2F10%2F17%2F%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%9B%98%2F</url>
    <content type="text"><![CDATA[转载自：腾讯云实验室 准备域名域名注册安装 Seafile安装依赖环境使用 yum 安装 Python 及 MySQL : 1yum install python python-setuptools python-imaging python-ldap python-memcached MySQL-python mariadb mariadb-server 启动 MariaDB 服务： 12sudo systemctl start mariadb.servicesudo systemctl enable mariadb.service 配置 MySQL: 1/usr/bin/mysql_secure_installation 配置过程输入参数如截图所示，其中 New password 和 Re-enter new password 字段都设置为 Zk7Ggm9g，其他字段一路回车使用默认值： 安装 Seafile下载 Seafile 安装包 1wget https://mc.qcloudimg.com/static/archive/3d8addbe52be88df4f6139ec7e35b453/seafile-server_5.1.4_x86-64.tar.gz 解压 Seafile 安装包 1tar -zxvf seafile-server_5.1.4_x86-64.tar.gz 安装 Seafile 安装包： 12345sudo mkdir -p /opt/seafile/installedsudo mv seafile-server_5.1.4_x86-64.tar.gz /opt/seafile/installedsudo mv seafile-server-5.1.4/ /opt/seafilecd /opt/seafile/seafile-server-5.1.4sudo ./setup-seafile-mysql.sh 执行过程输入参数如截图所示，[server name]字段输入 Seafile，[ This server&#39;s ip or domain ] 字段输入教程第一步申请的域名，[ 1 or 2 ] 字段选择 1，mysql 的 [ root password ] 字段输入 Zk7Ggm9g，其他字段一路回车使用默认值： 启动 Seafile 及修改防火墙规则启动 seafile12sudo ./seafile.sh startsudo ./seahub.sh start 执行过程输入参数如截图所示，其中 [ admin email ] 设置为您登录网盘的帐号，如 admin@qcloudlab.wang，[ admin password ]和 [ admin password again ] 设置为登录网盘的密码，如 admin_Zk7Ggm9g： 修改防火墙规则123sudo firewall-cmd --zone=public --permanent --add-port=8082/tcpsudo firewall-cmd --zone=public --permanent --add-port=8000/tcpsudo firewall-cmd --reload 大功告成恭喜，您的 Seafile 已经部署完成，您现在拥有专属的网盘了，登录的帐号密码为您启动 Seafile 步骤中设置的邮箱和密码。 可以通过 Ip 访问网盘：http://119.29.148.246:8000 可以通过域名访问网盘：如 http://www.yourdomain.com:8000 ，其中 www.yourdomain.com 替换为您注册的域名]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Seafile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 搭建 FTP 文件服务]]></title>
    <url>%2F2017%2F10%2F17%2F%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-FTP-%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[安装并启动 FTP 服务安装 VSFTPD使用 yum 安装 vsftpd ： 1yum install vsftpd -y 启动 VSFTPD安装完成后，启动 FTP 服务 1service vsftpd start 启动后，可以看到系统已经监听了 21 端口 1netstat -nltp | grep 21 配置 FTP 权限目前 FTP 服务器允许匿名登录，也无法区分用户访问，我们需要配置 FTP 的访问权限 了解 VSFTP 配置vsftpd 的配置目录为 /etc/vsftpd，包含下列的配置文件： vsftpd.conf 为主要配置文件 ftpusers 配置禁止访问 FTP 服务器的用户列表 user_list 配置用户访问控制 阻止匿名访问和切换根目录匿名访问和切换根目录都会给服务器带来安全风险我们把这两个功能关闭。 编辑 /etc/vsftpd/vsftpd.conf ，找到下面两处配置 并修改： 12345# 禁用匿名用户anonymous_enable=NO# 禁止切换根目录chroot_local_user=YES 编辑完成后，按 Ctrl + S 保存配置，重新启动 FTP 服务，如： 1service vsftpd restart 创建 FTP 用户创建一个用户 ftpuser : 1useradd ftpuser 为用户 ftpuser 设置密码： 1echo "TestFtp1" | passwd ftpuser --stdin 限制该用户仅能通过 FTP 访问限制用户 ftpuser 只能通过 FTP 访问服务器，而不能直接登录服务器： 1usermod -s /sbin/nologin ftpuser 为用户分配主目录为用户 ftpuser 创建主目录并约定： /data/ftp 为主目录，该目录不可上传文件 /data/ftp/pub 文件只能上传到该目录下 1mkdir -p /data/ftp/pub 创建登录欢迎文件 1echo "Welcome to use FTP service." &gt; data/ftp/welcome.txt 设置文件访问权限 1chmod a-w /data/ftp &amp;&amp; chmod 777 -R /data/ftp/pub 设置用户的主目录： 1usermod -d /data/ftp ftpuser 准备域名和证书域名注册域名解析访问 FTP 服务根据个人的工作环境，选择一种方式来访问已经搭建的 FTP 服务 通过 Windows 资源管理器访问Windows 用户可以复制下面的内容 到资源管理器的地址栏访问： 1ftp://ftpuser:Password@&lt;您的FTPIP 地址&gt; 通过 FTP 客户端工具访问FTP 客户端工具众多，下面推荐两个常用的： WinSCP - Windows 下的 FTP 和 SFTP 连接客户端 FileZilla - 跨平台的 FTP 客户端，支持 Windows 和 Mac 下载和安装 FTP 客户端后，使用下面的凭据进行连接即可： [主机] 1FTP服务器IP地址 [用户名] 1ftpuser [密码] 1Password 如果能够正常连接，那么大功告成，您可以开始使用属于您自己的 FTP 服务器了！ 接下来，请上传任意一张图片到您的 FTP 服务器上的pub目录下，然后，就可以在 /data/ftp/pub 中看到了。 注意: 请不要直接上传文件到根目录下，您应该选择上传到 pub 目录下 如果您申请了域名，可以将链接中的 Ip 地址替换为对应的域名访问 FTP 服务 如果您申请了域名，可以将Ip 地址替换为对应的域名作为访问凭据]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>FTP</tag>
        <tag>CentOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 搭建 WorkPress 个人博客]]></title>
    <url>%2F2017%2F10%2F12%2F%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-WorkPress-%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[准备 LNMP 环境安装 Nginx使用 yum 安装 Nginx : 1yum install nginx -y 修改 /etc/nginx/conf.d/default.conf ，去除对 IPv6地址的监听，可参考下面的示例： 123456789101112131415161718192021server &#123; listen 80 default_server; # listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / &#123; &#125; error_page 404 /404.html; location = /40x.html &#123; &#125; error_page 500 502 503 504 /50x.html; location = /50x.html &#123; &#125;&#125; 修改完成后，启动 Nginx : 1nginx 此时，可访问外网 HTTP (http://127.0.0.1) 来确认是否已经安装成功 将 Nginx 加入开机自动启动： 1chkconfig nginx on 安装 MySQL使用 yum 安装 MySQL 1yum install mysql-server -y 启动 MySQL 1service mysqld restart 设置 MySQL 账户的密码 1/usr/bin/mysqladmin -u root password &apos;MyPas$word4Word_Press&apos; 将 MySQL 加入开机自动启动 1chkconfig mysqld on 安装PHP使用 yum 安装 PHP 1yum install php-fpm php-mysql -y 安装之后，启动 PHP-FPM 进程 1service php-fpm start 把 PHP-FPM 加入开机自动启动 1chkconfig php-fpm on 安装并配置 WordPress安装 WordPress配置好 LNMP 环境以后我们，继续使用 yum 来安装 WordPress: 1yum install wordpress-y 安装完成后，就可以在 /usr/share/wordpress 看到 WordPress 的源代码了 配置数据库进入 MySQL : 1mysql -uroot --password='MyPas$word4Word_Press' 为 WordPress 创建一个数据库: 1CREATE DATABASE WORDPRESS; MySQL 部分设置完了，我们退出 MySQL 环境： 1exit 把上述的 DB 配置同步到 WordPress 的配置文件中，可参考下面的配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&lt;?php/** * The base configuration for WordPress * * The wp-config.php creation script uses this file during the * installation. You don't have to use the web site, you can * copy this file to "wp-config.php" and fill in the values. * * This file contains the following configurations: * * * MySQL settings * * Secret keys * * Database table prefix * * ABSPATH * * @link https://codex.wordpress.org/Editing_wp-config.php * * @package WordPress */// ** MySQL settings - You can get this info from your web host ** ///** The name of the database for WordPress */define('DB_NAME', 'wordpress');/** MySQL database username */define('DB_USER', 'root');/** MySQL database password */define('DB_PASSWORD', 'MyPas$word4Word_Press');/** MySQL hostname */define('DB_HOST', 'localhost');/** Database Charset to use in creating database tables. */define('DB_CHARSET', 'utf8');/** The Database Collate type. Don't change this if in doubt. */define('DB_COLLATE', '');/**#@+ * Authentication Unique Keys and Salts. * * Change these to different unique phrases! * You can generate these using the &#123;@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service&#125; * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again. * * @since 2.6.0 */define('AUTH_KEY', 'put your unique phrase here');define('SECURE_AUTH_KEY', 'put your unique phrase here');define('LOGGED_IN_KEY', 'put your unique phrase here');define('NONCE_KEY', 'put your unique phrase here');define('AUTH_SALT', 'put your unique phrase here');define('SECURE_AUTH_SALT', 'put your unique phrase here');define('LOGGED_IN_SALT', 'put your unique phrase here');define('NONCE_SALT', 'put your unique phrase here');/**#@-*//** * WordPress Database Table prefix. * * You can have multiple installations in one database if you give each * a unique prefix. Only numbers, letters, and underscores please! */$table_prefix = 'wp_';/** * See http://make.wordpress.org/core/2013/10/25/the-definitive-guide-to-disabling-auto-updates-in-wordpress-3-7 *//* Disable all file change, as RPM base installation are read-only */define('DISALLOW_FILE_MODS', true);/* Disable automatic updater, in case you want to allow above FILE_MODS for plugins, themes, ... */define('AUTOMATIC_UPDATER_DISABLED', true);/* Core update is always disabled, WP_AUTO_UPDATE_CORE value is ignore *//** * For developers: WordPress debugging mode. * * Change this to true to enable the display of notices during development. * It is strongly recommended that plugin and theme developers use WP_DEBUG * in their development environments. * * For information on other constants that can be used for debugging, * visit the Codex. * * @link https://codex.wordpress.org/Debugging_in_WordPress */define('WP_DEBUG', false);/* That's all, stop editing! Happy blogging. *//** Absolute path to the WordPress directory. */if ( !defined('ABSPATH') ) define('ABSPATH', '/usr/share/wordpress');/** Sets up WordPress vars and included files. */require_once(ABSPATH . 'wp-settings.php'); 配置 NginxWordPress 已经安装完毕，我们配置 Nginx 把请求转发给 PHP-FPM 来处理： 首先，重命名默认的配置文件： 12cd /etc/nginx/conf.d/mv default.conf defaut.conf.bak 在 /etc/nginx/conf.d 创建 wordpress.conf 配置，参考下面的内容： 123456789101112131415server &#123; listen 80; root /usr/share/wordpress; location / &#123; index index.php index.html index.htm; try_files $uri $uri/ /index.php index.php; &#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 location ~ .php$ &#123; fastcgi_pass 127.0.0.1:9000; fastcgi_index index.php; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; include fastcgi_params; &#125;&#125; 配置后，通知 Nginx 进程重新加载： 1nginx -s reload 准备域名和解析域名注册域名解析大功告成]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WorkPress</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[基于 CentOS 搭建 Discuz 论坛]]></title>
    <url>%2F2017%2F10%2F12%2F%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-Discuz-%E8%AE%BA%E5%9D%9B%2F</url>
    <content type="text"><![CDATA[准备 LAMP 环境LAMP 是 Linux、Apache、MySQL 和 PHP 的缩写，是 Discuz 论坛系统以来的基础运行环境。我们先来搭建LAMP 环境 安装 MySQL使用 yum 安装 MySQL: 1yum install mysql-server -y 安装完成后，启用 MySQL 服务： 1service mysqld restart 可以设置自己的 MySQL 账户名和密码，参考下面的内容 1/usr/bin/mysqladmin -u root password 'Password' 将 MySQL 设置为开机自动启动 1chkconfig mysqld on 安装 Apache 组件使用 yum 安装 Apache 组件: 1yum install httpd -y 安装之后，启动 httpd 进程： 1service httpd start 把 httpd 也设置成开机自动启动 1chkconfig httpd on 安装PHP使用 yum 安装 PHP: 1yum install php php-fpm php-mysql -y 安装之后，启动 PHP-FPM 进程 ： 1service php-fpm start 启动之后，可以使用下面的命令查看 PHP-FPM 进程监听哪个端口 1netstat -nlpt | grep php-fpm 把 PHP-FPM 也设置成开机自动启动 1chkconfig php-fpm on 安装并配置Discuz安装 DiscuzCentOS 6 没有 Discuz 的 yum 源，所以我们需要下载一个 Discuz 压缩包： 1wget http://download.comsenz.com/DiscuzX/3.2/Discuz_X3.2_SC_UTF8.zip 下载完成后，解压这个安装包 1uzip Discuz_X3.2_SC_UTF8.zip 解压完后，就能再 upload 文件夹里看到 Discuz 的源代码了 配置 Discuz由于 PHP 默认访问 /var/www/html/ 文件夹，所以我们需要把 upload 文件夹里的文件豆腐知道 /var/www/html/ 文件夹 1mv -r upload/* /var/www/html/ 给 /var/www/html/ 目录及子目录赋予权限 1chmod -R 777 /var/www/html 重启 Apache 1service httpd restart 准备域名和证书域名注册如果你还没有域名，可以从阿里云注册域名。 域名解析购买完成后，需要进行域名机械。域名设置解析后需要过一段时间才会生效，通过 ping 命令检查域名是否生效 1ping www.yourdomain.com 如果 ping 命令返回的信息中包含你设置的 IP 地址，说明解析成功了。恭喜，您的 Discuz 论坛已经部署完成，您可以通过浏览器访问论坛查看效果。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Discuz</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux 基础入门]]></title>
    <url>%2F2017%2F10%2F09%2FLinux-%E5%9F%BA%E7%A1%80%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[目录操作创建目录使用 mkdir 命令创建目录 1mkdir $HOME/testFolder 切换目录使用 cd 命令切换目录 1cd $HOME/testFolder 使用 cd../ 命令切换到上一级目录 1cd ../ 移动目录使用 mv 命令移动目录 1mv $HOME/testFolder /var/tmp 删除目录使用 rm -rf 命令删除目录 1rm -rf /var/tmp/testFolder 查看目录下的文件1ls /etc 文件操作创建文件使用 touch 命令创建文件 1touch ~/testFile 复制文件使用 cp 命令复制文件 1cp ~/testFile ~/testNewFile 删除文件使用 rm 命令删除文件，输入 y后回车确认删除 1rm ~/testFile 查看文件内容使用 cat 命令查看 .bash_history 文件内容, bash_history 文件保存执行命令的历史记录 1cat ~/.bash_history 过滤，管道与重定向过滤过滤出 /etc/passwd 文件中包含 root 的记录 1grep 'root' /etc/passwd 递归过滤出 /var/log/ 目录中包含 lindex的记录 1grep -r 'linux' /var/log/ 管道简单来说，linux中的管道的作用是将上一个命令的输出作为下一个命令的输入，像 pipe 一样将各个命令串联起来执行，管道的操作符是 | 比如，我们可以将 cat 和 grep 两个命令用管道组合在一起 1cat /etc/passwd | grep 'root' 过滤出/etc目录中名字包含ssh的目录（不包括子目录) 1ls /etc | grep 'ssh' 重定向可以使用 &gt; 或者 &lt; 将命令的输出重定向到一个文件中 1echo &apos;Hello World&apos; &gt; ~/test.txt 常用的运维明令ping 命令对 cloud.tencent.com 发送 4 个 ping 包，检查与其是否联通 1ping -c 4 cloud.tencent.com netstat 命令netstat 命令用户显示各种网络相关信息，如网络连接、路由表、接口状态等等 列出所有处于监听状态的 tcp 端口 1netstat -lt 查看所有的端口信息，包括 PID 和进程名称 1netstat -tulpn ps 命令过滤得到当前系统中的 ssh 进程信息 1ps -aux | grep 'ssh']]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建 GIT 服务器教程]]></title>
    <url>%2F2017%2F10%2F09%2F%E6%90%AD%E5%BB%BA-GIT-%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[转载自腾讯云 开发者实验室 01 下载安装gitGit 是一款免费、开源的分布式版本控制系统，用户敏捷高效的进行版本管理。本次安装使用的服务器是CentOS7.0 x64的服务器操作系统 安装依赖库和编译工具为了后续安装正常进行，需要先安装一些相关依赖库和编译工具 安装依赖库 1yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel 安装编译工具 1yum install gcc perl_ExtUtils-MakeMaker 下载git选择一个目录，用来存放下载下来的安装包，这里讲安装包放在/user/local/src目录里 1cd /usr/local/src 到官网找一个新版稳定的源码包下载到/usr/local/src文件夹里 1wget https://www.kernel.org/pub/software/scm/git/git-2.10.0.tar.gz 解压和编译解压下载的源码包 1tar -zvxf git-2.10.0.tar.gz 解压后进入git-2.10.0文件夹 1cd git-2.10.0 执行编译 1make all prefix=/usr/local/git 执行完成后，安装到/usr/local/git目录下 1make install prefix=/usr/local/git 02 配置环境变量将git目录加入PATH将原来的PATH指向目录修改为现在的目录 1echo 'export PATH=$PATH:/usr/local/git/bin' &gt;&gt; /etc/bashrc 生效环境变量 1source /etc/bashrc 此时我们能查看 git 版本号，说明我们已经安装成功了。 1git --version 03 创建git账号密码为我们刚刚搭建好的 git 创建一个账号 1useradd -m gituser 然后为这个账号设置密码 1passwd gituser 控制台输入创建密码后，输入自定义的密码，并二次确认。 04 初始化 git 仓库并配置用户权限创建 git 仓库并初始化我们创建 data/repositories 目录用户存放git仓库 1mkdir -p /data/repositories 创建好后，初始化这个仓库 1cd /data/repositories/ &amp;&amp; git init --bare test.git 配置用户权限给 git 仓库目录设置用户和用户组并设置权限 1chown -R gituser:gituser /data/repositories 1chmod 755 /data/repositories [查找 git-shell 所在目录]，编辑/etc/passwd 文件，将最后一行关于gituser的登录shell配置改为git-shell的目录如下 示例代码： /etc/passwd 1gituser:x:500:500::/home/gituser:/usr/local/git/bin/git-shell 如果按照刚才的步骤执行，这个位置应该 /usr/local/git/bin/git-shell,否则请通 wich git-shell 命令查看位置 安全目的，限制 git 账号的 ssh 链接只能是登录 git-shell 使用搭建好的 Git 服务器克隆 test repo 到本地 1cd ~&amp;&amp; git clone gituser@&lt;ip地址&gt;:/data/repositories/test.git]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微软WebCast视频下载辅助工具]]></title>
    <url>%2F2017%2F09%2F27%2F%E5%BE%AE%E8%BD%AFWebCast%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[事件最近公司开始让我们小组搞内部培训。培训内容主要是C#语言，ADO.NET、Winfrom等内容。我们小组共6个人，平时的主要工作是维护实施公司一套10年前开发的VB产品。只有两个人有.NET基础，其余4人完全小白。为了能够达到理想的培训效果，开始从网上找相关的教学视频。我大学的时候学习微软技术都是从WEBCAST下载视频，所以我就本能的想到了WEBCAST。不过不知道为什么WEBCAST上的下载链接全部失效了。。。 微软官方的失效了，其他网站应该有吧，毕竟这个WEBCAST还是挺出名的，于是我就各种搜索。知道了微软WEBCAST现在已经停办了，新的全球化教学网站叫微软虚拟学院。浏览了一下基本上我们想学的知识都没有，都是最前沿的技术。对于我们小组目前来说也用不到，而且大部分都是老外英文教学，中文字幕。对于我们这种听不懂英文的人，看了想睡觉。更令人失望的是，从网上搜不到WEBCAST的视频。只有51TCO上有部分视频，但是搞笑的是，部分视频下载竟然要收费。靠有没有点互联网精神。 契机偶然发现足球中国文章下面的下载链接是可以下载到WEBCAST的视频。还发现了一个神奇的网站msdnwebcast.azurewebsites.net，这个网站上有所有的WEBCAST的课程链接，不过都是失效的链接打开都是404。 链接虽然是无效的，但是发现和足球中国提供的下载链接很像。 无效链接:http://www.microsoft.com/china/msdn/webcast/download.aspx?id=1243938&amp;type=video&amp;source=msdnwebcast.net 足球中国有效链接 :http://download.microsoft.com/download/4/D/0/4D047617-CA60-428B-B2C5-EB7D977E9BC6/WebCast20100901_Video.zip 格式好像也差不多嘛，如果把链接中的www改成download是不是就可以了。试了一下果真可以，看来就是微软的链接出了错，文件都没丢。 下载知道了怎么下载，我就开始手动下载之路。但是下载起来太费劲了，来回的点链接，改链接。头疼不想搞了。由于下载过程太繁琐，我就想写个程序来实现自动下载。之前WEBCAST有一个工具ireaper,我本来想下载下来改改源代码。下载后感觉太复杂有一种看不懂的感觉，于是自己写了一个。 创建项目编码，思路比较简单。 分析msdnwebcast.azurewebsites.net相关页面的html。 找到下载链接 下载。 使用的技术也比较简单，请求HTML用之前从网上下载的HttpHelper类库，从来没用过，正好试试。下载用webclient。 说干就干，大概3个小时，基本的代码写完了，当然非常简陋。但是能成功下载文件了。但是呢下载的速度非常慢，想实现下载过过程监控也比较麻烦。于是就改变思路将下载链接都获取到，然后使用迅雷下载。简单调试后实现了目标。将需要下载的视频都下载下来。 GITHUB虽然在GITHUB上注册账号已经好几年了，也开始用Github写博客。但是从来没上传过项目，所以就想把这个非常简陋的项目上传，虽然大家也不可能从代码上学到什么东西。但是感觉应该也有和我有一样需要的人。敢于尝试总是好的。 GitHub传送门 总结为了下载视频，耗费了一下午的时间。但是第一次上传将自己的代码上传到GitHub上，还是很兴奋的。今后一定努力提高多上传优质的代码。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>webcast</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#针式打印机自定义纸张连续打印爬坑过程]]></title>
    <url>%2F2017%2F09%2F21%2FC-%E9%92%88%E5%BC%8F%E6%89%93%E5%8D%B0%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%B8%E5%BC%A0l%E6%89%93%E5%8D%B0%E7%88%AC%E5%9D%91%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言最近接到一个项目，主要功能是对业务单据的流程管理。但是要实现针式打印机对业务单据的连续打印。客户提供的单据格式如下，要求针式打印机一次可连续打印50-100张单据。 接到需求以后，迅速开搞，单据的流程管理开发非常顺利。但针式打印机连续打印单据的开发过程异常艰辛。本文主要讲述开发选型的过程、遇到的问题、以及填坑过程。 选型之前开发过的票据打印程序使用的是GoldPrinter（金质打印）。不过客户提供的单据格式和传统的发票类票据格式不太一样。思来想去决定使用报表工具。之前使用过ActivexReport，但是感觉太庞大了。发现.NET自带了报表工具RDLC,决定尝试一下。 RDLC 是一个坑根据用户提供的纸张格式，结合网上的教程，2个小时就开发出了RDLC的报表。开发完毕后感觉自信感爆棚,我就想问”还有谁？”。 设置纸张大小设置横向打印。 使用针式打印机测试打印。发现一个比较奇怪的问题。只有将纸张竖向放入针式打印机才能正常打印。横向放入只打印一半。这个时候，我还不理解为什么。从网上胡乱搜索资料。搜索到一些RLDC不能自定义纸张，RDLC不能横向打印机等文章。当时也不是很理解。捣鼓了一天一直不行就放弃了，改用ActivexReport。 ActivexReport 开发ActivexReport的开发过程也比较简单，开发报表差不都也是用了2个小时的时间。开发初期还是使用的和RDLC报表参数的设置。 使用打印机测试打印，问题照旧。还是竖着能打印，横着打印一半。此时挫败感非常强烈，但是生活还得继续啊。开始分析思考问题。 是不是打印机设置有问题？、 RDLC网上说的问题到底什么意思。 感觉好像也没什么问题啊，使用的A4纸打印机。横向打印和竖向打印的放纸也都是一样的。是不是应该调整报表？ 带着上面的问题，楼主开始搜索。后来找到一篇文章说针式打印机实现连续打印需要自定义纸张，具体过程如下。 [1] 打印机添加自定义纸张设置成纵向，调整纸张的宽度和高度。 [2] 调整报表的纸张于面前打印机设置的纸张一样的规格。 测试打印成功了，完美。 连续打印调试连续打印的测试过程还是比较轻松的。用了两个晚上搞定的。第一夜将纸张的高度设置成了14.0，打印了20张以后。打印错位就比较严重了。隐隐感觉是纸张设置的有点大了。 于是开始各种找资料，使用的打印机型号EPSON LQ-635K，从爱普生的官网下载了LQ-630K635K730K735K新机使用指南。在文档中发现常用的纸张规格有21.4*13.97。瞬间感觉有救了，晚上回家重新设置了报表纸张格式和打印机的自定义纸张格式。测试打印了30页，没有出现偏移。爱普生的打印机还是非常靠谱的。说明书更靠谱。 总结通过这个项目了解到了微软的RDLC报表，也学会了如何使用。最终也明白了RDLC目前存在的问题，设置自定义纸张大小如果宽度大于高度，报表会将纸张自动改成横向的。所以想实现针式打印机连续打印是不太可能的。也了解了针式打印机的安装使用，以及自定义纸张的意义。耗费了楼主2个白天3个夜晚，但总归问题都解决了。 参考链接 针式打印机打印241×140mm连续纸时如何调整设置技巧 针式打印机进纸安装教程 爱普生LQ-630K打印机的打印方向是竖的怎么改成横向的 C# WinForm开发系列 - RDLC ​]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>C# 针式打印机</tag>
        <tag>ActivexReport</tag>
        <tag>Rdlc 自定义纸张打印</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式系列之观察者模式]]></title>
    <url>%2F2017%2F09%2F20%2FDesign-Patterns-OBSERVER%2F</url>
    <content type="text"><![CDATA[模式说明 观察者模式是作者接触的比较早的设计模式，也是作者比较早理解的设计模式。该模式属与行为模式。该模式也叫依赖（Dependents）,发布-订阅（publish-Subscribe） 意图定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 GOF,设计模式：可复用面向对象软件的基础 别名依赖（Dependents）,发布-订阅（publish-Subscribe） 适用性 当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。【这条博主也不是很理解。】 当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变。 当一个对象必须通知其他对象。而它又不能假定其他对象是谁。换言之，你不希望这些对象是紧密耦合的。 结构 参与者 Subject(目标) 目标知道它的观察者，可以有人以多个个观察者观察同一个目标。 提供注册和删除观察者对象的接口 Observer(观察者) 为那些在目标发生改变时需要获取通知的对象定义一个接口。 ConcreteSubject(具体的目标) 将有关状态存入各ConcreteObserver对象 当它的状态发生改变，向他的各个观察者发出通知。 ConcreteObserver 维护一个指向ConcreteSubject对象的引用。 存储有关状态，这些状态应与目标对象的状态保持一致。 实现Observer的更新接口以使自身的状态与目标的状态保持一致。 模式实战小张开了一家饭店。饭店的菜单会经常发生变化，菜单变化的时候，小张要通知采购部的相关人员。对菜品进行采购。当然最好通知经常来吃饭的客户。 这个场景非常符合我们观察者模式，当菜单变化的时候要通知客户和采购部门。观察者的数量不确定，类型也不确定。将来可能也会有其他类型的观察者。 我们先定义主题接口和具体的饭店菜单主题 123456789101112131415161718192021222324252627282930313233public interface ISubject &#123; void Attach(IObserver observer); void Detach(IObserver observer); void Notify(); &#125;public class Restaurant : ISubject &#123; public List&lt;IObserver&gt; observers = new List&lt;IObserver&gt;(); public string Name &#123; get; set; &#125; public string Menus &#123; get; set; &#125; public void Attach(IObserver observer) &#123; observers.Add(observer); &#125; public void Detach(IObserver observer) &#123; observers.Remove(observer); &#125; public void Notify() &#123; foreach (var observer in this.observers) &#123; observer.Update(Menus); &#125; &#125; &#125; 然后我们定义具体观察者接口和相关的观察者 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 public interface IObserver &#123; void Update(string Menu); &#125;public class Customer : IObserver &#123; public Customer(string name, TextBox txtlog) &#123; this.Name = name; this.Log = txtlog; &#125; public string Name &#123; get; set; &#125; public TextBox Log &#123; get; set; &#125; public void Update(string Menu) &#123; //throw new NotImplementedException(); Log.AppendText(string.Format(&quot;&#123;0&#125;:我得到消息菜价变化了&#123;1&#125;&quot;, this.Name,System.Environment.NewLine)); &#125; public override string ToString() &#123; return Name; &#125; &#125; public class Buyer : IObserver &#123; public Buyer(string name, TextBox txtlog) &#123; this.Name = name; this.Log = txtlog; &#125; public string Name &#123; get; set; &#125; public TextBox Log &#123; get; set; &#125; public void Update(string Menu) &#123; //throw new NotImplementedException(); Log.AppendText(string.Format(&quot;&#123;0&#125;:我得到了消息菜单变化了。马上采购去&#123;1&#125;&quot;, this.Name, System.Environment.NewLine)); &#125; public override string ToString() &#123; return Name; &#125; &#125; 创建WINFROM项目为实现客户端代码。当我们改变菜单，点击确定按钮时。所有的观察者都得到了更新。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public partial class MainFrom : Form &#123; public MainFrom() &#123; InitializeComponent(); &#125; public ISubject Subject; private void MainFrom_Load(object sender, EventArgs e) &#123; Restaurant restaurantSubject = new Restaurant(); restaurantSubject.Menus = @&quot;糖醋排骨 50 油焖大虾 20 糖醋里脊 10 土豆丝 15&quot;; this.txtMenu.Text = restaurantSubject.Menus; Subject = restaurantSubject; Customer customer = new Customer(&quot;客户小张&quot;, this.txtLog); Customer customer2 = new Customer(&quot;客户小李&quot;, this.txtLog); Buyer buyer = new Buyer(&quot;采购小王&quot;, this.txtLog); lbxObserver.Items.Add(customer); lbxObserver.Items.Add(customer2); lbxObserver.Items.Add(buyer); Subject.Attach(customer); Subject.Attach(customer2); Subject.Attach(buyer); &#125; private void btnChangeMenus_Click(object sender, EventArgs e) &#123; ((Restaurant)Subject).Menus = this.txtMenu.Text; Subject.Notify(); &#125; private void btnAddObserver_Click(object sender, EventArgs e) &#123; if (this.cbxObserverType.Text == &quot;客户&quot;) &#123; IObserver observer = new Customer(&quot;客户&quot; + this.txtName.Text, this.txtLog); lbxObserver.Items.Add(observer); Subject.Attach(observer); &#125; else if (this.cbxObserverType.Text == &quot;采购&quot;) &#123; IObserver observer = new Buyer(&quot;采购&quot; + this.txtName.Text, this.txtLog); lbxObserver.Items.Add(observer); Subject.Attach(observer); &#125; &#125; private void btnDelObserver_Click(object sender, EventArgs e) &#123; IObserver item = lbxObserver.SelectedItem as IObserver; lbxObserver.Items.Remove(item); Subject.Detach(item); &#125; &#125; 程序的界面如下 基本的功能都实现了，动态的添加、删除观察者。菜单改变，改变后用户观察者得到的消息展示。如果先查看代码传送门,做之前想要做的多少多好，每次一开始写，就写的很差劲了。多练吧。 效果及实现要点推拉模式推模型:目标想所有的观察者发送改变的详细信息。不管观察者是否需要。 缺点：目标知道观察者需要的信息。所以目标难以复用。 拉模型:目标不主动推送改变的数据，由观察者得到更新通知后，显示访问目标对象。 缺点：效率较差，因为目标更改了那些内容需要观察者自己去获取。 .NET EVEN与观察者模式接口 在C#语言中从语言层面已经实现了观察者模式，那就是事件和委托。而且事件和委托比观察者的模型更灵活。 System.IObservable.aspx) 和 System.IObserver.aspx) 接口 ，.NET4.0自带了对观察者实现的泛型接口。提供的接口与传统的观察者模不同，但是目的是一样的。传送门.aspx) 显示的制定感兴趣的改变当只对主题的特定数据和事件感兴趣的时候，可以注册对主题感兴趣的方面（aspects），主题在执行更新操作的时候将这一方面的改变发送给订阅者。接口如下，目前我对方面的认识还不够，但是我认为这个是非常有意义的。当我们只对菜单的某一个菜感兴趣时或者我们只对周五菜单改变刚兴趣这种接口就比较有威力了。书中的定义如下。 123void Subject::Attach(Observer*,Aspect&amp; interest);void Observer:Update(Subject*,Aspect&amp; interest); ### 模式总结通过Observer模式，把一对多对象之间的通知依赖关系的变得更为松散，大大地提高了程序的可维护性和可扩展性，也很好的符合了开放-封闭原则。 参考资料MSDN WebCast 《C#面向对象设计模式纵横谈(19)：Observer 观察者模式(行为型模式)》 Erich Gamma等，《设计模式：可复用面向对象软件的基础》 ()]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>.Net模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo优化与写作技巧]]></title>
    <url>%2F2017%2F09%2F06%2FHexo%E4%BC%98%E5%8C%96%E4%B8%8E%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前言前二篇文章已经介绍了作者Hexo+Next搭建优化博客的全过程。本篇作为该系列的最后一篇，主要介绍Hexo的一些写作方面的设置和主题的美化。该篇结束后，作者也将停止对博客的折腾开始进行相关技术的学习整理阶段。今天和老同事聊天，他问我下一步想学什么？？？这个问题把我给难住 了好像什么都想学设计模式、ES6、ASP.NET MVC……现在也没什么方向。希望明天早上一觉醒来能有答应吧，不废话了进入正题。 文章写作技巧Front-matter使用Hexo n [文章名]创建一篇新的文章时，Hexo会自动使用scaffold文件下的布局文件为模版创建一个新的MD文件。默认的布局文件都包含Front-matter的内容。 Front-matter 可以设置文章的全局参数，在文章的最上方以---开头结尾。一般需要自己设置的参数是tags,categories。tags 用来设置文章的标签，categories用来设置文章的分类。Hexo目前不支持多级分类，文章分类只能有一级。设置方法如下。 12345categories:- 博客搭建tags:- Hexo- Next 首页添加阅读全文写前两篇文章的时候，首页的文章列表显示了每一篇文章的详细内容。我刚开始以为就是这样后来通过BAIDU才知道原来可以通过设置文章参数或者加标记的方式解决该问题。 方法一 添加more标记在文章中合适的位置添加 1&lt;!--more--&gt; 重新生成后首页的文章列表就会将该标记之前的内容作为描述信息，描述信息后面会显示阅读全文按钮。 方法二 设置Front-matter参数在Front-matter中添加description参数 12345title: Hexo优化与写作技巧date: 2017-09-06 18:56:34tags: [Hexo,Next]categories: 博客搭建description: Hexo优化与写作技巧Hexo优化与写作技巧Hexo优化与写作技巧Hexo优化与写作技巧 推荐使用第一种方法。比较灵活，可以自己控制 。 七牛床图虽然作者审美不太好，也不喜欢找图片。但感觉总会需要用到图片的时候，使用的git的空间好像有300M的限制，所以还是用外链的图片比较好。找了一些文章基本上都是用的七牛存储的，所以作者也使用了七牛。设置的过程也比较简单可以参考这两篇文章 使用七牛为Hexo存储图片 Hexo文章图片存储选七牛 Hext常用标签插件Hext通过标签可以插入特定的内容以下是我感觉比较有用的。详细的请参考网官文档 引用块在文章中插入引言，可以包含作者来源和标题。 123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 样例 原谅我这一生不羁放纵爱自由 beyond, 海阔天空酷狗音乐 Bootstrap Callout该插件包含了Bootstrap中一些引用样式。 1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; class_name 包含 default primary success info warning danger 样例 default primary success info warning danger 样式再美化Fork me on GitHub虽然作者的github上没有什么自己的开源项目，但是谁知道以后会不会有呢。先加上看上去不是也高大上些。 先去选个样式传送门 复制代码到主题文件F:\Tools\qzdotnet\themes\next\layout的_layout.swig文件中 12&lt;div class="headband"&gt;&lt;/div&gt; &lt;a href="https://github.com/qzdotnet"&gt;&lt;img style="position: absolute; top: 0; left: 0; border: 0;" src="https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png"&gt;&lt;/a&gt; 添加RSS想要实现RSS需求安装插件hexo-generator-feed 1npm install hexo-generator-feed 然后配置站点配置文件 添加 12345678#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:type: atompath: atom.xmllimit: 30 最后配置主题配置文件的rss结点 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 阅读量阅读量分两部分，每一篇文章的阅读量和网站总体的阅读量。 文章阅读量请参考：为NexT主题添加文章阅读量统计功能 ，基本的步骤呢是先到LeanCloud注册，然后配置主题配置文件 网站总体的阅读量使用的不蒜子统计，Next新版本已经集成了只需要修改主题配置文件 1234567891011busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 本站访客数 #&lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: 人次 # custom pv span for the whole site site_pv: true site_pv_header: 本站总访问量 # &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: 次 本文结束给每一篇文章未尾增加本文结束提示语，在\themes\next\layout\_macro目录下新建post-end-tag.swig内容如下 12345&lt;div style="text-align:center;color: #ccc;font-size:14px;margin:10px 0"&gt; -------------本文结束 &lt;i class="fa fa-space-shuttle"&gt;&lt;/i&gt; 感谢您的阅读-------------&lt;/div&gt; 然后编辑同目录下的post.swig文件在&lt;footer class=&quot;post-footer&quot;&gt;之前插入 12345&#123;% if theme.post_end_tag.enable and not is_index %&#125; &lt;div&gt; &#123;% include 'post-end-tag.swig' %&#125; &lt;/div&gt;&#123;% endif %&#125; 最后在主题配置文件中增加配置项 12post_end_tag: enabled: true 总结三天的时候终于将博客搭建起来了。虽然大部分内容都是照着网上的内容做的，自己也没有学到太多的知识。但是整体的效果我还是非常满意的。从无到有，还了解了Hexo、Next还查了一些Swig、Yaml的资料也算有收获。博客就不再花时间折腾了。下一步还是抓紧确认要学习的技术，并开始深度学习。加油！！！！！！！！！！！！！！ 参考连接 hexo的next主题个性化教程 hexo高阶教程 Hexo之NexT主题配置]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题配置第三方服务集成]]></title>
    <url>%2F2017%2F09%2F05%2FNext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[前言上一篇文章我们已经成功的将博客搭建起来。本文将对主题的相关配置以及第三方服务的集成做进一步的介绍。其实Next的文档，已经将配置与服务集成介绍的非常明白。有兴趣的同学可以去查看官方文档,本文将重点介绍本人BLOG使用的第三方服务 。 主题配置 主要的配置文件有两个 站点配置文件：根目录下面的_config.yml文件 主题配置文件：主题根目录下的_config.yml文件 站点信息站点信息存放在站点配置文件文件中。 123456title: QuZheng #主标题subtitle: #副标题description: #描述author: QuZheng #作者language: zh-Hans #语言timezone: Next目前支持的语言 语言 代码 示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 如果想将自己的网站设置为多语言版本可参考如下设置 123language:- zh-Hans- en 菜单博客的菜单的功能菜单是可以自定义的。菜单的配置在主题配置文件件中。 12345678menu: home: / #首页 categories: /categories/ #分类 about: /about/ #关于 archives: /archives/ #归档 tags: /tags/ #标签 #sitemap: /sitemap.xml #commonweal: /404/ 系统初始时，只有home、archives、tags，其它菜单需要手动将注释去掉。并增加相应的页面。 tags页面添加执行下面命令 1hexo n page tags 打开source\tags目录下的index.md,添加 type参数 12345---title: tagsdate: 2017-09-04 20:14:29type: "tags"--- categories页面添加执行命令 1hexo n page categories 打开source\categories目录下的index.md,添加 type参数 12345---title: tagsdate: 2017-09-04 20:14:29type: "categories"--- about页面添加执行命令 1hexo n page about 菜单图标menu_icons配置结点可以设置菜单是否带图标。图标使用的FontAwesome字体 1234567891011menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: tags archives: archive sitemap: sitemap commonweal: heartbeat 风格Next 提供了三种风格供选择 123scheme: Muse#scheme: Mist#scheme: Pisces 版权信息版本信息默认是关闭的，可以通过设置enable来打开版本信息。 12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 插件安装百度统计注册百度统计账号 在网站列表中新增网站，填写信息保存后。点击获取代码。将hm.js?后面的ID复制到主题配置文件中 12# Baidu Analytics IDbaidu_analytics: 59*************** 保存完毕后，可以执行命令，重新生成发布。 1hexo g -d 发布成功后，可以到百度统计点击首页代码状态进行测试，测试成功会提示代码安装正确。 Local Search搜索1 在根目前安装 hexo-generator-searchdb,安装时要使用管理员权限运行命令行工具，切记!!!!! 1npm install hexo-generator-searchdb --save 2 编辑站点配置文件，添加 12345search: path: search.xml field: post format: html limit: 10000 3 编辑主题配置文件,启用本地搜索功能： 123# Local searchlocal_search: enable: true 百度分享百度分享需要修改两个地方,这个地方不要按Next官网的教程来，官网的教程有问题。 网站配置文件任意位置 添加 1baidushare: true 主题配置文件 12baidushare: type: button 配置成功后重新生成文件就可以了，但是发布到github后发现分享不显示。百度后了解是因为百度分享不支持https,参考这两篇文章搞定该问题 百度分享不支持https的解决方案 Hexo+Github搭建个人博客(三) Gitment 文章评论添加文章的评论模块，官网提供的几个都得翻墙才能使用。国内的多说、网易云都停止服务了。最终作者选择了Gitment添加评论支持。添加的具体过程参考为 hexo NexT 添加 Gitment 评论插件Gitment：使用 GitHub Issues 搭建评论系统作者花了大概二个小时才将评论模块搭建好。。多参考第一篇文章就可以了，主要是作者对Hexo还不太了解。 打赏功能1 设置主题配置文件 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作wechatpay: /images/wechatpay.jpgalipay: /images/alipay.png 2 制作支付图片并上传到主题目录next\source\images文件夹中 3 修改打赏文字，我下载的主题默认的文字是英文的，修改主题目录中的next\layout_macro\reward.swig 文件 123456789101112131415161718192021222324252627282930&lt;div style="padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;"&gt; &lt;div&gt;&#123;&#123; theme.reward_comment &#125;&#125;&lt;/div&gt; &lt;button id="rewardButton" disable="enable" onclick="var qr = document.getElementById('QR'); if (qr.style.display === 'none') &#123;qr.style.display='block';&#125; else &#123;qr.style.display='none'&#125;"&gt; &lt;span&gt;赏&lt;/span&gt; &lt;/button&gt; &lt;div id="QR" style="display: none;"&gt; &#123;% if theme.wechatpay %&#125; &lt;div id="wechat" style="display: inline-block"&gt; &lt;img id="wechat_qr" src="&#123;&#123; theme.wechatpay &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; WeChat Pay"/&gt; &lt;p&gt;微信打赏&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.alipay %&#125; &lt;div id="alipay" style="display: inline-block"&gt; &lt;img id="alipay_qr" src="&#123;&#123; theme.alipay &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; Alipay"/&gt; &lt;p&gt;支付宝打赏&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.bitcoin %&#125; &lt;div id="bitcoin" style="display: inline-block"&gt; &lt;img id="bitcoin_qr" src="&#123;&#123; theme.bitcoin &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; Bitcoin"/&gt; &lt;p&gt;Bitcoin&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt;&lt;/div&gt; 404在主题目录themes\next\source中创建404.html 内容如下 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="返回博客主页"&gt;&lt;/script&gt;&lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt;&lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结折腾了整整一天才将上文的内容搞定，感觉非常的满足。看了一些大神的博客，绝定在对自己的博客进行美化。美化完毕后就不在折腾了。进入技术学习阶段，具体学什么还没想好。但感觉非常好，希望可以一致持续下去。 参考链接 Next 官方文档 hexo文章添加版权声明及一些特效 使用七牛为Hexo存储图片 npm install 安装软件，出现 operation not permitted, mkdir https://www.tiexo.cn/gitment/ https://imsun.net/posts/gitment-introduction/]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub-Hexo-NEXT-博客搭建日记]]></title>
    <url>%2F2017%2F09%2F04%2FGitHub-Hexo-NEXT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[00 前言 今年已经三十了，从事程序开发工作也已经10年了。这10年在技术上可以说一直在原地踏步。主要使用的语言.NET也还维持在.NET2.0的水平。刚参加 工作时还感觉自己挺牛的，到现在感觉自己很渺小。我也一直想学习新的技术，但都从入门到放弃了。这次搭建这个博客就是希望能通过写博客的方式让自己的技术水平能有所提高，逼自己在努力一把。 01 软件安装GIT安装下载 git for Windows,安装过程非常简单。 NODE安装下载NODE,我安装的是CURRENT版本,安装过程非常简单。 02 创建GITHUB项目，配置GIT环境注册账号账号注册非常简单 注册地址 创建Repository创建与自己GITHUB账号同名的Repository比如账号是qzdotnet,新建的Repository名称应该是qzdotnet.github.io。 配置SSH生成SSH检查是否已经有SSH Key，打开Git Bash,输入 1cd ~/.ssh 如果没有找到这个目录就需要使用 1ssh-keygen -t rsa -C &quot;e-mail&quot; 输入该命令以后一路回车。 配置Github公钥本人是在Windows7环境下安装的所以成生的文件在目录C:\Users\Administrator.WIN7-1704221339.ssh 下使用文本编辑器打开id_rsa.pub文件，复制 文件里的全部内容。 登录GitHub，点击右上角的角户图标，选择settings菜单。点击左侧的SSH and GPG keys 菜单，点击New SSH key按钮。将复制的 内容粘贴到KEY输入框中。Title 可以随意设置。设置完毕 后点 Add SSH key按钮。保存设置。 这里要注意，SSH key保存不是立即生效的，可以等待3到5分钟。我测试的时候大概三分钟生效的。 测试SSH是否正确配置打开Git Bash 输入 123ssh -t git@github.com 如果提示,说明配置成功了。 12Hi username! You&apos;ve successfully authenticated, but GitHub does notprovide shell access. 如果提示IP之类的错误将下面代码复制 到HOST文件中 1192.30.255.113 github.com 配置Git全局参数12git config --global user.name &quot;username&quot;git config --global user.email &quot;email&quot; 配置完成后可以通过1git config --list查看配置 03 安装 Hexo安装Hexo打开Node.js命令行工具，输入 123npm install -g hexo-cli 完成Hexo的全局安装。 创建Hexo站点选择一个本地文件夹做为站点的根目录。如F:\qzdotnet，输入 123456789hexo init f:\qzdotnetcd f:\qzdotnetf:npm install npm install hexo-deployer-git 完成对hexo的安装 输入 1hexo s 如果部署没有问题，网站就已经启动了。可以使用http://localhost:4000进行访问 配置Git账户打开 f:\qzdotnet文件夹下面的_config.yml文件配置deploy: 结点的内容 1234deploy: type: git repo: git@github.com:qzdotnet/qzdotnet.github.io branch: master 注意yml配置文件配置节点:后面要添加空格。 04 配置Next 主题下载Next本人下载的是v5.1.2稳定版本的压缩包，当然也可以从GitHub克隆最新版， 下载后可以将文件解压缩并将文件名修改成Next，复制到 f:\qzdotnet的themes文件夹中。 配置主题打开 f:\qzdotnet文件夹下的_config.yml文件，修改theme结点 1theme: next 05 发布到GitHub创建文章在Git Bash中输入 1hexo new &quot;Hello World!&quot; 添加一篇新的博文。 发布到GitHub输入完成发布 1hexo g -d 发布成功后可以打开https://qzdotnet.github.io/查看已经的博客了。到此博客搭建就已经顺利完成了。后面的文章会对Hexo与Next的相关配置和功能使用做一些介绍 99 参考链接 Github+Hexo+NEXT主题+域名绑定 博客搭建全记录 Hexo官网 NexT使用文档]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
</search>
