<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[微软WebCast视频下载辅助工具]]></title>
    <url>%2F2017%2F09%2F27%2F%E5%BE%AE%E8%BD%AFWebCast%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E8%BE%85%E5%8A%A9%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[事件最近公司开始让我们小组搞内部培训。培训内容主要是C#语言，ADO.NET、Winfrom等内容。我们小组共6个人，平时的主要工作是维护实施公司一套10年前开发的VB产品。只有两个人有.NET基础，其余4人完全小白。为了能够达到理想的培训效果，开始从网上找相关的教学视频。我大学的时候学习微软技术都是从WEBCAST下载视频，所以我就本能的想到了WEBCAST。不过不知道为什么WEBCAST上的下载链接全部失效了。。。 微软官方的失效了，其他网站应该有吧，毕竟这个WEBCAST还是挺出名的，于是我就各种搜索。知道了微软WEBCAST现在已经停办了，新的全球化教学网站叫微软虚拟学院。浏览了一下基本上我们想学的知识都没有，都是最前沿的技术。对于我们小组目前来说也用不到，而且大部分都是老外英文教学，中文字幕。对于我们这种听不懂英文的人，看了想睡觉。更令人失望的是，从网上搜不到WEBCAST的视频。只有51TCO上有部分视频，但是搞笑的是，部分视频下载竟然要收费。靠有没有点互联网精神。 契机偶然发现足球中国文章下面的下载链接是可以下载到WEBCAST的视频。还发现了一个神奇的网站msdnwebcast.azurewebsites.net，这个网站上有所有的WEBCAST的课程链接，不过都是失效的链接打开都是404。 链接虽然是无效的，但是发现和足球中国提供的下载链接很像。 无效链接:http://www.microsoft.com/china/msdn/webcast/download.aspx?id=1243938&amp;type=video&amp;source=msdnwebcast.net 足球中国有效链接 :http://download.microsoft.com/download/4/D/0/4D047617-CA60-428B-B2C5-EB7D977E9BC6/WebCast20100901_Video.zip 格式好像也差不多嘛，如果把链接中的www改成download是不是就可以了。试了一下果真可以，看来就是微软的链接出了错，文件都没丢。 下载知道了怎么下载，我就开始手动下载之路。但是下载起来太费劲了，来回的点链接，改链接。头疼不想搞了。由于下载过程太繁琐，我就想写个程序来实现自动下载。之前WEBCAST有一个工具ireaper,我本来想下载下来改改源代码。下载后感觉太复杂有一种看不懂的感觉，于是自己写了一个。 创建项目编码，思路比较简单。 分析msdnwebcast.azurewebsites.net相关页面的html。 找到下载链接 下载。 使用的技术也比较简单，请求HTML用之前从网上下载的HttpHelper类库，从来没用过，正好试试。下载用webclient。 说干就干，大概3个小时，基本的代码写完了，当然非常简陋。但是能成功下载文件了。但是呢下载的速度非常慢，想实现下载过过程监控也比较麻烦。于是就改变思路将下载链接都获取到，然后使用迅雷下载。简单调试后实现了目标。将需要下载的视频都下载下来。 GITHUB虽然在GITHUB上注册账号已经好几年了，也开始用Github写博客。但是从来没上传过项目，所以就想把这个非常简陋的项目上传，虽然大家也不可能从代码上学到什么东西。但是感觉应该也有和我有一样需要的人。敢于尝试总是好的。 GitHub传送门 总结为了下载视频，耗费了一下午的时间。但是第一次上传将自己的代码上传到GitHub上，还是很兴奋的。今后一定努力提高多上传优质的代码。]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>webcast</tag>
        <tag>下载</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C#针式打印机自定义纸张连续打印爬坑过程]]></title>
    <url>%2F2017%2F09%2F21%2FC-%E9%92%88%E5%BC%8F%E6%89%93%E5%8D%B0%E6%9C%BA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BA%B8%E5%BC%A0l%E6%89%93%E5%8D%B0%E7%88%AC%E5%9D%91%E8%BF%87%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[前言最近接到一个项目，主要功能是对业务单据的流程管理。但是要实现针式打印机对业务单据的连续打印。客户提供的单据格式如下，要求针式打印机一次可连续打印50-100张单据。 接到需求以后，迅速开搞，单据的流程管理开发非常顺利。但针式打印机连续打印单据的开发过程异常艰辛。本文主要讲述开发选型的过程、遇到的问题、以及填坑过程。 选型之前开发过的票据打印程序使用的是GoldPrinter（金质打印）。不过客户提供的单据格式和传统的发票类票据格式不太一样。思来想去决定使用报表工具。之前使用过ActivexReport，但是感觉太庞大了。发现.NET自带了报表工具RDLC,决定尝试一下。 RDLC 是一个坑根据用户提供的纸张格式，结合网上的教程，2个小时就开发出了RDLC的报表。开发完毕后感觉自信感爆棚,我就想问”还有谁？”。 设置纸张大小设置横向打印。 使用针式打印机测试打印。发现一个比较奇怪的问题。只有将纸张竖向放入针式打印机才能正常打印。横向放入只打印一半。这个时候，我还不理解为什么。从网上胡乱搜索资料。搜索到一些RLDC不能自定义纸张，RDLC不能横向打印机等文章。当时也不是很理解。捣鼓了一天一直不行就放弃了，改用ActivexReport。 ActivexReport 开发ActivexReport的开发过程也比较简单，开发报表差不都也是用了2个小时的时间。开发初期还是使用的和RDLC报表参数的设置。 使用打印机测试打印，问题照旧。还是竖着能打印，横着打印一半。此时挫败感非常强烈，但是生活还得继续啊。开始分析思考问题。 是不是打印机设置有问题？、 RDLC网上说的问题到底什么意思。 感觉好像也没什么问题啊，使用的A4纸打印机。横向打印和竖向打印的放纸也都是一样的。是不是应该调整报表？ 带着上面的问题，楼主开始搜索。后来找到一篇文章说针式打印机实现连续打印需要自定义纸张，具体过程如下。 [1] 打印机添加自定义纸张设置成纵向，调整纸张的宽度和高度。 [2] 调整报表的纸张于面前打印机设置的纸张一样的规格。 测试打印成功了，完美。 连续打印调试连续打印的测试过程还是比较轻松的。用了两个晚上搞定的。第一夜将纸张的高度设置成了14.0，打印了20张以后。打印错位就比较严重了。隐隐感觉是纸张设置的有点大了。 于是开始各种找资料，使用的打印机型号EPSON LQ-635K，从爱普生的官网下载了LQ-630K635K730K735K新机使用指南。在文档中发现常用的纸张规格有21.4*13.97。瞬间感觉有救了，晚上回家重新设置了报表纸张格式和打印机的自定义纸张格式。测试打印了30页，没有出现偏移。爱普生的打印机还是非常靠谱的。说明书更靠谱。 总结通过这个项目了解到了微软的RDLC报表，也学会了如何使用。最终也明白了RDLC目前存在的问题，设置自定义纸张大小如果宽度大于高度，报表会将纸张自动改成横向的。所以想实现针式打印机连续打印是不太可能的。也了解了针式打印机的安装使用，以及自定义纸张的意义。耗费了楼主2个白天3个夜晚，但总归问题都解决了。 参考链接 针式打印机打印241×140mm连续纸时如何调整设置技巧 针式打印机进纸安装教程 爱普生LQ-630K打印机的打印方向是竖的怎么改成横向的 C# WinForm开发系列 - RDLC ​]]></content>
      <categories>
        <category>杂记</category>
      </categories>
      <tags>
        <tag>C# 针式打印机</tag>
        <tag>ActivexReport</tag>
        <tag>Rdlc 自定义纸张打印</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[设计模式系列之观察者模式]]></title>
    <url>%2F2017%2F09%2F20%2FDesign-Patterns-OBSERVER%2F</url>
    <content type="text"><![CDATA[模式说明 观察者模式是作者接触的比较早的设计模式，也是作者比较早理解的设计模式。该模式属与行为模式。该模式也叫依赖（Dependents）,发布-订阅（publish-Subscribe） 意图定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 GOF,设计模式：可复用面向对象软件的基础 别名依赖（Dependents）,发布-订阅（publish-Subscribe） 适用性 当一个抽象模型有两个方面，其中一个方面依赖于另一方面。将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。【这条博主也不是很理解。】 当对一个对象的改变需要同时改变其他对象，而不知道具体有多少对象有待改变。 当一个对象必须通知其他对象。而它又不能假定其他对象是谁。换言之，你不希望这些对象是紧密耦合的。 结构 参与者 Subject(目标) 目标知道它的观察者，可以有人以多个个观察者观察同一个目标。 提供注册和删除观察者对象的接口 Observer(观察者) 为那些在目标发生改变时需要获取通知的对象定义一个接口。 ConcreteSubject(具体的目标) 将有关状态存入各ConcreteObserver对象 当它的状态发生改变，向他的各个观察者发出通知。 ConcreteObserver 维护一个指向ConcreteSubject对象的引用。 存储有关状态，这些状态应与目标对象的状态保持一致。 实现Observer的更新接口以使自身的状态与目标的状态保持一致。 模式实战小张开了一家饭店。饭店的菜单会经常发生变化，菜单变化的时候，小张要通知采购部的相关人员。对菜品进行采购。当然最好通知经常来吃饭的客户。 这个场景非常符合我们观察者模式，当菜单变化的时候要通知客户和采购部门。观察者的数量不确定，类型也不确定。将来可能也会有其他类型的观察者。 我们先定义主题接口和具体的饭店菜单主题 123456789101112131415161718192021222324252627282930313233public interface ISubject &#123; void Attach(IObserver observer); void Detach(IObserver observer); void Notify(); &#125;public class Restaurant : ISubject &#123; public List&lt;IObserver&gt; observers = new List&lt;IObserver&gt;(); public string Name &#123; get; set; &#125; public string Menus &#123; get; set; &#125; public void Attach(IObserver observer) &#123; observers.Add(observer); &#125; public void Detach(IObserver observer) &#123; observers.Remove(observer); &#125; public void Notify() &#123; foreach (var observer in this.observers) &#123; observer.Update(Menus); &#125; &#125; &#125; 然后我们定义具体观察者接口和相关的观察者 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748 public interface IObserver &#123; void Update(string Menu); &#125;public class Customer : IObserver &#123; public Customer(string name, TextBox txtlog) &#123; this.Name = name; this.Log = txtlog; &#125; public string Name &#123; get; set; &#125; public TextBox Log &#123; get; set; &#125; public void Update(string Menu) &#123; //throw new NotImplementedException(); Log.AppendText(string.Format(&quot;&#123;0&#125;:我得到消息菜价变化了&#123;1&#125;&quot;, this.Name,System.Environment.NewLine)); &#125; public override string ToString() &#123; return Name; &#125; &#125; public class Buyer : IObserver &#123; public Buyer(string name, TextBox txtlog) &#123; this.Name = name; this.Log = txtlog; &#125; public string Name &#123; get; set; &#125; public TextBox Log &#123; get; set; &#125; public void Update(string Menu) &#123; //throw new NotImplementedException(); Log.AppendText(string.Format(&quot;&#123;0&#125;:我得到了消息菜单变化了。马上采购去&#123;1&#125;&quot;, this.Name, System.Environment.NewLine)); &#125; public override string ToString() &#123; return Name; &#125; &#125; 创建WINFROM项目为实现客户端代码。当我们改变菜单，点击确定按钮时。所有的观察者都得到了更新。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364public partial class MainFrom : Form &#123; public MainFrom() &#123; InitializeComponent(); &#125; public ISubject Subject; private void MainFrom_Load(object sender, EventArgs e) &#123; Restaurant restaurantSubject = new Restaurant(); restaurantSubject.Menus = @&quot;糖醋排骨 50 油焖大虾 20 糖醋里脊 10 土豆丝 15&quot;; this.txtMenu.Text = restaurantSubject.Menus; Subject = restaurantSubject; Customer customer = new Customer(&quot;客户小张&quot;, this.txtLog); Customer customer2 = new Customer(&quot;客户小李&quot;, this.txtLog); Buyer buyer = new Buyer(&quot;采购小王&quot;, this.txtLog); lbxObserver.Items.Add(customer); lbxObserver.Items.Add(customer2); lbxObserver.Items.Add(buyer); Subject.Attach(customer); Subject.Attach(customer2); Subject.Attach(buyer); &#125; private void btnChangeMenus_Click(object sender, EventArgs e) &#123; ((Restaurant)Subject).Menus = this.txtMenu.Text; Subject.Notify(); &#125; private void btnAddObserver_Click(object sender, EventArgs e) &#123; if (this.cbxObserverType.Text == &quot;客户&quot;) &#123; IObserver observer = new Customer(&quot;客户&quot; + this.txtName.Text, this.txtLog); lbxObserver.Items.Add(observer); Subject.Attach(observer); &#125; else if (this.cbxObserverType.Text == &quot;采购&quot;) &#123; IObserver observer = new Buyer(&quot;采购&quot; + this.txtName.Text, this.txtLog); lbxObserver.Items.Add(observer); Subject.Attach(observer); &#125; &#125; private void btnDelObserver_Click(object sender, EventArgs e) &#123; IObserver item = lbxObserver.SelectedItem as IObserver; lbxObserver.Items.Remove(item); Subject.Detach(item); &#125; &#125; 程序的界面如下 基本的功能都实现了，动态的添加、删除观察者。菜单改变，改变后用户观察者得到的消息展示。如果先查看代码传送门,做之前想要做的多少多好，每次一开始写，就写的很差劲了。多练吧。 效果及实现要点推拉模式推模型:目标想所有的观察者发送改变的详细信息。不管观察者是否需要。 缺点：目标知道观察者需要的信息。所以目标难以复用。 拉模型:目标不主动推送改变的数据，由观察者得到更新通知后，显示访问目标对象。 缺点：效率较差，因为目标更改了那些内容需要观察者自己去获取。 事件委托在C#语言中从语言层面已经实现了观察者模式，那就是事件和委托。而且事件和委托比观察者的模型更灵活。 模式总结通过Observer模式，把一对多对象之间的通知依赖关系的变得更为松散，大大地提高了程序的可维护性和可扩展性，也很好的符合了开放-封闭原则。 参考资料MSDN WebCast 《C#面向对象设计模式纵横谈(19)：Observer 观察者模式(行为型模式)》 Erich Gamma等，《设计模式：可复用面向对象软件的基础》]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>.Net模式</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo优化与写作技巧]]></title>
    <url>%2F2017%2F09%2F06%2FHexo%E4%BC%98%E5%8C%96%E4%B8%8E%E5%86%99%E4%BD%9C%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[前言前二篇文章已经介绍了作者Hexo+Next搭建优化博客的全过程。本篇作为该系列的最后一篇，主要介绍Hexo的一些写作方面的设置和主题的美化。该篇结束后，作者也将停止对博客的折腾开始进行相关技术的学习整理阶段。今天和老同事聊天，他问我下一步想学什么？？？这个问题把我给难住 了好像什么都想学设计模式、ES6、ASP.NET MVC……现在也没什么方向。希望明天早上一觉醒来能有答应吧，不废话了进入正题。 文章写作技巧Front-matter使用Hexo n [文章名]创建一篇新的文章时，Hexo会自动使用scaffold文件下的布局文件为模版创建一个新的MD文件。默认的布局文件都包含Front-matter的内容。 Front-matter 可以设置文章的全局参数，在文章的最上方以---开头结尾。一般需要自己设置的参数是tags,categories。tags 用来设置文章的标签，categories用来设置文章的分类。Hexo目前不支持多级分类，文章分类只能有一级。设置方法如下。 12345categories:- 博客搭建tags:- Hexo- Next 首页添加阅读全文写前两篇文章的时候，首页的文章列表显示了每一篇文章的详细内容。我刚开始以为就是这样后来通过BAIDU才知道原来可以通过设置文章参数或者加标记的方式解决该问题。 方法一 添加more标记在文章中合适的位置添加 1&lt;!--more--&gt; 重新生成后首页的文章列表就会将该标记之前的内容作为描述信息，描述信息后面会显示阅读全文按钮。 方法二 设置Front-matter参数在Front-matter中添加description参数 12345title: Hexo优化与写作技巧date: 2017-09-06 18:56:34tags: [Hexo,Next]categories: 博客搭建description: Hexo优化与写作技巧Hexo优化与写作技巧Hexo优化与写作技巧Hexo优化与写作技巧 推荐使用第一种方法。比较灵活，可以自己控制 。 七牛床图虽然作者审美不太好，也不喜欢找图片。但感觉总会需要用到图片的时候，使用的git的空间好像有300M的限制，所以还是用外链的图片比较好。找了一些文章基本上都是用的七牛存储的，所以作者也使用了七牛。设置的过程也比较简单可以参考这两篇文章 使用七牛为Hexo存储图片 Hexo文章图片存储选七牛 Hext常用标签插件Hext通过标签可以插入特定的内容以下是我感觉比较有用的。详细的请参考网官文档 引用块在文章中插入引言，可以包含作者来源和标题。 123&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;content&#123;% endblockquote %&#125; 样例 原谅我这一生不羁放纵爱自由 beyond, 海阔天空酷狗音乐 Bootstrap Callout该插件包含了Bootstrap中一些引用样式。 1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; class_name 包含 default primary success info warning danger 样例 default primary success info warning danger 样式再美化Fork me on GitHub虽然作者的github上没有什么自己的开源项目，但是谁知道以后会不会有呢。先加上看上去不是也高大上些。 先去选个样式传送门 复制代码到主题文件F:\Tools\qzdotnet\themes\next\layout的_layout.swig文件中 12&lt;div class="headband"&gt;&lt;/div&gt; &lt;a href="https://github.com/qzdotnet"&gt;&lt;img style="position: absolute; top: 0; left: 0; border: 0;" src="https://camo.githubusercontent.com/567c3a48d796e2fc06ea80409cc9dd82bf714434/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f6461726b626c75655f3132313632312e706e67" alt="Fork me on GitHub" data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_left_darkblue_121621.png"&gt;&lt;/a&gt; 添加RSS想要实现RSS需求安装插件hexo-generator-feed 1npm install hexo-generator-feed 然后配置站点配置文件 添加 12345678#RSS订阅plugin:- hexo-generator-feed#Feed Atomfeed:type: atompath: atom.xmllimit: 30 最后配置主题配置文件的rss结点 1234# Set rss to false to disable feed link.# Leave rss as empty to use site's feed link.# Set rss to specific value if you have burned your feed already.rss: /atom.xml 阅读量阅读量分两部分，每一篇文章的阅读量和网站总体的阅读量。 文章阅读量请参考：为NexT主题添加文章阅读量统计功能 ，基本的步骤呢是先到LeanCloud注册，然后配置主题配置文件 网站总体的阅读量使用的不蒜子统计，Next新版本已经集成了只需要修改主题配置文件 1234567891011busuanzi_count: # count values only if the other configs are false enable: true # custom uv span for the whole site site_uv: true site_uv_header: 本站访客数 #&lt;i class="fa fa-user"&gt;&lt;/i&gt; site_uv_footer: 人次 # custom pv span for the whole site site_pv: true site_pv_header: 本站总访问量 # &lt;i class="fa fa-eye"&gt;&lt;/i&gt; site_pv_footer: 次 本文结束给每一篇文章未尾增加本文结束提示语，在\themes\next\layout\_macro目录下新建post-end-tag.swig内容如下 12345&lt;div style="text-align:center;color: #ccc;font-size:14px;margin:10px 0"&gt; -------------本文结束 &lt;i class="fa fa-space-shuttle"&gt;&lt;/i&gt; 感谢您的阅读-------------&lt;/div&gt; 然后编辑同目录下的post.swig文件在&lt;footer class=&quot;post-footer&quot;&gt;之前插入 12345&#123;% if theme.post_end_tag.enable and not is_index %&#125; &lt;div&gt; &#123;% include 'post-end-tag.swig' %&#125; &lt;/div&gt;&#123;% endif %&#125; 最后在主题配置文件中增加配置项 12post_end_tag: enabled: true 总结三天的时候终于将博客搭建起来了。虽然大部分内容都是照着网上的内容做的，自己也没有学到太多的知识。但是整体的效果我还是非常满意的。从无到有，还了解了Hexo、Next还查了一些Swig、Yaml的资料也算有收获。博客就不再花时间折腾了。下一步还是抓紧确认要学习的技术，并开始深度学习。加油！！！！！！！！！！！！！！ 参考连接 hexo的next主题个性化教程 hexo高阶教程 Hexo之NexT主题配置]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Next主题配置第三方服务集成]]></title>
    <url>%2F2017%2F09%2F05%2FNext%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E7%AC%AC%E4%B8%89%E6%96%B9%E6%9C%8D%E5%8A%A1%E9%9B%86%E6%88%90%2F</url>
    <content type="text"><![CDATA[前言上一篇文章我们已经成功的将博客搭建起来。本文将对主题的相关配置以及第三方服务的集成做进一步的介绍。其实Next的文档，已经将配置与服务集成介绍的非常明白。有兴趣的同学可以去查看官方文档,本文将重点介绍本人BLOG使用的第三方服务 。 主题配置 主要的配置文件有两个 站点配置文件：根目录下面的_config.yml文件 主题配置文件：主题根目录下的_config.yml文件 站点信息站点信息存放在站点配置文件文件中。 123456title: QuZheng #主标题subtitle: #副标题description: #描述author: QuZheng #作者language: zh-Hans #语言timezone: Next目前支持的语言 语言 代码 示例 English en language: en 简体中文 zh-Hans language: zh-Hans Français fr-FR language: fr-FR Português pt language: pt or language: pt-BR 繁體中文 zh-hk 或者 zh-tw language: zh-hk Русский язык ru language: ru Deutsch de language: de 日本語 ja language: ja Indonesian id language: id Korean ko language: ko 如果想将自己的网站设置为多语言版本可参考如下设置 123language:- zh-Hans- en 菜单博客的菜单的功能菜单是可以自定义的。菜单的配置在主题配置文件件中。 12345678menu: home: / #首页 categories: /categories/ #分类 about: /about/ #关于 archives: /archives/ #归档 tags: /tags/ #标签 #sitemap: /sitemap.xml #commonweal: /404/ 系统初始时，只有home、archives、tags，其它菜单需要手动将注释去掉。并增加相应的页面。 tags页面添加执行下面命令 1hexo n page tags 打开source\tags目录下的index.md,添加 type参数 12345---title: tagsdate: 2017-09-04 20:14:29type: "tags"--- categories页面添加执行命令 1hexo n page categories 打开source\categories目录下的index.md,添加 type参数 12345---title: tagsdate: 2017-09-04 20:14:29type: "categories"--- about页面添加执行命令 1hexo n page about 菜单图标menu_icons配置结点可以设置菜单是否带图标。图标使用的FontAwesome字体 1234567891011menu_icons: enable: true #KeyMapsToMenuItemKey: NameOfTheIconFromFontAwesome home: home about: user categories: th schedule: calendar tags: tags archives: archive sitemap: sitemap commonweal: heartbeat 风格Next 提供了三种风格供选择 123scheme: Muse#scheme: Mist#scheme: Pisces 版权信息版本信息默认是关闭的，可以通过设置enable来打开版本信息。 12345# Declare license on postspost_copyright: enable: true license: CC BY-NC-SA 3.0 license_url: https://creativecommons.org/licenses/by-nc-sa/3.0/ 插件安装百度统计注册百度统计账号 在网站列表中新增网站，填写信息保存后。点击获取代码。将hm.js?后面的ID复制到主题配置文件中 12# Baidu Analytics IDbaidu_analytics: 59*************** 保存完毕后，可以执行命令，重新生成发布。 1hexo g -d 发布成功后，可以到百度统计点击首页代码状态进行测试，测试成功会提示代码安装正确。 Local Search搜索1 在根目前安装 hexo-generator-searchdb,安装时要使用管理员权限运行命令行工具，切记!!!!! 1npm install hexo-generator-searchdb --save 2 编辑站点配置文件，添加 12345search: path: search.xml field: post format: html limit: 10000 3 编辑主题配置文件,启用本地搜索功能： 123# Local searchlocal_search: enable: true 百度分享百度分享需要修改两个地方,这个地方不要按Next官网的教程来，官网的教程有问题。 网站配置文件任意位置 添加 1baidushare: true 主题配置文件 12baidushare: type: button 配置成功后重新生成文件就可以了，但是发布到github后发现分享不显示。百度后了解是因为百度分享不支持https,参考这两篇文章搞定该问题 百度分享不支持https的解决方案 Hexo+Github搭建个人博客(三) Gitment 文章评论添加文章的评论模块，官网提供的几个都得翻墙才能使用。国内的多说、网易云都停止服务了。最终作者选择了Gitment添加评论支持。添加的具体过程参考为 hexo NexT 添加 Gitment 评论插件Gitment：使用 GitHub Issues 搭建评论系统作者花了大概二个小时才将评论模块搭建好。。多参考第一篇文章就可以了，主要是作者对Hexo还不太了解。 打赏功能1 设置主题配置文件 123reward_comment: 坚持原创技术分享，您的支持将鼓励我继续创作wechatpay: /images/wechatpay.jpgalipay: /images/alipay.png 2 制作支付图片并上传到主题目录next\source\images文件夹中 3 修改打赏文字，我下载的主题默认的文字是英文的，修改主题目录中的next\layout_macro\reward.swig 文件 123456789101112131415161718192021222324252627282930&lt;div style="padding: 10px 0; margin: 20px auto; width: 90%; text-align: center;"&gt; &lt;div&gt;&#123;&#123; theme.reward_comment &#125;&#125;&lt;/div&gt; &lt;button id="rewardButton" disable="enable" onclick="var qr = document.getElementById('QR'); if (qr.style.display === 'none') &#123;qr.style.display='block';&#125; else &#123;qr.style.display='none'&#125;"&gt; &lt;span&gt;赏&lt;/span&gt; &lt;/button&gt; &lt;div id="QR" style="display: none;"&gt; &#123;% if theme.wechatpay %&#125; &lt;div id="wechat" style="display: inline-block"&gt; &lt;img id="wechat_qr" src="&#123;&#123; theme.wechatpay &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; WeChat Pay"/&gt; &lt;p&gt;微信打赏&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.alipay %&#125; &lt;div id="alipay" style="display: inline-block"&gt; &lt;img id="alipay_qr" src="&#123;&#123; theme.alipay &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; Alipay"/&gt; &lt;p&gt;支付宝打赏&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &#123;% if theme.bitcoin %&#125; &lt;div id="bitcoin" style="display: inline-block"&gt; &lt;img id="bitcoin_qr" src="&#123;&#123; theme.bitcoin &#125;&#125;" alt="&#123;&#123; theme.author &#125;&#125; Bitcoin"/&gt; &lt;p&gt;Bitcoin&lt;/p&gt; &lt;/div&gt; &#123;% endif %&#125; &lt;/div&gt;&lt;/div&gt; 404在主题目录themes\next\source中创建404.html 内容如下 123456789101112131415161718&lt;!DOCTYPE HTML&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv="content-type" content="text/html;charset=utf-8;"/&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" /&gt; &lt;meta name="robots" content="all" /&gt; &lt;meta name="robots" content="index,follow"/&gt; &lt;link rel="stylesheet" type="text/css" href="https://qzone.qq.com/gy/404/style/404style.css"&gt;&lt;/head&gt;&lt;body&gt;&lt;script type="text/plain" src="http://www.qq.com/404/search_children.js" charset="utf-8" homePageUrl="/" homePageName="返回博客主页"&gt;&lt;/script&gt;&lt;script src="https://qzone.qq.com/gy/404/data.js" charset="utf-8"&gt;&lt;/script&gt;&lt;script src="https://qzone.qq.com/gy/404/page.js" charset="utf-8"&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 总结折腾了整整一天才将上文的内容搞定，感觉非常的满足。看了一些大神的博客，绝定在对自己的博客进行美化。美化完毕后就不在折腾了。进入技术学习阶段，具体学什么还没想好。但感觉非常好，希望可以一致持续下去。 参考链接 Next 官方文档 hexo文章添加版权声明及一些特效 使用七牛为Hexo存储图片 npm install 安装软件，出现 operation not permitted, mkdir https://www.tiexo.cn/gitment/ https://imsun.net/posts/gitment-introduction/]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[GitHub-Hexo-NEXT-博客搭建日记]]></title>
    <url>%2F2017%2F09%2F04%2FGitHub-Hexo-NEXT-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[00 前言 今年已经三十了，从事程序开发工作也已经10年了。这10年在技术上可以说一直在原地踏步。主要使用的语言.NET也还维持在.NET2.0的水平。刚参加 工作时还感觉自己挺牛的，到现在感觉自己很渺小。我也一直想学习新的技术，但都从入门到放弃了。这次搭建这个博客就是希望能通过写博客的方式让自己的技术水平能有所提高，逼自己在努力一把。 01 软件安装GIT安装下载 git for Windows,安装过程非常简单。 NODE安装下载NODE,我安装的是CURRENT版本,安装过程非常简单。 02 创建GITHUB项目，配置GIT环境注册账号账号注册非常简单 注册地址 创建Repository创建与自己GITHUB账号同名的Repository比如账号是qzdotnet,新建的Repository名称应该是qzdotnet.github.io。 配置SSH生成SSH检查是否已经有SSH Key，打开Git Bash,输入 1cd ~/.ssh 如果没有找到这个目录就需要使用 1ssh-keygen -t rsa -C &quot;e-mail&quot; 输入该命令以后一路回车。 配置Github公钥本人是在Windows7环境下安装的所以成生的文件在目录C:\Users\Administrator.WIN7-1704221339.ssh 下使用文本编辑器打开id_rsa.pub文件，复制 文件里的全部内容。 登录GitHub，点击右上角的角户图标，选择settings菜单。点击左侧的SSH and GPG keys 菜单，点击New SSH key按钮。将复制的 内容粘贴到KEY输入框中。Title 可以随意设置。设置完毕 后点 Add SSH key按钮。保存设置。 这里要注意，SSH key保存不是立即生效的，可以等待3到5分钟。我测试的时候大概三分钟生效的。 测试SSH是否正确配置打开Git Bash 输入 123ssh -t git@github.com 如果提示,说明配置成功了。 12Hi username! You&apos;ve successfully authenticated, but GitHub does notprovide shell access. 如果提示IP之类的错误将下面代码复制 到HOST文件中 1192.30.255.113 github.com 配置Git全局参数12git config --global user.name &quot;username&quot;git config --global user.email &quot;email&quot; 配置完成后可以通过1git config --list查看配置 03 安装 Hexo安装Hexo打开Node.js命令行工具，输入 123npm install -g hexo-cli 完成Hexo的全局安装。 创建Hexo站点选择一个本地文件夹做为站点的根目录。如F:\qzdotnet，输入 123456789hexo init f:\qzdotnetcd f:\qzdotnetf:npm install npm install hexo-deployer-git 完成对hexo的安装 输入 1hexo s 如果部署没有问题，网站就已经启动了。可以使用http://localhost:4000进行访问 配置Git账户打开 f:\qzdotnet文件夹下面的_config.yml文件配置deploy: 结点的内容 1234deploy: type: git repo: git@github.com:qzdotnet/qzdotnet.github.io branch: master 注意yml配置文件配置节点:后面要添加空格。 04 配置Next 主题下载Next本人下载的是v5.1.2稳定版本的压缩包，当然也可以从GitHub克隆最新版， 下载后可以将文件解压缩并将文件名修改成Next，复制到 f:\qzdotnet的themes文件夹中。 配置主题打开 f:\qzdotnet文件夹下的_config.yml文件，修改theme结点 1theme: next 05 发布到GitHub创建文章在Git Bash中输入 1hexo new &quot;Hello World!&quot; 添加一篇新的博文。 发布到GitHub输入完成发布 1hexo g -d 发布成功后可以打开https://qzdotnet.github.io/查看已经的博客了。到此博客搭建就已经顺利完成了。后面的文章会对Hexo与Next的相关配置和功能使用做一些介绍 99 参考链接 Github+Hexo+NEXT主题+域名绑定 博客搭建全记录 Hexo官网 NexT使用文档]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Hexo</tag>
        <tag>Next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F08%2F30%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
