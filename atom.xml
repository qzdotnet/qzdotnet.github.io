<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>QuZheng</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://qzdotnet.github.io/"/>
  <updated>2019-12-07T09:46:23.447Z</updated>
  <id>http://qzdotnet.github.io/</id>
  
  <author>
    <name>QuZheng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ASP.NET 集成 Auth2</title>
    <link href="http://qzdotnet.github.io/2019/12/07/ASP-NET-%E9%9B%86%E6%88%90-Auth2/"/>
    <id>http://qzdotnet.github.io/2019/12/07/ASP-NET-集成-Auth2/</id>
    <published>2019-12-07T09:22:45.000Z</published>
    <updated>2019-12-07T09:46:23.447Z</updated>
    
    <content type="html"><![CDATA[<p>​       由于我们公司的技术比较落后，目前开发的所有给移动端以及 Web 端，使用的 WebAPI 接口都没有身份验证。安全性比较差。由于我们公司的客户都是传统企业的客户所以刚开始也没啥问题。但是，最近一段时间我们的系统老是别人各种攻击。所以想把这个问题解决了。</p><p>​       我很早以前就了解 OAuth 协议，但也只是了解。知道一些基本的概念。也接触过其他公司的一些开放接口基本上都是基于 <code>Token</code>的所以就打算找找 asp.net 下面有没有开源的省事的解决方案。</p><p>​       很快我发现了 <code>Owin</code> 这个东西以前都没听说过，从网上找了几个代码基本上都是基于他的而且非常简单就可以实现我想要的效果，让人洗出往外。搞了一个测试项目通过了以后就想了解了解 <code>Owin</code> 这个项目。</p><ul><li><a href="https://www.cnblogs.com/xiaobai123/p/9348074.html" target="_blank" rel="external"><a href="https://www.cnblogs.com/xiaobai123/p/9348074.html" target="_blank" rel="external">ASP.NET  OAuth 2.0 新手上路</a></a></li></ul><p>​      搜了一些文章大概知道 Owin 是一套标准规范。解决的主要问题就是让 Asp.Net 可以不依赖 IIS。当然还有一套非常牛逼的逻辑在里面，但是我没看懂。后来我又翻看了几篇文章，发现<code>OAuth</code>现在又更好的实现了 <code>IdentityServer3</code>,这个是基于 Owin 的但是好像是更牛逼。最新版本是4，但是只能运行在 .net core 下，所以过段放弃4使用3。</p><p>​     这个东西官方也有很多例子可以参考，网上也找了一些文章，基本上都是基于官方DEMO的。最后贴一些今天一下午找的一些比较优秀的文章。</p><ul><li><p><a href="https://www.cnblogs.com/Irving/p/5707215.html" target="_blank" rel="external">基于 IdentityServer3 实现 OAuth 2.0 授权服务【客户端模式(Client Credentials Grant)】</a></p></li><li><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="external">理解OAuth 2.0</a></p></li><li><p><a href="https://www.cnblogs.com/redmoon/p/4448968.html" target="_blank" rel="external">一个功能完备的.NET开源OpenID Connect/OAuth 2.0框架——IdentityServer3</a></p></li><li><p><a href="https://www.cnblogs.com/Irving/p/5220578.html" target="_blank" rel="external">基于OWIN WebAPI 使用OAUTH2授权服务【授权码模式(Authorization Code)】</a></p></li><li><p><a href="https://www.cnblogs.com/GuZhenYin/p/5201388.html" target="_blank" rel="external">OWIN与Katana详解</a></p></li><li><p><a href="https://www.cnblogs.com/xishuai/p/aspnet-webapi-owin-oauth2.html" target="_blank" rel="external">ASP.NET WebApi OWIN 实现 OAuth 2.0</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​       由于我们公司的技术比较落后，目前开发的所有给移动端以及 Web 端，使用的 WebAPI 接口都没有身份验证。安全性比较差。由于我们公司的客户都是传统企业的客户所以刚开始也没啥问题。但是，最近一段时间我们的系统老是别人各种攻击。所以想把这个问题解决了。&lt;/p
      
    
    </summary>
    
      <category term="Asp.net" scheme="http://qzdotnet.github.io/categories/Asp-net/"/>
    
    
      <category term="Auth2" scheme="http://qzdotnet.github.io/tags/Auth2/"/>
    
      <category term="Owin" scheme="http://qzdotnet.github.io/tags/Owin/"/>
    
  </entry>
  
  <entry>
    <title>UrBackup  备份软件使用</title>
    <link href="http://qzdotnet.github.io/2019/12/07/UrBackup%20%20%E8%BD%AF%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>http://qzdotnet.github.io/2019/12/07/UrBackup  软件使用/</id>
    <published>2019-12-07T01:30:06.000Z</published>
    <updated>2019-12-07T09:19:11.230Z</updated>
    
    <content type="html"><![CDATA[<p>UrBackup 是一款跨平台 客户端/服务器 (C / S架构 ) 的<a href="https://github.com/uroni/urbackup_backend" target="_blank" rel="external">开源</a>跨平台备份系统。公司客户之前也有异地备份数据的需求，但是我们的做法都是让客户在局域网内增加一台服务器，共享某一个目录，然后在需要备份的电脑上写一个批处理文件进行文件备份。在头条看到这款开源软件后，便想下载下来使用下。</p><h2 id="软件的下载安装"><a href="#软件的下载安装" class="headerlink" title="软件的下载安装"></a>软件的下载安装</h2><p>我是在官方网站下载的服务器和客户端的WINDOWS系统的<a href="http://www.urbackup.org/" target="_blank" rel="external">安装包</a>，下载的时候不要选只支持X64位的，我第一下载的文件没有安装成功。我下载的软件版本如下</p><ul><li><p>服务端：<a href="http://hndl.urbackup.org/Server/2.3.8/UrBackup%20Server%202.3.8.exe" target="_blank" rel="external">URKBACK SERVER 2.3.8</a></p></li><li><p>客户端：<a href="http://hndl.urbackup.org/Client/2.3.4/UrBackup%20Client%202.3.4.exe" target="_blank" rel="external">UrBackUp Client 2.3.4</a></p></li></ul><p>安装过程比较顺利没有出现任何问题。</p><h2 id="软件配置"><a href="#软件配置" class="headerlink" title="软件配置"></a>软件配置</h2><p>服务器安装完毕后，在浏览器中输入<a href="http://127.0.0.1:55414/" target="_blank" rel="external">http://127.0.0.1:55414/</a> 就可以打开服务器软件。在设置中配置服务器备份文件路径。配置完毕后，需要在设置文件的权限为可读写。</p><p>客户端安装完毕后，软件后在系统托盘中出现。，需要在互联网选项卡配置主机名和端口号，因为我用的默认的端口号所以只需要配置IP地址就可以了。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560306282723.png" alt="1560306282723"></p><ul><li><p>配置文件备份的路径 在增加删除备份路径功能中可以添加，删除需要备份的文件夹路径。</p></li><li><p>配置 windows 组件，可以配置需要备份的组件，说实话我也没明白这个是干啥的。但是这个里面有一个比较强大的功能是 SqlServerWriter 目录下面，有本机安装的数据库的所有文件。选择这个目录后，可以自动备份所有的数据库。</p></li></ul><h2 id="文件备份"><a href="#文件备份" class="headerlink" title="文件备份"></a>文件备份</h2><p>在客户端中点击执行完整备份就可以立刻执行备份操作了。客户端执行备份后，在服务端可以看到备份的情况以及备份日志。</p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560306713742.png" alt="1560306713742"></p><p><img src="C:\Users\Administrator\AppData\Roaming\Typora\typora-user-images\1560306725442.png" alt="1560306725442"></p><p>我测试了一下38个G 的文件百兆局域网1个半小时备份完成， 效率也非常不错了。</p><h2 id="几个问题"><a href="#几个问题" class="headerlink" title="几个问题"></a>几个问题</h2><p>这个备份工具本身功能感觉已经非常不错了但是在使用过程中感觉还是有一些小的缺陷。</p><ol><li>客户端备份时间设定不灵活，目前软件只能是指每隔多长时间执行一次备份，不能设置定具体的备份时间。</li><li>软件的易用性有点差，备份工作一旦开始无法停止。我尝试了各种办法，在服务端点停止，在客户端点停止不了。。</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这款软件已经是一款非常NB的免费开源备份软件了。基本能够满足我们的备份要求。使用中出现了一些问题，可能也都是由于我操作不当引起的。还是想大家推荐一下这款软件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;UrBackup 是一款跨平台 客户端/服务器 (C / S架构 ) 的&lt;a href=&quot;https://github.com/uroni/urbackup_backend&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开源&lt;/a&gt;跨平台备份系统。公司客户
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次客户网站变更过程</title>
    <link href="http://qzdotnet.github.io/2019/06/04/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%AE%A2%E6%88%B7%E7%BD%91%E7%AB%99%E5%8F%98%E6%9B%B4%E8%BF%87%E7%A8%8B/"/>
    <id>http://qzdotnet.github.io/2019/06/04/记一次客户网站变更过程/</id>
    <published>2019-06-04T01:30:06.000Z</published>
    <updated>2019-06-04T05:51:55.348Z</updated>
    
    <content type="html"><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>公司10年前给一事业单位使用asp.net 搭建了网站。最近事业单位上云，要求将公司之前做的网站也上云，但是在上云的安全检测中扫描出了100多个漏洞。。云中心要求解决这些漏洞后才能上云，但是由于公司离职人员过于频繁，管理漏洞大，网站的源代码已经找不到了。客户要求1周内必须解决问题。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>看了云中心提供的测试报告由于老网站使用asp.net web from 的方式，所以页面大量的 ViewState 。被标记为有风险要求加密还有一些问题必须通过修改源代码 。但是源代码不存在啊。。也不要好跟客户要钱了，毕竟自己软件的问题。现在需要一个最低成本解决问题的方案。还要解决所有的问题。</p><p>很明显啊CMS大法好啊，之前用过很多 ASP 和 PHP 的CMS，但是公司的人主要是用.NET 做开发了，所以还是选择了 .Net 的  <code>SitServer CMS</code> ,感觉功能还可以主要能满足我这个项目的需求（PS,和那些PHP的CMS比功能还有差距）。</p><h2 id="动起来"><a href="#动起来" class="headerlink" title="动起来"></a>动起来</h2><h3 id="SiteServer-CMS-学习"><a href="#SiteServer-CMS-学习" class="headerlink" title="SiteServer CMS 学习"></a><code>SiteServer CMS</code> 学习</h3><p><code>SiteServer CMS</code> 的 <a href="https://www.siteserver.cn/docs/" target="_blank" rel="external">文档中心</a> 还是不错了，从软件的安装部署 到标签语言的使用、插件的使用等等都算比较全面。但是，缺少一个从零教学的文章，零基础的用户很难通过文档把网站做起来。还好我不是零基础。</p><h3 id="网站搭建"><a href="#网站搭建" class="headerlink" title="网站搭建"></a>网站搭建</h3><p>简单看了看文档以后，就做起来了，做的时候还算比较顺利，基本上没遇到什么问题。<code>SiteServer CMS</code>模板中心有好多模板参考，做不出来了就参考官方的模板，用了2天时间把网站 搭建起来。</p><h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>之前网站用了10年，新闻数量巨大。刚开始我还一篇一篇的从老网站复制内容到新网站，复制了大概100多篇以后。我发现老网站的一个栏目居然有200多条新闻，我录入100条用了半天时间，这两百条得要了我的老命啊。</p><p><strong>采集</strong></p><p>咋办呢，自己写程序抓网页迁移数据太麻烦,坚持拿来主义的原则,用第三方软件，火车头采集器。简单了解了火车头的采集过程和设置后就开动了。采集的过程中遇到一个问题，之前网站的分页使用的 aspnetpager 的 POST 提交，所以不太好采集。百度了一些文章以后，还是不会。使用了一个笨办法，把列表中的每一页另存到本地，命名按照页面的分页序号命名。从本地 IIS 搭建网站，将另存为的页面文件夹配置为网站文件夹。采集软件的采集地址也切换到本地 IIS ，采集过程顺利完成。</p><p><strong>数据迁移</strong></p><p>使用的采集软件是免费版本的不支持 SqlServer 的数据库发布。分析后发现 火车头使用的是  Sqllite 数据库。从网上下载了 SqlLiteManager 将数据存储成了 SQL脚本。将脚本在 SqlServer 中执行。然后使用 insert into select 语句将数据导入到新闻内容表中。由于客户的新闻中图片和附件较少，所以新闻中的图片和附件我也就没在处理了。</p><h3 id="复检"><a href="#复检" class="headerlink" title="复检"></a>复检</h3><p>网站搭建完毕后让云中心的人进行了复检，云中心的人发现没有问题。要求将后台的账号密码提供给他们，他们要扫描后台。不得不说 SiteServer 做的还是不错的，顺利通过了云中心的审查，并且云中心要求的强密码策略，系统也是默认支持的。这里给 SiteServer 点个赞。最终顺利通过了云中心的检测，网站可以顺利上线。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>此次事件从开始到结束一共经历了7天时间，从刚开始的浇头烂额到最终拨云见日，回头想想其实并么有什么复杂的。技术人员不能给自己设限，这个完不成，根本不可能这些话尽量不要说，还是要多思考，多百度。我们经历的问题很多人都经历过。乐观面对工作，996燥起来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;起因&quot;&gt;&lt;a href=&quot;#起因&quot; class=&quot;headerlink&quot; title=&quot;起因&quot;&gt;&lt;/a&gt;起因&lt;/h2&gt;&lt;p&gt;公司10年前给一事业单位使用asp.net 搭建了网站。最近事业单位上云，要求将公司之前做的网站也上云，但是在上云的安全检测中扫描出了100
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git 常用命令总结</title>
    <link href="http://qzdotnet.github.io/2019/03/25/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%80%BB%E7%BB%93/"/>
    <id>http://qzdotnet.github.io/2019/03/25/git-常用命令总结/</id>
    <published>2019-03-25T06:41:30.000Z</published>
    <updated>2019-03-25T06:43:14.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-init-创建项目"><a href="#git-init-创建项目" class="headerlink" title="git init 创建项目"></a><code>git init</code> 创建项目</h2><p><code>git init</code> 可以将将目录初始化为 git 项目目录</p><h2 id="git-clone-克隆项目"><a href="#git-clone-克隆项目" class="headerlink" title="git clone 克隆项目"></a><code>git clone</code> 克隆项目</h2><p>使用 <code>git clone</code> 可以拷贝一个 git 仓库到本地。 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> [url]</div></pre></td></tr></table></figure><h2 id="git-add-修改提交到缓冲区"><a href="#git-add-修改提交到缓冲区" class="headerlink" title="git add 修改提交到缓冲区"></a><code>git add</code> 修改提交到缓冲区</h2><p>使用 <code>git add</code> 命令可以将新添加的文件添加到暂存区。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git  add [文件名列表]</div></pre></td></tr></table></figure><p>使用 <code>git add .</code> 命令可以将工作区的修改都添加到暂存区里。</p><h2 id="git-pull-获取最新版本代码"><a href="#git-pull-获取最新版本代码" class="headerlink" title="git pull 获取最新版本代码"></a><code>git pull</code> 获取最新版本代码</h2><p>我们可以使用 <code>git pull</code> 命令获取当前分支的最新版本。</p><h2 id="git-checkout-命令"><a href="#git-checkout-命令" class="headerlink" title="git checkout 命令"></a><code>git checkout</code> 命令</h2><p>创建新的分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b [分支名称]</div></pre></td></tr></table></figure><p>切换分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [分支名称]</div></pre></td></tr></table></figure><p>撤销某个文件的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout [文件名]</div></pre></td></tr></table></figure><p>撤销所有的修改</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout .</div></pre></td></tr></table></figure><h2 id="git-commit-提交命令"><a href="#git-commit-提交命令" class="headerlink" title="git commit 提交命令"></a><code>git commit</code> 提交命令</h2><p>提交代码，将暂存区的代码提交到仓库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"说明"</span></div></pre></td></tr></table></figure><h2 id="git-push-命令"><a href="#git-push-命令" class="headerlink" title="git push 命令"></a><code>git push</code> 命令</h2><p>提交本地分支的修改到远端仓库的分支中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push [主机名] [分支名]</div></pre></td></tr></table></figure><h2 id="git-merge-合并分支"><a href="#git-merge-合并分支" class="headerlink" title="git merge 合并分支"></a>git merge 合并分支</h2><p>将分支的内容合并到其他的分支中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge [分支名]</div></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">gitpro 中文</a></li><li>朋友虎子现场教学</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;git-init-创建项目&quot;&gt;&lt;a href=&quot;#git-init-创建项目&quot; class=&quot;headerlink&quot; title=&quot;git init 创建项目&quot;&gt;&lt;/a&gt;&lt;code&gt;git init&lt;/code&gt; 创建项目&lt;/h2&gt;&lt;p&gt;&lt;code&gt;git ini
      
    
    </summary>
    
    
      <category term="git" scheme="http://qzdotnet.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>使用 Fiddler 获取微信公众号的HTML源码</title>
    <link href="http://qzdotnet.github.io/2018/05/25/%E4%BD%BF%E7%94%A8-Fiddler-%E8%8E%B7%E5%8F%96%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E7%9A%84HTML%E6%BA%90%E7%A0%81/"/>
    <id>http://qzdotnet.github.io/2018/05/25/使用-Fiddler-获取微信公众号的HTML源码/</id>
    <published>2018-05-25T07:48:50.000Z</published>
    <updated>2018-05-25T07:48:50.884Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于 CentOS 搭建 KODExplorer 服务</title>
    <link href="http://qzdotnet.github.io/2017/11/28/%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-KODExplorer-%E6%9C%8D%E5%8A%A1/"/>
    <id>http://qzdotnet.github.io/2017/11/28/基于-CentOS-搭建-KODExplorer-服务/</id>
    <published>2017-11-28T07:22:05.000Z</published>
    <updated>2017-11-28T07:23:48.368Z</updated>
    
    <content type="html"><![CDATA[<h2 id="部署-XAMPP-服务"><a href="#部署-XAMPP-服务" class="headerlink" title="部署 XAMPP 服务"></a>部署 XAMPP 服务</h2><h3 id="下载-XAMPP"><a href="#下载-XAMPP" class="headerlink" title="下载 XAMPP"></a>下载 XAMPP</h3><p>XAMPP 是个集成了多个组件的开发环境 ，我们通过  <code>wget</code> 命令获取其安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://www.apachefriends.org/xampp-files/7.1.10/xampp-linux-x64-7.1.10-0-installer.run</div></pre></td></tr></table></figure><a id="more"></a><h2 id="安装-XAMMP"><a href="#安装-XAMMP" class="headerlink" title="安装 XAMMP"></a>安装 XAMMP</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">chmod a+x xampp-linux-x64-7.1.10-0-installer.run</div><div class="line">./xampp-linux-x64-7.1.10-0-installer.run</div></pre></td></tr></table></figure><p>询问是否继续安装时，输入 <code>Y</code> 后按回车继续安装。</p><h2 id="启动-XAMMP"><a href="#启动-XAMMP" class="headerlink" title="启动 XAMMP"></a>启动 XAMMP</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/opt/lampp/lampp start</div></pre></td></tr></table></figure><h2 id="部署可道云-KODExplorer"><a href="#部署可道云-KODExplorer" class="headerlink" title="部署可道云 KODExplorer"></a>部署可道云 KODExplorer</h2><p>开源的云服务有好多，而可道云 KODExplorer 是目前国内有代表性、美观易用性好的私有云软件，用户可以通过远程网页，手机来访问，非常方便。</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><p>KODExplorer 需要通过 git 下载，我们需要先安装 Git</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install git</div></pre></td></tr></table></figure><h3 id="下载-KODExplorer"><a href="#下载-KODExplorer" class="headerlink" title="下载 KODExplorer"></a>下载 KODExplorer</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/kalcaddle/KODExplorer.git</div></pre></td></tr></table></figure><h3 id="移动-KODExplorer"><a href="#移动-KODExplorer" class="headerlink" title="移动 KODExplorer"></a>移动 KODExplorer</h3><p>本实验希望能够通过 <code>http//111.230.5.61/KODExplorer</code> 来访问云服务，所以需要把下载到的 KODExplorer 移动到之前下载的 LAMPP 相应目录下，一般来说是 <code>/opt/lampp/htdocs</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv KODExplorer /opt/lampp/htdocs/ &amp; cd /opt/lampp/htdocs/</div></pre></td></tr></table></figure><p>然后要给这个目录添加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chmod -Rf 777 ./KODExplorer/*</div></pre></td></tr></table></figure><h3 id="使用-KODExplorer"><a href="#使用-KODExplorer" class="headerlink" title="使用 KODExplorer"></a>使用 KODExplorer</h3><p>现在，在任意客户端访问 <a href="">http://127.0.0.1/KODExplorer</a> 就可以使用部署的云服务了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>记得之前部署过 <strong>Seafile</strong> ，感觉 KOD 界面更加简单操作起来非常的舒服 。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;部署-XAMPP-服务&quot;&gt;&lt;a href=&quot;#部署-XAMPP-服务&quot; class=&quot;headerlink&quot; title=&quot;部署 XAMPP 服务&quot;&gt;&lt;/a&gt;部署 XAMPP 服务&lt;/h2&gt;&lt;h3 id=&quot;下载-XAMPP&quot;&gt;&lt;a href=&quot;#下载-XAMPP&quot; class=&quot;headerlink&quot; title=&quot;下载 XAMPP&quot;&gt;&lt;/a&gt;下载 XAMPP&lt;/h3&gt;&lt;p&gt;XAMPP 是个集成了多个组件的开发环境 ，我们通过  &lt;code&gt;wget&lt;/code&gt; 命令获取其安装包&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https://www.apachefriends.org/xampp-files/7.1.10/xampp-linux-x64-7.1.10-0-installer.run&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="网盘" scheme="http://qzdotnet.github.io/tags/%E7%BD%91%E7%9B%98/"/>
    
      <category term="KODExplorer" scheme="http://qzdotnet.github.io/tags/KODExplorer/"/>
    
  </entry>
  
  <entry>
    <title>基于 Ubuntu 搭建 Django 站点</title>
    <link href="http://qzdotnet.github.io/2017/11/08/%E5%9F%BA%E4%BA%8E-Ubuntu-%E6%90%AD%E5%BB%BA-Django-%E7%AB%99%E7%82%B9/"/>
    <id>http://qzdotnet.github.io/2017/11/08/基于-Ubuntu-搭建-Django-站点/</id>
    <published>2017-11-08T01:21:07.000Z</published>
    <updated>2017-11-08T09:30:22.539Z</updated>
    
    <content type="html"><![CDATA[<p>Django 是一个用 Python 开发的开源 Web 应用框架，采用 MVC 模式。本实验带您搭建一个最简单的 Django 站点，并使用 uwsgi 和 nginx 作为 Web 服务器。</p><a id="more"></a><h2 id="安装-django"><a href="#安装-django" class="headerlink" title="安装 django"></a>安装 django</h2><h3 id="安装-pip"><a href="#安装-pip" class="headerlink" title="安装 pip"></a>安装 pip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt install python-pip -y</div></pre></td></tr></table></figure><h3 id="使用-pip-安装-django"><a href="#使用-pip-安装-django" class="headerlink" title="使用 pip 安装 django"></a>使用 pip 安装 django</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install django</div></pre></td></tr></table></figure><h2 id="创建-Hello-World-应用并启动-Web-服务器"><a href="#创建-Hello-World-应用并启动-Web-服务器" class="headerlink" title="创建 Hello World 应用并启动 Web 服务器"></a>创建 Hello World 应用并启动 Web 服务器</h2><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data</div><div class="line">sudo django-admin startproject helloworld</div></pre></td></tr></table></figure><p><em>定位到 /data/helloworld 目录</em></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>修改 /data/helloworld/helloworld/settings.py 文件权限为其它人可写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 666 /data/helowrold/helloworld/settings.py</div></pre></td></tr></table></figure><p><em>编辑 /data/helloworld/helloworld/settings.py</em></p><p>将 <code>ALLOWED_HOSTS =[]</code> 修改为 `ALLOWED_HOSTS =[“您的 CVM IP 地址”] ，这样可以允许通过 ip 访问</p><p>在实际运营中一般要改为对应的域名</p><h3 id="启动-django-自带的-Web-服务器"><a href="#启动-django-自带的-Web-服务器" class="headerlink" title="启动 django 自带的 Web 服务器"></a>启动 django 自带的 Web 服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd helloworld</div><div class="line">sudo python manage.py runserver 0.0.0.0:8000</div></pre></td></tr></table></figure><p>使用浏览器访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://&lt;IP 地址&gt;:8080/</div></pre></td></tr></table></figure><p>看到如下页面，表示 django 服务已经部署成功</p><p><img src="https://share-10039692.file.myqcloud.com/lab/282e65e37e/image/rdk9vo8wo2/QQ%E5%9B%BE%E7%89%8720171102141913.png" alt="image"></p><h2 id="创建简单的页面"><a href="#创建简单的页面" class="headerlink" title="创建简单的页面"></a>创建简单的页面</h2><h3 id="关闭-WEB-服务器"><a href="#关闭-WEB-服务器" class="headerlink" title="关闭 WEB 服务器"></a>关闭 WEB 服务器</h3><p>按 <code>Ctrl + C</code> 关闭 Web 服务器</p><h3 id="创建-views-py"><a href="#创建-views-py" class="headerlink" title="创建 views.py"></a>创建 views.py</h3><p>创建文件 /data/helloworld/helloworld/views.py ，并修改权限其它人可写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo touch /data/helloworld/helloworld/views.py</div><div class="line">sudo chmod 666 /data/helloworld/helloworld/views.py</div></pre></td></tr></table></figure><h3 id="添加视图函数"><a href="#添加视图函数" class="headerlink" title="添加视图函数"></a>添加视图函数</h3><p>编辑  <em>/data/helloworld/helloworld/views.py</em></p><p>添加内容如下,并保存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> django.http.response <span class="keyword">import</span> HttpResponse</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></div><div class="line">    user = request.GET.get(<span class="string">'user'</span>)</div><div class="line">    <span class="keyword">if</span> <span class="keyword">not</span> user: user = <span class="string">'world'</span></div><div class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">'hello %s'</span> % user)</div></pre></td></tr></table></figure><h3 id="修改-urls-py-文件权限"><a href="#修改-urls-py-文件权限" class="headerlink" title="修改 urls.py 文件权限"></a>修改 urls.py 文件权限</h3><p>修改 /data/helloworold/helloworold/urls.py 文件权限为其它人可写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo chmod 666 /data/helloworld/helloworld/urls.py</div></pre></td></tr></table></figure><h3 id="添加路由配置"><a href="#添加路由配置" class="headerlink" title="添加路由配置"></a>添加路由配置</h3><p><em>编辑 /data/helloworld/helloworld/urls.py</em></p><p>将</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">]</div></pre></td></tr></table></figure><p>修改为</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">import views</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(r'^admin/', admin.site.urls),</div><div class="line">    url(r'^hello', views.hello),</div><div class="line">]</div></pre></td></tr></table></figure><h3 id="测试-url-访问是否正常"><a href="#测试-url-访问是否正常" class="headerlink" title="测试 url 访问是否正常"></a>测试 url 访问是否正常</h3><p>再次启动 Web 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo python manage.py runserver 0.0.0.0:8080</div></pre></td></tr></table></figure><p>使用浏览器访问下面两个 url</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">http://&lt;IP 地址&gt;:8080/hello</div><div class="line">http://&lt;IP 地址&gt;:8080/hello?user=test</div></pre></td></tr></table></figure><h3 id="关闭-Web-服务器"><a href="#关闭-Web-服务器" class="headerlink" title="关闭 Web 服务器"></a>关闭 Web 服务器</h3><p>按 <code>Ctrl + C</code> 停止 Web 服务器</p><h2 id="部署-uwsgi-和-nginx"><a href="#部署-uwsgi-和-nginx" class="headerlink" title="部署 uwsgi 和 nginx"></a>部署 uwsgi 和 nginx</h2><h3 id="使用-pip-安装-uwsgi"><a href="#使用-pip-安装-uwsgi" class="headerlink" title="使用 pip 安装 uwsgi"></a>使用 pip 安装 uwsgi</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo pip install uwsgi</div></pre></td></tr></table></figure><h3 id="配置-uwsgi"><a href="#配置-uwsgi" class="headerlink" title="配置 uwsgi"></a>配置 uwsgi</h3><p>创建文件 <code>/data/helloworld/uwsgi.ini</code>,并修改权限为其它人可写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo touch /data/helloworld/uwsgi.ini</div><div class="line">sudo chmod 666 /data/helloworold/uwsgi.ini</div></pre></td></tr></table></figure><p>输入以下内容，并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">[uwsgi]</div><div class="line">chdir = /data/helloworld</div><div class="line">module = helloworld.wsgi</div><div class="line">socket = 127.0.0.1:8080</div><div class="line">master = true</div><div class="line">vhost = true</div><div class="line">no-site = true</div><div class="line">workers = 2</div><div class="line">reload-mercy = 10     </div><div class="line">vacuum = true</div><div class="line">max-requests = 1000   </div><div class="line">limit-as = 512</div><div class="line">buffer-size = 30000</div><div class="line">pidfile = /tmp/uwsgi.pid</div><div class="line">daemonize = /tmp/uwsgi.log</div></pre></td></tr></table></figure><h3 id="启动uwsgi"><a href="#启动uwsgi" class="headerlink" title="启动uwsgi"></a>启动uwsgi</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PYTHOONPATH=/usr/local/lib/python2.7/dist-packages</div><div class="line">uwsgi --ini /data/helloworold/uwsgi.ini</div></pre></td></tr></table></figure><h3 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install nginx -y</div></pre></td></tr></table></figure><h3 id="添加-nginx-配置文件"><a href="#添加-nginx-配置文件" class="headerlink" title="添加 nginx 配置文件"></a>添加 nginx 配置文件</h3><p>创建文件 /etc/nginx/sites-enabled/helloworld.conf ,并修改权限为其它人可写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo touch /etc/nginx/sites-enabled/helloworld.conf</div><div class="line">sudo chmod 666 /etc/nginx/sites-enabled/helloworld.conf</div></pre></td></tr></table></figure><p><em>编辑 /etc/nginx/sites-enabled/helloworld.conf</em></p><p>输入一下内容，并保存</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80;</div><div class="line">    server_name  &lt;您的 CVM IP 地址&gt;;</div><div class="line"></div><div class="line">    charset utf-8;</div><div class="line"></div><div class="line">    location / &#123;</div><div class="line">        uwsgi_pass 127.0.0.1:8080;</div><div class="line">        include /etc/nginx/uwsgi_params;</div><div class="line">        client_max_body_size      10m;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    client_body_timeout  3m;</div><div class="line">    send_timeout   3m;</div><div class="line">    proxy_send_timeout 3m;</div><div class="line">    proxy_read_timeout 3m;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="重启-nginx-服务"><a href="#重启-nginx-服务" class="headerlink" title="重启 nginx 服务"></a>重启 nginx 服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo systemctl restart nginx</div></pre></td></tr></table></figure><h2 id="测试-nginx-uwsgi-django-是否工作正常"><a href="#测试-nginx-uwsgi-django-是否工作正常" class="headerlink" title="测试 nginx + uwsgi + django 是否工作正常"></a>测试 nginx + uwsgi + django 是否工作正常</h2><h3 id="测试页面是否能够正常访问"><a href="#测试页面是否能够正常访问" class="headerlink" title="测试页面是否能够正常访问"></a>测试页面是否能够正常访问</h3><p>使用浏览器测试下面的 url 是否可以正常访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://&lt;您的IP 地址&gt;/hello</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Django 是一个用 Python 开发的开源 Web 应用框架，采用 MVC 模式。本实验带您搭建一个最简单的 Django 站点，并使用 uwsgi 和 nginx 作为 Web 服务器。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="Django" scheme="http://qzdotnet.github.io/tags/Django/"/>
    
      <category term="Python" scheme="http://qzdotnet.github.io/tags/Python/"/>
    
      <category term="Nginx" scheme="http://qzdotnet.github.io/tags/Nginx/"/>
    
      <category term="uwsgi" scheme="http://qzdotnet.github.io/tags/uwsgi/"/>
    
  </entry>
  
  <entry>
    <title>基于 CentOS 搭建 Ghost 博客</title>
    <link href="http://qzdotnet.github.io/2017/11/07/%E5%9F%BA%E4%BA%8E-CentOS-%E6%90%AD%E5%BB%BA-Ghost-%E5%8D%9A%E5%AE%A2/"/>
    <id>http://qzdotnet.github.io/2017/11/07/基于-CentOS-搭建-Ghost-博客/</id>
    <published>2017-11-07T08:09:16.000Z</published>
    <updated>2017-11-08T09:30:22.538Z</updated>
    
    <content type="html"><![CDATA[<p>Ghost 是一块非常出色的开源博客平台，界面简洁，专注写作。本教程中，您将学到如何在 CentOS 7 上安装 Ghost ，包括安装 Nodejs 环境以及配置 Nginx 对 Ghost 的代理请求等步骤。</p><h2 id="安装-Node-js-及相关包"><a href="#安装-Node-js-及相关包" class="headerlink" title="安装 Node.js 及相关包"></a>安装 Node.js 及相关包</h2><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><p>逐行输入下面的命令进行安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum update -y</div><div class="line">yum groupinstall -y "Development Tools"</div><div class="line">curl --silent --location https://rpm.nodesource.com/setup_6.x | sudo bash -</div><div class="line">yum -y install nodejs</div><div class="line"><span class="meta">#</span><span class="bash">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span></div><div class="line"><span class="meta">#</span><span class="bash">npm i -g cnpm</span></div><div class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</div></pre></td></tr></table></figure><p>安装成功后通过运行<code>node -v</code>及<code>npm -v</code> 出现版本号即可表示安装成功。</p><p>因为国内网络的关系，也同时安装了 <code>cnpm</code> 模块，后续将使用该命令代替 <code>npm</code> 命令。</p><h3 id="安装-Ghost-Client-ghost-cli"><a href="#安装-Ghost-Client-ghost-cli" class="headerlink" title="安装 Ghost Client (ghost-cli)"></a>安装 Ghost Client (ghost-cli)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cnmp i -g ghost-cli</div></pre></td></tr></table></figure><p>一般而言，安装成功后通过运行 <code>ghost -v</code>，出现版本号即可表示安装成功。但因为国内的网络问题，安装后请检查下终端的 log，如果有出现任意红色报错信息，则证明只有部分安装成功，需要重新执行命令安装。</p><p>如果不能正常安装请多次执行上面的命令</p><h2 id="安装-Ghost"><a href="#安装-Ghost" class="headerlink" title="安装 Ghost"></a>安装 Ghost</h2><h3 id="添加-Ghost-运行用户并创建目录"><a href="#添加-Ghost-运行用户并创建目录" class="headerlink" title="添加 Ghost 运行用户并创建目录"></a>添加 Ghost 运行用户并创建目录</h3><p>请按行依次输入下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">adduser ghost</div><div class="line">mkdir /var/www</div><div class="line">mkdir /var/www/ghost</div><div class="line">chown ghost /var/www/ghost</div></pre></td></tr></table></figure><h3 id="安装-Ghost-1"><a href="#安装-Ghost-1" class="headerlink" title="安装 Ghost"></a>安装 Ghost</h3><p>本教程以  SQLlite3 作为 Ghost 的数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /var/www/ghost</div><div class="line">ghost install local --db=sqlite3</div></pre></td></tr></table></figure><p>安装成功的截图：</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/u5apy6xpii/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.13.36.png" alt="image"></p><p>如果你安装后不是类似上面的截图，则证明 Ghost-cli 没有安装成功；请重复执行上一步的“安装 Ghost Client”步骤。</p><h3 id="启动Ghost"><a href="#启动Ghost" class="headerlink" title="启动Ghost"></a>启动Ghost</h3><p>安装成功后 Ghost 默认就已经启动了，下面的命令是分别是让 Ghost 停止、启动、重启命令，可尝试使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ghost stop</div><div class="line">ghost start</div><div class="line">ghost restart</div></pre></td></tr></table></figure><p>安装成功后默认是运行在<code>http://localhost:2368/</code>，如果需要对外访问，则需要通过 Nginx 进行反向代理。</p><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><h3 id="添加-Nginx-到-yum-源"><a href="#添加-Nginx-到-yum-源" class="headerlink" title="添加 Nginx 到 yum 源"></a>添加 Nginx 到 yum 源</h3><p>使用以下命令添加 CentOS 7 Nginx yum 资源库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</div></pre></td></tr></table></figure><h3 id="安装-Nginx-1"><a href="#安装-Nginx-1" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y nginx</div></pre></td></tr></table></figure><p>如无意外，Nginx 将完成安装在你的服务器中。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/3ogo5f1laj/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.18.14.png" alt="image"></p><h3 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h3><p>刚安装的 Nginx 不会自行启动，需要通过如下命令启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start nginx.service</div></pre></td></tr></table></figure><p>如果一切进展顺利的话，现在你可以通过你 IP( <code>http://123.207.15.141/</code> )来访问你的 Web 页面syste来预览一下 Nginx 的默认页面。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/6o42y8iz88/nginx_default.png" alt="image"></p><p>如果看到上面的页面,那么说明你的 CentOS 中的 Nginx 已经正确安装。</p><p>另外还可以通过<code>systemctl enable nginx.service</code>命令加入开机启动项。</p><h2 id="Nginx-配置反向代理"><a href="#Nginx-配置反向代理" class="headerlink" title="Nginx 配置反向代理"></a>Nginx 配置反向代理</h2><h3 id="修改-config-文件"><a href="#修改-config-文件" class="headerlink" title="修改 config 文件"></a>修改 config 文件</h3><p>请确保 Ghost 已经在运行阶段方可进行如下操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vi /etc/nginx/conf.d/default.conf</div></pre></td></tr></table></figure><p>运行上面的命令后，再键入 <code>i</code> 然后移动光标在约第七行修改相关文件代码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">:q</div><div class="line">location / &#123;</div><div class="line">        root   /usr/share/nginx/html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>改为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">location / &#123;</div><div class="line">        proxy_pass http://127.0.0.1:2368;</div><div class="line">        proxy_redirect default;</div><div class="line">        root   /usr/share/nginx/html;</div><div class="line">        index  index.html index.htm;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><p>完成后通过按 <code>ESC</code> ，随后输入 <code>:wq</code> 回车保存。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/s0dlunp1rj/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.25.22.png" alt="image"></p><p>然后运行 <code>nginx -s reload</code> 重启 Nginx。</p><h2 id="Ghost-的界面管理"><a href="#Ghost-的界面管理" class="headerlink" title="Ghost 的界面管理"></a>Ghost 的界面管理</h2><h3 id="首页"><a href="#首页" class="headerlink" title="首页"></a>首页</h3><p>完成了上面的步骤之后，访问 <code>http://123.207.15.141/</code> 就能看到 Ghost 的默认页面变成了如下：</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/c48zs6707k/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.05.07.png" alt="image"></p><h3 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h3><p>访问<code>http://123.207.15.141/ghost</code> 就可以继续相关写作设置了。</p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/64ljvkokmg/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.05.26.png" alt="image"></p><p><img src="https://share-10039692.file.myqcloud.com/lab/a890e0d326/image/pcelbs42nt/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-10-31%20%E4%B8%8B%E5%8D%885.34.39.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Ghost 是一块非常出色的开源博客平台，界面简洁，专注写作。本教程中，您将学到如何在 CentOS 7 上安装 Ghost ，包括安装 Nodejs 环境以及配置 Nginx 对 Ghost 的代理请求等步骤。&lt;/p&gt;
&lt;h2 id=&quot;安装-Node-js-及相关包&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>基于 CentOS 7 搭建 GitLab</title>
    <link href="http://qzdotnet.github.io/2017/11/07/%E5%9F%BA%E4%BA%8E-CentOS-7-%E6%90%AD%E5%BB%BA-GitLab/"/>
    <id>http://qzdotnet.github.io/2017/11/07/基于-CentOS-7-搭建-GitLab/</id>
    <published>2017-11-07T00:37:41.000Z</published>
    <updated>2017-11-08T09:30:22.538Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>在正式开始安装之前，先更新软件包并打开相关服务的权限。</p><h3 id="更新软件包"><a href="#更新软件包" class="headerlink" title="更新软件包"></a>更新软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -y</div></pre></td></tr></table></figure><h3 id="安装-sshd"><a href="#安装-sshd" class="headerlink" title="安装 sshd"></a>安装 sshd</h3><p>安装 sshd:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y curl policycoreutils-python openssh-server</div></pre></td></tr></table></figure><h3 id="配置防火墙"><a href="#配置防火墙" class="headerlink" title="配置防火墙"></a>配置防火墙</h3><p>打开 /etc/sysctl.conf 文件，在文件最后添加新的一行并保存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">net.ipv4.ip_forward = 1</div></pre></td></tr></table></figure><p>启动并启动防火墙</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable firewalld</div><div class="line">systemctl start firewalld</div></pre></td></tr></table></figure><p>放通 HTTP:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">firewall-cmd --permanent --add-service=http</div></pre></td></tr></table></figure><p>重启防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl reload firewalld</div></pre></td></tr></table></figure><p>在实际使用中，可以使用 <code>systemctl status firewalld</code> 命令查看防火墙的状态。</p><h3 id="安装-postfix"><a href="#安装-postfix" class="headerlink" title="安装 postfix"></a>安装 postfix</h3><p>GitLab 需要使用 postfix 来发送邮件。当然，也可以使用 SMTP 服务器。具体步骤请参考 <a href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="external">官方教程</a>。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y postfix</div></pre></td></tr></table></figure><p>打开v文件 , 在第 119 行附近找到 <code>inet_protocols = all</code> ，将 <code>all</code> 改为 <code>ipv4</code> 并保存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">inet_protocols = ipv4</div></pre></td></tr></table></figure><p>启用并启动 postfix:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable postfix</div><div class="line">systemctl start postfix</div></pre></td></tr></table></figure><h3 id="配置-swap-交换分区"><a href="#配置-swap-交换分区" class="headerlink" title="配置 swap 交换分区"></a>配置 swap 交换分区</h3><p>由于 GitLab 较为消耗资源，我们需要先创建交换分区，以降低物理内存的压力。<br>在实际生产环境中，如果服务器配置够高，则不必配置交换分区。</p><p>新建 2 GB 大小的交换分区：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dd if=/dev/zero of=/root/swapfile bs=1M count=2048</div></pre></td></tr></table></figure><p>格式化为交换分区文件并启用：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkswap /root/swapfile</div><div class="line">swapon /root/swapfile</div></pre></td></tr></table></figure><p>添加并启动，打开 /etc/fstab 文件,在文件最后添加新的一行并保存：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/root/swapfile swap swap defaults 0 0</div></pre></td></tr></table></figure><h2 id="安装-GitLab"><a href="#安装-GitLab" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h2><h3 id="将软件源修改为国内源"><a href="#将软件源修改为国内源" class="headerlink" title="将软件源修改为国内源"></a>将软件源修改为国内源</h3><p>由于网络环境的原因，将 repo 源修改为清华大学。</p><p>在 <code>/etc/yum.repos.d</code> 目录下新建 gitlab-ce.repo 文件并保存，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[gitlab-ce]</div><div class="line">name=Gitlab CE Repository</div><div class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</div><div class="line">gpgcheck=0</div><div class="line">enabled=1</div></pre></td></tr></table></figure><h3 id="安装-GitLab-1"><a href="#安装-GitLab-1" class="headerlink" title="安装 GitLab"></a>安装 GitLab</h3><p>刚才修改过了 yum 源，因此先重新生成缓存：（此步骤执行时间较长，一般需要 3~5 分钟左右，请耐心等待）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum makecache</div></pre></td></tr></table></figure><p>安装 GitLab：<br>（此步骤执行时间较长，一般需要 3~5 分钟左右，请耐心等待）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y gitlab-ce</div></pre></td></tr></table></figure><h2 id="初始化-GitLab"><a href="#初始化-GitLab" class="headerlink" title="初始化 GitLab"></a>初始化 GitLab</h2><h3 id="配置-GitLab-的域名（非必须）"><a href="#配置-GitLab-的域名（非必须）" class="headerlink" title="配置 GitLab 的域名（非必须）"></a>配置 GitLab 的域名（非必须）</h3><p>打开 <em>/etc/gitlab/gitlab.rb</em> 文件，在第 13 行附近找到 <code>external_url &#39;http://gitlab.example.com&#39;</code>，将单引号中的内容改为自己的域名（带上协议头，末尾无斜杠），并保存。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">external_url 'http://work.myteam.com'</div></pre></td></tr></table></figure><h3 id="初始化-GitLab-1"><a href="#初始化-GitLab-1" class="headerlink" title="初始化 GitLab"></a>初始化 GitLab</h3><p><em>特别重要！</em></p><p>使用如下命令初始化 GitLab：<br>（此步骤执行时间较长，一般需要 5~10 分钟左右，请耐心等待）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo gitlab-ctl reconfigure</div></pre></td></tr></table></figure><h2 id="GitLab-安装已完成"><a href="#GitLab-安装已完成" class="headerlink" title="GitLab 安装已完成"></a>GitLab 安装已完成</h2><p>至此，我们已经成功地在 CentOS 7 上搭建了 GitLab。 现在可以在这里（<a href="http://xn--%3C%20cvm%20ip%20%3E-yp49ackh32qjw5g/" target="_blank" rel="external">http://&lt;您的 CVM IP 地址&gt;/</a>）访问 GitLab 了。</p><ul><li>在实际生产中，建议您使用 2 核 4 GB 或更高配置。<em>点击这里</em> 可以查看 GitLab 官方推荐的配置和可承载人数对应表。</li><li>再次提醒您，定期执行 <code>yum update -y</code> 以保持各软件包的最新状态。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;准备环境&quot;&gt;&lt;a href=&quot;#准备环境&quot; class=&quot;headerlink&quot; title=&quot;准备环境&quot;&gt;&lt;/a&gt;准备环境&lt;/h2&gt;&lt;p&gt;在正式开始安装之前，先更新软件包并打开相关服务的权限。&lt;/p&gt;
&lt;h3 id=&quot;更新软件包&quot;&gt;&lt;a href=&quot;#更新软件包
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建基于 ZIPKIN 的数据追踪系统</title>
    <link href="http://qzdotnet.github.io/2017/11/06/%E6%90%AD%E5%BB%BA%E5%9F%BA%E4%BA%8E-ZIPKIN-%E7%9A%84%E6%95%B0%E6%8D%AE%E8%BF%BD%E8%B8%AA%E7%B3%BB%E7%BB%9F/"/>
    <id>http://qzdotnet.github.io/2017/11/06/搭建基于-ZIPKIN-的数据追踪系统/</id>
    <published>2017-11-06T09:10:47.000Z</published>
    <updated>2017-11-06T10:06:04.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a>Zipkin</h3><p>Zipkin 是一个分布式数据追踪系统，适用于微服务架构下的调用链路数据采集及分析工作。</p><h2 id="配置-Java-环境"><a href="#配置-Java-环境" class="headerlink" title="配置 Java 环境"></a>配置 Java 环境</h2><h3 id="安装-JDK"><a href="#安装-JDK" class="headerlink" title="安装 JDK"></a>安装 JDK</h3><p>Zipkin 使用 Java 8</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install java-1.8.0-openjdk* -y</div></pre></td></tr></table></figure><h2 id="安装-Zipkin"><a href="#安装-Zipkin" class="headerlink" title="安装 Zipkin"></a>安装 Zipkin</h2><h3 id="新建目录"><a href="#新建目录" class="headerlink" title="新建目录"></a>新建目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/zipkin &amp;&amp; cd  "$_"</div></pre></td></tr></table></figure><h3 id="下载-Zipkin"><a href="#下载-Zipkin" class="headerlink" title="下载 Zipkin"></a>下载 Zipkin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget -O zipkin.jar &apos;https://search.maven.org/remote_content?g=io.zipkin.java&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec&apos;</div></pre></td></tr></table></figure><h3 id="启动-Zipkin"><a href="#启动-Zipkin" class="headerlink" title="启动 Zipkin"></a>启动 Zipkin</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java -jar zipkin.jar</div></pre></td></tr></table></figure><p>Zipkin 默认监听 9411 端口， 使用浏览器访问 <a href="">http://<ip 地址="">:9411</ip></a> 即可看到 Zipkin 自带的图形化界面。</p><h2 id="配置-MySQL-数据持久化方案"><a href="#配置-MySQL-数据持久化方案" class="headerlink" title="配置 MySQL 数据持久化方案"></a>配置 MySQL 数据持久化方案</h2><p>Zipkin 支持的持久化方案很多 ，如： Cassandra,MySQL,Elasticsearch . 本实验使用 MySQL 5.7 作为数据库持久化方案。</p><h4 id="安装-MySQL-5-7"><a href="#安装-MySQL-5-7" class="headerlink" title="### 安装 MySQL 5.7"></a>### 安装 MySQL 5.7</h4><p>使用 <code>Ctrl + C</code> 退出上个步骤的 Java 进程并下载 rmp 包。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://dev.mysql.com/get/mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure><p>安装 rpm 包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -Uvh mysql57-community-release-el7-9.noarch.rpm</div></pre></td></tr></table></figure><p>安装 MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yun install mysql-community-server -y</div></pre></td></tr></table></figure><p>启动 MySQL 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start mysqld.service</div></pre></td></tr></table></figure><h3 id="设置-MySQL-密码"><a href="#设置-MySQL-密码" class="headerlink" title="设置 MySQL 密码"></a>设置 MySQL 密码</h3><p>获取 root 临时密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">grep 'temporary password' /var/log/mysqld.log | awk '&#123;print $NF&#125;'</div></pre></td></tr></table></figure><p>使用上一步的获得的临时密码登入 MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -uroot -p</div></pre></td></tr></table></figure><p>设置 MySQL 账户的 root 密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY 'Xx$Zipkin2017';</div></pre></td></tr></table></figure><p>登录 MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root --password='Xx$Zipkin2017'</div></pre></td></tr></table></figure><p>创建 Zipkin 数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database zipkin;</div></pre></td></tr></table></figure><p>切换数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">use zipkin;</div></pre></td></tr></table></figure><p>初始化表及索引</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /data/release/zipkin/zipkin_init.sql</div></pre></td></tr></table></figure><p>执行以下命令会看到<code>zipkin_annotations</code>, <code>zipkin_dependencies</code>, <code>zipkin_spans</code> 三张数据表，说明初始化成功了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">show tables;</div></pre></td></tr></table></figure><p>退出 MySQL, 回到 Bash shell</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">exit</div></pre></td></tr></table></figure><h3 id="启动-Zipkin-1"><a href="#启动-Zipkin-1" class="headerlink" title="启动 Zipkin"></a>启动 Zipkin</h3><p>注： 此处默认使用实验生成的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /data/release/zipkin</div><div class="line">STORAGE_TYPE=mysql MYSQL_HOST=localhost MYSQL_TCP_PORT=3306 MYSQL_DB=zipkin MYSQL_USER=root MYSQL_PASS='Xx$Zipkin2017' \</div><div class="line">nohup java -jar zipkin.jar &amp;</div></pre></td></tr></table></figure><h2 id="创建具有数据上报能力的Demo"><a href="#创建具有数据上报能力的Demo" class="headerlink" title="创建具有数据上报能力的Demo"></a>创建具有数据上报能力的Demo</h2><h3 id="搭建-NodeJS-环境"><a href="#搭建-NodeJS-环境" class="headerlink" title="搭建 NodeJS 环境"></a>搭建 NodeJS 环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl --silent --location https://rpm.nodesource.com/setup_8.x | sudo bash -</div><div class="line">yum install nodejs -y</div></pre></td></tr></table></figure><h3 id="创建-Demo-目录"><a href="#创建-Demo-目录" class="headerlink" title="创建 Demo 目录"></a>创建 Demo 目录</h3><p>创建 /data/release/service_a 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/release/service_a &amp;&amp; cd "$_"</div></pre></td></tr></table></figure><p>使用 NPM 安装相关依赖</p><p>请在 <code>/data/release/service_a</code> 目录下创建并编辑package.json, 参考下面的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  "name": "service_a",</div><div class="line">  "version": "1.0.0",</div><div class="line">  "description": "",</div><div class="line">  "main": "index.js",</div><div class="line">  "scripts": &#123;&#125;,</div><div class="line">  "author": "",</div><div class="line">  "license": "ISC",</div><div class="line">  "dependencies": &#123;</div><div class="line">    "express": "^4.15.3",</div><div class="line">    "zipkin": "^0.7.2",</div><div class="line">    "zipkin-instrumentation-express": "^0.7.2",</div><div class="line">    "zipkin-transport-http": "^0.7.2"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>安装相关依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure><h3 id="创建并编辑-app-js"><a href="#创建并编辑-app-js" class="headerlink" title="创建并编辑 app.js"></a>创建并编辑 app.js</h3><p>请在 <code>/data/release/service_a</code> 目录下创建 app.js ，参考下面的内容。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">const express = require('express');</div><div class="line">const &#123;Tracer, ExplicitContext, BatchRecorder&#125; = require('zipkin');</div><div class="line">const &#123;HttpLogger&#125; = require('zipkin-transport-http');</div><div class="line">const zipkinMiddleware = require('zipkin-instrumentation-express').expressMiddleware;</div><div class="line"></div><div class="line">const ctxImpl = new ExplicitContext();</div><div class="line">const recorder = new BatchRecorder(&#123;</div><div class="line">    logger: new HttpLogger( &#123;</div><div class="line">        endpoint: 'http://127.0.0.1:9411/api/v1/spans'</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"></div><div class="line">const tracer = new Tracer(&#123;ctxImpl, recorder&#125;);</div><div class="line"></div><div class="line">const app = express();</div><div class="line"></div><div class="line">app.use(zipkinMiddleware(&#123;</div><div class="line">  tracer,</div><div class="line">  serviceName: 'service-a'</div><div class="line">&#125;));</div><div class="line"></div><div class="line">app.use('/', (req, res, next) =&gt; &#123;</div><div class="line">    res.send('hello world');</div><div class="line">&#125;);</div><div class="line"></div><div class="line">app.listen(3000, () =&gt; &#123;</div><div class="line">  console.log('service-a listening on port 3000!')</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">node app.js</div></pre></td></tr></table></figure><p>该服务监听 3000 端口， 使用浏览器访问 <a href="">http://<ip地址>:3000</ip地址></a> 后，看到“hello world” 的文本字样说明服务已经正常工作。</p><p>至此，本入门教程已结束，而 Zipkin 的学习只是一个开始，如有兴趣，可尝试搭建一个基于 Kafka + Zookeeper + Elasticsearch 的分布式服务。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Zipkin&quot;&gt;&lt;a href=&quot;#Zipkin&quot; class=&quot;headerlink&quot; title=&quot;Zipkin&quot;&gt;&lt;/a&gt;Zipkin&lt;/h3&gt;&lt;p&gt;Zipkin 是一个分布式数据追踪系统，适用于微服务架构下的调用链路数据采集及分析工作。&lt;/p&gt;
&lt;h2 i
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建 PySpider 爬虫服务</title>
    <link href="http://qzdotnet.github.io/2017/11/06/%E6%90%AD%E5%BB%BA-PySpider-%E7%88%AC%E8%99%AB%E6%9C%8D%E5%8A%A1/"/>
    <id>http://qzdotnet.github.io/2017/11/06/搭建-PySpider-爬虫服务/</id>
    <published>2017-11-06T00:55:07.000Z</published>
    <updated>2017-11-06T09:08:37.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PySpider-简介"><a href="#PySpider-简介" class="headerlink" title="PySpider 简介"></a>PySpider 简介</h2><p>PySpider 是一个国人编写的强大的网络爬虫系统并带有强大的 WebUI。 采用 Python 语言编写，分布式架构，支持多种数据库后端，强大的 WebUI 支持脚本编辑器，任务监视器，项目管理器以及结果查看器。本教程将一步一步指引您搭建属于自己的 PySpider 爬虫服务。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>在开始部署前，我们需要做一些前置准备。<br>yum 更新</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum update -yum</div></pre></td></tr></table></figure><p>安装开发编译工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install gcc gcc-c++ -y</div></pre></td></tr></table></figure><p>安装依赖库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install python-pip python-devel python-distribute libxml2-devel python-lxml libxslt libxslt-devel openssl openssl-devel -y</div></pre></td></tr></table></figure><p>升级 pip</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure><h2 id="部署-mariadb"><a href="#部署-mariadb" class="headerlink" title="部署 mariadb"></a>部署 mariadb</h2><p>由于 CentOS 7 中 MySQL 数据库已从默认的程序列表中移除，我们使用 mariadb 代替。</p><h3 id="安装-mariadb"><a href="#安装-mariadb" class="headerlink" title="安装 mariadb"></a>安装 mariadb</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mariadb-server mariadb -y</div></pre></td></tr></table></figure><h3 id="启动-mariadb-服务"><a href="#启动-mariadb-服务" class="headerlink" title="启动 mariadb 服务"></a>启动 mariadb 服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">systemctl start mariadb</div></pre></td></tr></table></figure><h3 id="设置-root-密码"><a href="#设置-root-密码" class="headerlink" title="设置 root 密码"></a>设置 root 密码</h3><p>默认的 root 用户密码为空，你可以使用一下命令来创建 root 密码：<br><em>（该步骤也可以跳过，password 后的 dk<em>OgKv</em> 可以改为任何你希望设置的密码）</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysqladmin -u root password "QuZheng"</div></pre></td></tr></table></figure><h3 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h3><p>现在你可以尝试通过以下命令来连接到 Mysql 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mysql -u root -p</div></pre></td></tr></table></figure><p>然后输入您刚才设置的密码 （ 默认：QuZheng ），如果一切正常，您应该可以在命令行看到以 MariaDB [(none)]&gt; 或 mysql&gt; 开头的提示了，说明连接成功。<br>此时输入 <code>SHOW DATABASES;</code> 并回车，应该可以看到类似下面这样的输出，说明一切正常。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">mysql&gt;</span><span class="bash"> SHOW DATABASES;</span></div><div class="line">+----------+</div><div class="line">| Database |</div><div class="line">+----------+</div><div class="line">| mysql    |</div><div class="line">| test     |</div><div class="line">+----------+</div><div class="line">2 rows in set (0.13 sec)</div></pre></td></tr></table></figure><p>完成后，可以通过快捷键 <code>Ctrl+C</code> 或者命令行键入 <code>exit</code> 来退出，进入下一步。 </p><h2 id="部署-redis"><a href="#部署-redis" class="headerlink" title="部署 redis"></a>部署 redis</h2><h3 id="下载、解压安装包"><a href="#下载、解压安装包" class="headerlink" title="下载、解压安装包"></a>下载、解压安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://download.redis.io/redis-stable.tar.gz</div></pre></td></tr></table></figure><p>移动压缩包到 /usr/local 内</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv redis-stable /usr/local/redis</div></pre></td></tr></table></figure><p>编译安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd /usr/local/redis</div><div class="line">make</div><div class="line">make install</div></pre></td></tr></table></figure><h3 id="配置-redis"><a href="#配置-redis" class="headerlink" title="配置 redis"></a>配置 redis</h3><p> 设置配置文件路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /etc/redis</div><div class="line">cp /usr/local/redis/redis.conf /etc/redis/redis.conf</div></pre></td></tr></table></figure><p>修改 /etc/redis/redis.conf 文件的 <code>daemonize</code> 配置项为如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">damemonize yes</div></pre></td></tr></table></figure><p>启动 redis 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/redis-server /etc/redis/redis.conf</div></pre></td></tr></table></figure><h2 id="部署-pyspider"><a href="#部署-pyspider" class="headerlink" title="部署 pyspider"></a>部署 pyspider</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade chardet</div><div class="line">easy_install mysql-connector==2.1.3</div><div class="line">easy_install redis</div></pre></td></tr></table></figure><h3 id="安装-pyspider"><a href="#安装-pyspider" class="headerlink" title="安装 pyspider"></a>安装 pyspider</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install pyspider</div></pre></td></tr></table></figure><h3 id="配置-pyspider"><a href="#配置-pyspider" class="headerlink" title="配置 pyspider"></a>配置 pyspider</h3><p>首先创建配置目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /etc/pyspider</div></pre></td></tr></table></figure><p>然后 <code>/etc/pyspider</code> 目录下创建 pyspider.conf.json ,参考下面的内容。<br>具体配置的说明文件参考 <a href="http://docs.pyspider.org/en/latest/Deployment/#configjson" target="_blank" rel="external">官方文档</a></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"taskdb"</span>: <span class="string">"mysql+taskdb://root:Password@127.0.0.1:3306/taskdb"</span>,</div><div class="line">  <span class="attr">"projectdb"</span>: <span class="string">"mysql+projectdb://root:Password@127.0.0.1:3306/projectdb"</span>,</div><div class="line">  <span class="attr">"resultdb"</span>: <span class="string">"mysql+resultdb://root:Password@127.0.0.1:3306/resultdb"</span>,</div><div class="line">  <span class="attr">"message_queue"</span>: <span class="string">"redis://127.0.0.1:6379/db"</span>,</div><div class="line">  <span class="attr">"webui"</span>: &#123;</div><div class="line">    <span class="attr">"username"</span>: <span class="string">"root"</span>,</div><div class="line">    <span class="attr">"password"</span>: <span class="string">"Password"</span>,</div><div class="line">    <span class="attr">"need-auth"</span>: <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中 mysql 配置中的 <code>root</code> 为您 mysql 的用户名， <code>root:</code> 后面的 <code>Password</code> 为您刚设置的密码。</p><p><code>webui</code> 配置中的 username 及 password 为您访问 WebUI 时候需要的用户名，你也可以不设置用户名密码，直接将 <code>need-auth</code> 设为 <code>false</code> 即可。</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pyspider -c /etc/pyspider/pyspider.conf.json</div></pre></td></tr></table></figure><p>如果一切正常，现在访问 http://&lt;您的  IP 地址&gt;:5000，您应该可以看到 pyspider dashboard 的首页了。</p><p>服务能够正常启动后，我们需要让它能够在后台运行，您可以通过以下命令让服务在后台运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup pyspider -c /etc/pyspider/pyspider.conf.json &amp;</div></pre></td></tr></table></figure><p>也可以使用官方推荐的 <a href="http://supervisord.org/" target="_blank" rel="external">Supervisor</a> 来启动，这里就不详细介绍了，具体用法可以参考 Supervisor 的文档</p><h2 id="部署完成"><a href="#部署完成" class="headerlink" title="部署完成"></a>部署完成</h2><p>此时您可以访问 http://&lt;您的 IP 地址&gt;:5000 使用您的爬虫来搜集数据了，具体 pyspider 爬虫脚本的编写及使用教程可以参考 网上资料。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PySpider-简介&quot;&gt;&lt;a href=&quot;#PySpider-简介&quot; class=&quot;headerlink&quot; title=&quot;PySpider 简介&quot;&gt;&lt;/a&gt;PySpider 简介&lt;/h2&gt;&lt;p&gt;PySpider 是一个国人编写的强大的网络爬虫系统并带有强大的 WebUI。 采用 Python 语言编写，分布式架构，支持多种数据库后端，强大的 WebUI 支持脚本编辑器，任务监视器，项目管理器以及结果查看器。本教程将一步一步指引您搭建属于自己的 PySpider 爬虫服务。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://qzdotnet.github.io/tags/Linux/"/>
    
      <category term="Pyspider" scheme="http://qzdotnet.github.io/tags/Pyspider/"/>
    
  </entry>
  
  <entry>
    <title>搭建 LNMP 环境</title>
    <link href="http://qzdotnet.github.io/2017/10/27/%E6%90%AD%E5%BB%BA-LNMP-%E7%8E%AF%E5%A2%83/"/>
    <id>http://qzdotnet.github.io/2017/10/27/搭建-LNMP-环境/</id>
    <published>2017-10-27T09:35:50.000Z</published>
    <updated>2017-11-08T09:30:22.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>LNMP是建立web应用的平台，是Linux、NGINX，MySQL（有时也指MariaDB，数据库软件） 和PHP（有时也是指Perl或Python） 的简称。 </p></blockquote><h2 id="搭建-Nginx-静态服务器"><a href="#搭建-Nginx-静态服务器" class="headerlink" title="搭建 Nginx 静态服务器"></a>搭建 Nginx 静态服务器</h2><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>使用 <code>yum</code> 安装 Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install nginx</div></pre></td></tr></table></figure><p>修改  <a href="">/etc/nginx/conf.d/default.conf</a> ，去除对 IPv6 地址的监听，可以参考下面的示例代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen       80 default_server;</div><div class="line">    # listen       [::]:80 default_server;</div><div class="line">    server_name  _;</div><div class="line">    root         /usr/share/nginx/html;</div><div class="line"></div><div class="line">    # Load configuration files for the default server block.</div><div class="line">    include /etc/nginx/default.d/*.conf;</div><div class="line"></div><div class="line">    location /&#123; </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 404 /404.html;</div><div class="line">        location = /40x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    error_page 500 502 503 504 /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改完成后，启动 Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nginx</div></pre></td></tr></table></figure><p>此时，可以访问 http://\<ip地址\> 来确认是否安装成功</ip地址\></p><p>将 nginx 设置为开机自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig nginx</div></pre></td></tr></table></figure><h2 id="安装-MySQL-数据库服务"><a href="#安装-MySQL-数据库服务" class="headerlink" title="安装 MySQL 数据库服务"></a>安装 MySQL 数据库服务</h2><p>使用 <code>yum</code> 安装 MySQL :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install mysql-server</div></pre></td></tr></table></figure><p>安装完成后，启动 MySQL 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld start</div></pre></td></tr></table></figure><p>设置 MySQL 管理员密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/usr/bin/mysqladmin -u root password 'QuZheng'</div></pre></td></tr></table></figure><p>将 MySQL 设置开机自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig mysql on</div></pre></td></tr></table></figure><h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><p>使用 <code>yum</code> 安装 PHP:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install php php-fpm php-mysql</div></pre></td></tr></table></figure><p>安装之后，启动 php-fpm 进程：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service php-fpm start</div></pre></td></tr></table></figure><p>启动之后，可以使用下面的命令查看 PHP-FPM 进程监听那个端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nplt | grep php-fpm</div></pre></td></tr></table></figure><p>将 PHP-FPM 设置开机自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure><h2 id="配置-Nginx-并运行-PHP-程序"><a href="#配置-Nginx-并运行-PHP-程序" class="headerlink" title="配置 Nginx 并运行 PHP 程序"></a>配置 Nginx 并运行 PHP 程序</h2><h3 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h3><p>在 <a href="">/etc/nginx/conf.d</a> 目录中新建一个名为 php.conf 的文件，并配置 Nginx 端口 ，配置示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">server &#123;</div><div class="line">    listen 8000;</div><div class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</div><div class="line">    location ~ .php$ &#123;</div><div class="line">        root           /usr/share/php;</div><div class="line">        fastcgi_pass   127.0.0.1:9000;</div><div class="line">        fastcgi_index  index.php;</div><div class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">        include        fastcgi_params;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>修改配置完成后，重启 nginx 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service nginx restart</div></pre></td></tr></table></figure><p>这时候，我们就可以在<a href="">/usr/share/php</a> 目录下新建一个 info.php 文件来检查 php 是否安装成功了，文件内容参考如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;LNMP是建立web应用的平台，是Linux、NGINX，MySQL（有时也指MariaDB，数据库软件） 和PHP（有时也是指Perl或Python） 的简称。 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;搭建-Nginx-静态服务器&quot;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建 LAMP 服务</title>
    <link href="http://qzdotnet.github.io/2017/10/27/%E6%90%AD%E5%BB%BA-LAMP-%E6%9C%8D%E5%8A%A1/"/>
    <id>http://qzdotnet.github.io/2017/10/27/搭建-LAMP-服务/</id>
    <published>2017-10-27T05:49:19.000Z</published>
    <updated>2017-10-27T09:17:06.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搭建-MYSQL-数据库"><a href="#搭建-MYSQL-数据库" class="headerlink" title="搭建 MYSQL 数据库"></a>搭建 MYSQL 数据库</h2><p>使用 <code>yum</code> 安装 MySQL :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install mysql-server -y</div></pre></td></tr></table></figure><p>安装完成后启动 MySQL 服务 :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service mysqld restart</div></pre></td></tr></table></figure><p>将 MySQL 加入开机自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig mysqld on</div></pre></td></tr></table></figure><p>设置 MySQL  账户 root 密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">usr/bin/mysqladmin -u root password 'QuZheng'</div></pre></td></tr></table></figure><h2 id="安装-APACHE-服务器"><a href="#安装-APACHE-服务器" class="headerlink" title="安装 APACHE 服务器"></a>安装 APACHE 服务器</h2><p>使用 <code>yum</code> 安装 Apache</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install httpd</div></pre></td></tr></table></figure><p>启动 Apache 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd start</div></pre></td></tr></table></figure><p>将 Apache 加入开机自动启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chkconfig httpd on</div></pre></td></tr></table></figure><h2 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h2><h3 id="安装-PHP-和-PHP-MYSQL-支持工具："><a href="#安装-PHP-和-PHP-MYSQL-支持工具：" class="headerlink" title="安装 PHP 和 PHP-MYSQL 支持工具："></a>安装 PHP 和 PHP-MYSQL 支持工具：</h3><p>使用 <code>yum</code> 安装 PHP:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install php php-mysql -y</div></pre></td></tr></table></figure><h2 id="检查安装是否成功"><a href="#检查安装是否成功" class="headerlink" title="检查安装是否成功"></a>检查安装是否成功</h2><h3 id="检测-PHP-是否安装成功"><a href="#检测-PHP-是否安装成功" class="headerlink" title="检测 PHP 是否安装成功"></a>检测 PHP 是否安装成功</h3><p>我们在 /var/www/html 目录下创建一个 info.php 文件来检查 php 是否安装成功 ，示例代码参考如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">touch /var/www/html/info.php</div></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span> phpinfo(); <span class="meta">?&gt;</span></div></pre></td></tr></table></figure><p>重启 Apache 服务 ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service httpd restart</div></pre></td></tr></table></figure><p>此时，访问 <a href="http://1270.0.0.1/info.php" target="_blank" rel="external">http://1270.0.0.1/info.php</a> 可浏览到我们刚刚创建的 info.php 页面了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;搭建-MYSQL-数据库&quot;&gt;&lt;a href=&quot;#搭建-MYSQL-数据库&quot; class=&quot;headerlink&quot; title=&quot;搭建 MYSQL 数据库&quot;&gt;&lt;/a&gt;搭建 MYSQL 数据库&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;yum&lt;/code&gt; 安装 MySQL :
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建 ShowDoc 文档工具</title>
    <link href="http://qzdotnet.github.io/2017/10/26/%E6%90%AD%E5%BB%BA-ShowDoc-%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/"/>
    <id>http://qzdotnet.github.io/2017/10/26/搭建-ShowDoc-文档工具/</id>
    <published>2017-10-26T06:34:32.000Z</published>
    <updated>2017-10-26T06:53:51.322Z</updated>
    
    <content type="html"><![CDATA[<p>程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文档工具。</p><h2 id="准备-Nginx-PHP-环境"><a href="#准备-Nginx-PHP-环境" class="headerlink" title="准备 Nginx + PHP 环境"></a>准备 Nginx + PHP 环境</h2><h3 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h3><p>使用 <code>yum</code> 安装 Nginx</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install nginx</div></pre></td></tr></table></figure><p>修改 /etc/nginx/nginx.conf 文件的内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">user nginx;</div><div class="line">worker_processes auto;</div><div class="line">error_log /var/log/nginx/error.log;</div><div class="line">pid /run/nginx.pid;</div><div class="line"></div><div class="line">include /usr/share/nginx/modules/*.conf;</div><div class="line"></div><div class="line">events &#123;</div><div class="line">    worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">http &#123;</div><div class="line">    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</div><div class="line">                      '$status $body_bytes_sent "$http_referer" '</div><div class="line">                      '"$http_user_agent" "$http_x_forwarded_for"';</div><div class="line"></div><div class="line">    access_log  /var/log/nginx/access.log  main;</div><div class="line"></div><div class="line">    sendfile            on;</div><div class="line">    tcp_nopush          on;</div><div class="line">    tcp_nodelay         on;</div><div class="line">    keepalive_timeout   65;</div><div class="line">    types_hash_max_size 2048;</div><div class="line"></div><div class="line">    include             /etc/nginx/mime.types;</div><div class="line">    default_type        application/octet-stream;</div><div class="line">    include /etc/nginx/conf.d/*.conf;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen       80;</div><div class="line">        server_name  127.0.0.1;</div><div class="line">        root         /var/www/html;</div><div class="line">        index index.php index.html</div><div class="line">        error_page  404              /404.html;</div><div class="line">        location = /40x.html &#123;</div><div class="line">        &#125;</div><div class="line">        error_page   500 502 503 504  /50x.html;</div><div class="line">        location = /50x.html &#123;</div><div class="line">        &#125;</div><div class="line">        location ~ .php$ &#123;</div><div class="line">            root           /var/www/html;</div><div class="line">            fastcgi_pass   127.0.0.1:9000;</div><div class="line">            fastcgi_index  index.php;</div><div class="line">            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</div><div class="line">            include        fastcgi_params;</div><div class="line">        &#125;</div><div class="line">        location ~ /.ht &#123;</div><div class="line">            deny  all;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>启动 Nginx 并设置为开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service nginx start</div><div class="line">chkconfig nginx on</div></pre></td></tr></table></figure><h3 id="安装-PHP"><a href="#安装-PHP" class="headerlink" title="安装 PHP"></a>安装 PHP</h3><p>使用 <code>yum</code> 安装 php-fpm:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install php php-gd php-fpm php-mcrypt php-mbstring php-mysql php-pdo</div></pre></td></tr></table></figure><p>启动 php-fpm 并设置开机启动：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">service  php-fpm start</div><div class="line">chkconfig php-fpm on</div></pre></td></tr></table></figure><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="下载安装-Composer"><a href="#下载安装-Composer" class="headerlink" title="下载安装 Composer"></a>下载安装 Composer</h3><p>Composer 是 PHP 的一个依赖管理工具，推荐使用 Composer 创建 ShowDoc 项目。</p><p>执行如下命令安装 Composer:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sS https://getcomposer.org/installer | php</div><div class="line">mv composer.phar /usr/local/bin/composer</div></pre></td></tr></table></figure><h3 id="设置-Compooser-使用国内镜像"><a href="#设置-Compooser-使用国内镜像" class="headerlink" title="设置 Compooser 使用国内镜像"></a>设置 Compooser 使用国内镜像</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composer config -g repo.packagist composer https://packagist.phpcomposer.com</div></pre></td></tr></table></figure><h3 id="使用-Compooser-创建项目"><a href="#使用-Compooser-创建项目" class="headerlink" title="使用 Compooser 创建项目"></a>使用 Compooser 创建项目</h3><p>执行命令创建项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /var/www/html/ &amp;&amp; composer create-project showdoc/showdoc</div></pre></td></tr></table></figure><h3 id="设置-showdoc-目录写权限"><a href="#设置-showdoc-目录写权限" class="headerlink" title="设置 showdoc 目录写权限"></a>设置 showdoc 目录写权限</h3><p>执行命令赋予 showdoc 下部分目录的写权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">chmod a+w showdoc/install</div><div class="line">chmod a+w showdoc/Sqlite</div><div class="line">chmod a+w showdoc/Sqlite/showdoc.db.php</div><div class="line">chmod a+w showdoc/Public/Uploads/</div><div class="line">chmod a+w showdoc/Application/Runtime</div><div class="line">chmod a+w showdoc/server/Application/Runtime</div><div class="line">chmod a+w showdoc/Application/Common/Conf/config.php</div><div class="line">chmod a+w showdoc/Application/Home/Conf/config.php</div></pre></td></tr></table></figure><p>创建完毕，您现在可以通过浏览器访问 http://&lt; IP地址&gt;/showdoc/install/ ，进行语言的选择以后即可通过 http://&lt; IP地址&gt;/showdoc 查看站点效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;程序员都很希望别人能写文档，而自己却不愿意写文档。文档的编写和管理影响了团队沟通协作的效率，ShowDoc 是一个非常适合 IT 团队的在线文档分享工具，为提升团队之间的沟通协作效率而生。本实验在 centos 系统上搭建基于 Nginx + PHP 的 ShowDoc 文
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建 Thinkjs 开发环境</title>
    <link href="http://qzdotnet.github.io/2017/10/26/%E6%90%AD%E5%BB%BA-Thinkjs-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>http://qzdotnet.github.io/2017/10/26/搭建-Thinkjs-开发环境/</id>
    <published>2017-10-26T06:20:32.000Z</published>
    <updated>2017-10-26T06:28:09.092Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h2><p>ThinkJS 是一款 Node.js 的MVC 框架，所以安装 ThinkJS 之前需要安装 Node.js 环境。</p><h3 id="安装-Node-js-6-x0"><a href="#安装-Node-js-6-x0" class="headerlink" title="安装 Node.js 6.x0"></a>安装 Node.js 6.x0</h3><p>ThinkJS 支持 Node.js 的 0.12 以上版本，本教程以 Node.js 6.x 为例，其他版本安装过程相似</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -</div><div class="line">sudo apt-get install -y nodejs</div></pre></td></tr></table></figure><h2 id="安装-ThinkJS"><a href="#安装-ThinkJS" class="headerlink" title="安装 ThinkJS"></a>安装 ThinkJS</h2><h3 id="npm-安装-ThinkJS"><a href="#npm-安装-ThinkJS" class="headerlink" title="npm 安装 ThinkJS"></a>npm 安装 ThinkJS</h3><p>执行如下命令安装 ThinkJS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo npm install thinkjs@2 -g --verbose</div></pre></td></tr></table></figure><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>执行如下命令创建项目：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">thinkjs new project_path;</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">create : project_path</div><div class="line">create : project_path/package.json</div><div class="line">create : project_path/.babelrc</div><div class="line">create : project_path/.thinkjsrc</div><div class="line">create : project_path/nginx.conf</div><div class="line">create : project_path/pm2.json</div><div class="line">create : project_path/.gitignore</div><div class="line">create : project_path/README.md</div><div class="line">create : project_path/www</div><div class="line">create : project_path/www/development.js</div><div class="line">create : project_path/www/production.js</div><div class="line">create : project_path/www/testing.js</div><div class="line">create : project_path/www/README.md</div><div class="line">create : project_path/www/static</div><div class="line">create : project_path/www/static/js</div><div class="line">create : project_path/www/static/css</div><div class="line">create : project_path/www/static/img</div><div class="line">create : project_path/src</div><div class="line">create : project_path/src/common/bootstrap</div><div class="line">create : project_path/src/common/bootstrap/middleware.js</div><div class="line">create : project_path/src/common/bootstrap/global.js</div><div class="line">create : project_path/src/common/config</div><div class="line">create : project_path/src/common/config/config.js</div><div class="line">create : project_path/src/common/config/view.js</div><div class="line">create : project_path/src/common/config/db.js</div><div class="line">create : project_path/src/common/config/hook.js</div><div class="line">create : project_path/src/common/config/session.js</div><div class="line">create : project_path/src/common/config/error.js</div><div class="line">create : project_path/src/common/config/env</div><div class="line">create : project_path/src/common/config/env/development.js</div><div class="line">create : project_path/src/common/config/env/testing.js</div><div class="line">create : project_path/src/common/config/env/production.js</div><div class="line">create : project_path/src/common/config/locale</div><div class="line">create : project_path/src/common/config/locale/en.js</div><div class="line">create : project_path/src/common/controller</div><div class="line">create : project_path/src/common/controller/error.js</div><div class="line">create : project_path/view/common</div><div class="line">create : project_path/view/common/error_400.html</div><div class="line">create : project_path/view/common/error_403.html</div><div class="line">create : project_path/view/common/error_404.html</div><div class="line">create : project_path/view/common/error_500.html</div><div class="line">create : project_path/view/common/error_503.html</div><div class="line">create : project_path/src/home/config</div><div class="line">create : project_path/src/home/config/config.js</div><div class="line">create : project_path/src/home/controller</div><div class="line">create : project_path/src/home/controller/base.js</div><div class="line">create : project_path/src/home/controller/index.js</div><div class="line">create : project_path/src/home/logic</div><div class="line">create : project_path/src/home/logic/index.js</div><div class="line">create : project_path/src/home/model</div><div class="line">create : project_path/src/home/model/index.js</div><div class="line">create : project_path/view/home</div><div class="line">create : project_path/view/home/index_index.html</div><div class="line"></div><div class="line">enter path:</div><div class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> project_path</span></div><div class="line"></div><div class="line">install dependencies:</div><div class="line"><span class="meta">$</span><span class="bash"> npm install</span></div><div class="line"></div><div class="line">run the app:</div><div class="line"><span class="meta">$</span><span class="bash"> npm start</span></div></pre></td></tr></table></figure><h3 id="安装项目依赖"><a href="#安装项目依赖" class="headerlink" title="安装项目依赖"></a>安装项目依赖</h3><p>执行如下命令安装依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd project_path</div><div class="line">npm install --verbose</div></pre></td></tr></table></figure><h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>执行如下命令启动项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure><p>启动成功将看到提示如截图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/bootstrap/global.js 512ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/bootstrap/middleware.js 21ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/config.js 33ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/db.js 49ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/env/development.js 6ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/env/production.js 17ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/env/testing.js 5ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/error.js 18ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/hook.js 8ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/locale/en.js 11ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/session.js 20ms</div><div class="line">[2017-10-26 14:27:34] [Babel] Compile file common/config/view.js 26ms</div><div class="line">[2017-10-26 14:27:35] [Babel] Compile file common/controller/error.js 167ms</div><div class="line">[2017-10-26 14:27:35] [Babel] Compile file home/config/config.js 7ms</div><div class="line">[2017-10-26 14:27:35] [Babel] Compile file home/controller/base.js 18ms</div><div class="line">[2017-10-26 14:27:35] [Babel] Compile file home/controller/index.js 21ms</div><div class="line">[2017-10-26 14:27:35] [Babel] Compile file home/logic/index.js 34ms</div><div class="line">[2017-10-26 14:27:35] [Babel] Compile file home/model/index.js 27ms</div><div class="line">[2017-10-26 14:27:35] [THINK] Server running at http://127.0.0.1:8360/</div><div class="line">[2017-10-26 14:27:35] [THINK] ThinkJS Version: 2.2.24</div><div class="line">[2017-10-26 14:27:35] [THINK] Cluster Status: closed</div><div class="line">[2017-10-26 14:27:35] [THINK] WebSocket Status: closed</div><div class="line">[2017-10-26 14:27:35] [THINK] File Auto Compile: true</div><div class="line">[2017-10-26 14:27:35] [THINK] File Auto Reload: true</div><div class="line">[2017-10-26 14:27:35] [THINK] App Enviroment: development</div><div class="line"></div><div class="line">[2017-10-26 14:27:36] [HTTP] HEAD / 200 60ms</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;安装-Node-js&quot;&gt;&lt;a href=&quot;#安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 Node.js&quot;&gt;&lt;/a&gt;安装 Node.js&lt;/h2&gt;&lt;p&gt;ThinkJS 是一款 Node.js 的MVC 框架，所以安装 Think
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>搭建邮件服务器</title>
    <link href="http://qzdotnet.github.io/2017/10/26/%E6%90%AD%E5%BB%BA%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://qzdotnet.github.io/2017/10/26/搭建邮件服务器/</id>
    <published>2017-10-26T05:36:11.000Z</published>
    <updated>2017-11-28T07:24:37.621Z</updated>
    
    <content type="html"><![CDATA[<p>Postfix 是一个标准的 MTA [Mail Transfer Agent] 服务器 ，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。</p><h2 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h2><p>添加两条域名解析</p><h4 id="A-记录"><a href="#A-记录" class="headerlink" title="A 记录"></a>A 记录</h4><p>记录类型：A</p><p>主机记录：@</p><p>记录值：IP 地址</p><h4 id="MX-记录"><a href="#MX-记录" class="headerlink" title="MX 记录"></a>MX 记录</h4><p>记录类型：MX</p><p>主机记录：@</p><p>记录值：<code>yourdomain.com</code>（替换为自己域名）</p><h3 id="生效检查"><a href="#生效检查" class="headerlink" title="生效检查"></a>生效检查</h3><p>域名设置解析后需要过一段时间才会生效，通过 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ping  ping yourdomain.com</div></pre></td></tr></table></figure><p> 命令检查域名是否生效 </p><h4 id="检查-MX-记录"><a href="#检查-MX-记录" class="headerlink" title="检查 MX 记录"></a>检查 MX 记录</h4><p>替换下面命令中的 <code>yourdomain.com</code> 为您自己的注册的域名：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nslookup -q=mx yourdomain.com</div></pre></td></tr></table></figure><p>如果 nslookup 命令返回的信息中含有你设置的域名的记录值，说明解析成功。</p><h2 id="实验之前"><a href="#实验之前" class="headerlink" title="实验之前"></a>实验之前</h2><p>配置一个功能完善的邮件服务器并不是一项容易的工作，本实验知识搭建一个简单的邮件服务器，一些更为强大的功能还需要你去探索。</p><h3 id="Postfix、Dovecot-简介"><a href="#Postfix、Dovecot-简介" class="headerlink" title="Postfix、Dovecot 简介"></a>Postfix、Dovecot 简介</h3><h4 id="Postfix"><a href="#Postfix" class="headerlink" title="Postfix"></a>Postfix</h4><p>Postfix 是一个标准的 MTA「Mail Transfer Agent」服务器，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件。</p><h4 id="Dovecot"><a href="#Dovecot" class="headerlink" title="Dovecot"></a>Dovecot</h4><p>Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。</p><h4 id="Postfix、Dovecot-安装"><a href="#Postfix、Dovecot-安装" class="headerlink" title="Postfix、Dovecot 安装"></a>Postfix、Dovecot 安装</h4><p>在 CentOS 7 上，我们可以直接使用 <code>yum</code> 进行下载安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install postfix dovecot</div></pre></td></tr></table></figure><h2 id="Postfix-1"><a href="#Postfix-1" class="headerlink" title="Postfix"></a>Postfix</h2><h3 id="配置-Postfix"><a href="#配置-Postfix" class="headerlink" title="配置 Postfix"></a>配置 Postfix</h3><p>有关配置参数的具体含义，请参考 <a href="http://www.postfix.org/documentation.html" target="_blank" rel="external">Postfix 配置文档</a></p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在终端中输入一下命令修改 Postfix 相关配置：</p><p>注意：记得将 yourdomain.com 替换为你自己的域名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">postconf -e 'myhostname = server.yourdomain.com'</div><div class="line">postconf -e 'mydestination = localhost, localhost.localdomain'</div><div class="line">postconf -e 'myorigin = $mydomain'</div><div class="line">postconf -e 'mynetworks = 127.0.0.0/8'</div><div class="line">postconf -e 'inet_interfaces = all'</div><div class="line">postconf -e 'inet_protocols = all'</div><div class="line">postconf -e 'mydestination = $myhostname, localhost.$mydomain, localhost, $mydomain'</div><div class="line">postconf -e 'home_mailbox = Maildir/'</div><div class="line">postconf -e 'smtpd_sasl_type = dovecot'</div><div class="line">postconf -e 'smtpd_sasl_path = private/auth'</div><div class="line">postconf -e 'smtpd_sasl_auth_enable = yes'</div><div class="line">postconf -e 'broken_sasl_auth_clients = yes'</div><div class="line">postconf -e 'smtpd_sasl_authenticated_header = yes'</div><div class="line">postconf -e 'smtpd_recipient_restrictions = permit_mynetworks, permit_sasl_authenticated, reject_unauth_destination'</div><div class="line">postconf -e 'smtpd_use_tls = yes'</div><div class="line">postconf -e 'smtpd_tls_cert_file = /etc/pki/dovecot/certs/dovecot.pem'</div><div class="line">postconf -e 'smtpd_tls_key_file = /etc/pki/dovecot/private/dovecot.pem'</div></pre></td></tr></table></figure><p>配置中 Postfix 使用 <strong>sasl</strong> 和 <strong>tls</strong> 来完成身份认证和传输信息加密。</p><p>试验中使用了 Dovecot 默认的 <strong>ssl</strong> 证书和私钥，如果你需要修改为自己的，请替换最后两行配置的路径。</p><h4 id="配置-smtps"><a href="#配置-smtps" class="headerlink" title="配置 smtps"></a>配置 smtps</h4><p>部分邮件客户端依赖于使用 465 端口提供加密连接，所以我们修改配置，允许 postfix 使用 465 端口发送邮件。</p><p>打开 <a href="">/etc/postfix/master.cf</a> 文件，将如下两行前的 <code>#</code> 去除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">smtps inet n - n - - smtpd</div><div class="line">-o smtpd_tls_wrappermode=yes</div></pre></td></tr></table></figure><blockquote><p>（注意：-o 前要保留空格）</p></blockquote><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>使用以下命令，将 Postfix 设为自动启动并首次启动该服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">systemctl enable postfix.service</div><div class="line">systemctl start  postfix.service</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Postfix 是一个标准的 MTA [Mail Transfer Agent] 服务器 ，它负责通过 SMTP 协议管理发送到本机的邮件以及由本机发向外界的邮件；Dovecot 是一个优秀的 IMAP/POP 服务器用以接收外界发送到本机的邮件。&lt;/p&gt;
&lt;h2 id=&quot;
      
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://qzdotnet.github.io/tags/Linux/"/>
    
      <category term="Jupyter" scheme="http://qzdotnet.github.io/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>搭建 Node.js 环境</title>
    <link href="http://qzdotnet.github.io/2017/10/25/%E6%90%AD%E5%BB%BA-Node-js-%E7%8E%AF%E5%A2%83/"/>
    <id>http://qzdotnet.github.io/2017/10/25/搭建-Node-js-环境/</id>
    <published>2017-10-25T08:53:02.000Z</published>
    <updated>2017-10-26T02:10:13.447Z</updated>
    
    <content type="html"><![CDATA[<h2 id="yum-简介"><a href="#yum-简介" class="headerlink" title="yum 简介"></a>yum 简介</h2><p>Node.js 是运行在服务端的 JavaScript, 是基于 Chrome JavaScript V8 引擎建立的平台。</p><h2 id="yum-安装-Node-js-环境"><a href="#yum-安装-Node-js-环境" class="headerlink" title="yum 安装 Node.js 环境"></a>yum 安装 Node.js 环境</h2><h3 id="安装相关的依赖包"><a href="#安装相关的依赖包" class="headerlink" title="安装相关的依赖包"></a>安装相关的依赖包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install openssl</div></pre></td></tr></table></figure><h3 id="安装-Node-js"><a href="#安装-Node-js" class="headerlink" title="安装 Node.js"></a>安装 Node.js</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install nodejs</div></pre></td></tr></table></figure><a id="more"></a><h2 id="源码包安装配置"><a href="#源码包安装配置" class="headerlink" title="源码包安装配置"></a>源码包安装配置</h2><h3 id="下载并安装-Node-js"><a href="#下载并安装-Node-js" class="headerlink" title="下载并安装 Node.js"></a>下载并安装 Node.js</h3><p>下载最新的稳定版 v6.10.3 到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://nodejs.org/dist/v6.10.3/node-v6.10.3-linux-x64.tar.xz</div></pre></td></tr></table></figure><p>下载完成后，将其解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar xvJf node-v6.10.3-linux-x64.tar.xz</div></pre></td></tr></table></figure><p>将解压的 <code>Node.js</code> 目录移动到 /usr/local 兖下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv node-v6.10.3-linux-x64 /usr/local/node-v6</div></pre></td></tr></table></figure><p>配置 <code>node</code> 软连接 到 /bin 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/node-v6/bin/node /bin/node</div></pre></td></tr></table></figure><h3 id="配置和使用-npm"><a href="#配置和使用-npm" class="headerlink" title="配置和使用 npm"></a>配置和使用 npm</h3><h4 id="配置-npm"><a href="#配置-npm" class="headerlink" title="配置 npm"></a>配置 npm</h4><p><code>npm</code> 是 <code>Node.js</code> 的包管理和分发工具。它可以让 <code>Node.js</code> 开发者能够更加轻松的共享代码和共用代码片段</p><p>下载 <code>node</code> 的压缩包中已经包含了 <code>npm</code> , 我们只需要将其软链接到 <code>bin</code> 目录下即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ln -s /usr/local/node-v6/bin/npm /bin/npm</div></pre></td></tr></table></figure><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>将 <em>/usr/local/node-v6/bin</em> 目录添加到 $PATH 环境变量中可以方便地使用通过 npm 全局安装的第三方工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo 'export PATH=/usr/local/node-v6/bin:$PATH' &gt;&gt; /etc/profile</div></pre></td></tr></table></figure><h4 id="生效环境变量"><a href="#生效环境变量" class="headerlink" title="生效环境变量"></a>生效环境变量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure><h4 id="使用-npm"><a href="#使用-npm" class="headerlink" title="使用 npm"></a>使用 npm</h4><p>通过 <code>npm</code> 安装进程管理模块 <code>forever</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install forever -g</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;yum-简介&quot;&gt;&lt;a href=&quot;#yum-简介&quot; class=&quot;headerlink&quot; title=&quot;yum 简介&quot;&gt;&lt;/a&gt;yum 简介&lt;/h2&gt;&lt;p&gt;Node.js 是运行在服务端的 JavaScript, 是基于 Chrome JavaScript V8 引擎建立的平台。&lt;/p&gt;
&lt;h2 id=&quot;yum-安装-Node-js-环境&quot;&gt;&lt;a href=&quot;#yum-安装-Node-js-环境&quot; class=&quot;headerlink&quot; title=&quot;yum 安装 Node.js 环境&quot;&gt;&lt;/a&gt;yum 安装 Node.js 环境&lt;/h2&gt;&lt;h3 id=&quot;安装相关的依赖包&quot;&gt;&lt;a href=&quot;#安装相关的依赖包&quot; class=&quot;headerlink&quot; title=&quot;安装相关的依赖包&quot;&gt;&lt;/a&gt;安装相关的依赖包&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum -y install openssl&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;安装-Node-js&quot;&gt;&lt;a href=&quot;#安装-Node-js&quot; class=&quot;headerlink&quot; title=&quot;安装 Node.js&quot;&gt;&lt;/a&gt;安装 Node.js&lt;/h3&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum -y install nodejs&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://qzdotnet.github.io/tags/Linux/"/>
    
      <category term="node" scheme="http://qzdotnet.github.io/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>搭建 SVN 服务器</title>
    <link href="http://qzdotnet.github.io/2017/10/25/%E6%90%AD%E5%BB%BA-SVN-%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://qzdotnet.github.io/2017/10/25/搭建-SVN-服务器/</id>
    <published>2017-10-25T08:09:55.000Z</published>
    <updated>2017-10-25T09:54:59.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SVN-简介"><a href="#SVN-简介" class="headerlink" title="SVN 简介"></a>SVN 简介</h2><p>SVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。本实验带您一步步搭建属于自己的 SVN 服务器</p><h2 id="安装-SVN-服务器"><a href="#安装-SVN-服务器" class="headerlink" title="安装 SVN 服务器"></a>安装 SVN 服务器</h2><h3 id="安装-Subversion"><a href="#安装-Subversion" class="headerlink" title="安装 Subversion"></a>安装 Subversion</h3><p>Subversion 是一个版本控制系统个 ，相对于的 RCS、CVS ，采用了分支管理系统，他的设计目标就是取代 CVS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install -y subversion</div></pre></td></tr></table></figure><h3 id="创建-SVN-版本库"><a href="#创建-SVN-版本库" class="headerlink" title="创建 SVN 版本库"></a>创建 SVN 版本库</h3><p>创建项目版本库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/svn/myproject</div><div class="line">svnadmin create /data/svn/myproject</div></pre></td></tr></table></figure><a id="more"></a><h2 id="配置-SVN-信息"><a href="#配置-SVN-信息" class="headerlink" title="配置 SVN 信息"></a>配置 SVN 信息</h2><h3 id="配置文件简介"><a href="#配置文件简介" class="headerlink" title="配置文件简介"></a>配置文件简介</h3><p>版本库中的配置目录 <a href="">conf</a> 有三个文件:</p><ul><li>authz 是权限控制文件</li><li>passwd 是帐号密码文件</li><li>svnserve.conf 是SVN服务综合配置文件</li></ul><h3 id="配置权限配置文件-authz"><a href="#配置权限配置文件-authz" class="headerlink" title="配置权限配置文件 authz"></a>配置权限配置文件 authz</h3><p>现在编辑 authz ，内容参考如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[groups]            </div><div class="line">#用户组</div><div class="line">admin = admin,root,test  </div><div class="line">#用户组所对应的用户</div><div class="line">[/]                 </div><div class="line">#库目录权限</div><div class="line">@admin = rw         </div><div class="line">#用户组权限</div><div class="line">*=r               </div><div class="line">#非用户组权限</div></pre></td></tr></table></figure><h3 id="而配置账号密码文件-passwd"><a href="#而配置账号密码文件-passwd" class="headerlink" title="而配置账号密码文件 passwd"></a>而配置账号密码文件 passwd</h3><p>内容参考如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[users]</div><div class="line"><span class="meta">#</span><span class="bash"> harry = harryssecret</span></div><div class="line"><span class="meta">#</span><span class="bash"> sally = sallyssecret</span></div><div class="line">admin = 123456</div><div class="line">root = 123456</div><div class="line">test = 123456</div></pre></td></tr></table></figure><h3 id="配置-SVN-服务综合配置文件-svnserve-conf"><a href="#配置-SVN-服务综合配置文件-svnserve-conf" class="headerlink" title="配置 SVN 服务综合配置文件 svnserve.conf"></a>配置 SVN 服务综合配置文件 svnserve.conf</h3><p>编辑 编辑 svnserve.conf ，内容参考如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[general]</div><div class="line"><span class="meta">#</span><span class="bash"> force-username-case = none</span></div><div class="line"><span class="meta">#</span><span class="bash"> 匿名访问的权限 可以是<span class="built_in">read</span>、write，none，默认为<span class="built_in">read</span></span></div><div class="line">anon-access = none</div><div class="line"><span class="meta">#</span><span class="bash">使授权用户有写权限</span></div><div class="line">auth-access = write</div><div class="line"><span class="meta">#</span><span class="bash">密码数据库的路径</span></div><div class="line">password-db = passwd</div><div class="line"><span class="meta">#</span><span class="bash">访问控制文件</span></div><div class="line">authz-db = authz</div><div class="line"><span class="meta">#</span><span class="bash">认证命名空间，SVN会在认证提示里显示，并且作为凭证缓存的关键字</span></div><div class="line">realm = /data/svn/myproject</div><div class="line"></div><div class="line">[sasl]</div></pre></td></tr></table></figure><h2 id="启动-SVN-服务"><a href="#启动-SVN-服务" class="headerlink" title="启动 SVN 服务"></a>启动 SVN 服务</h2><h3 id="启动-SVN"><a href="#启动-SVN" class="headerlink" title="启动 SVN"></a>启动 SVN</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svnserve -d -r /data/svn</div></pre></td></tr></table></figure><h3 id="checkout-SVN-项目"><a href="#checkout-SVN-项目" class="headerlink" title="checkout SVN 项目"></a>checkout SVN 项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/workspace/myproject</div><div class="line">svn co svn://127.0.0.1/myproject /data/workspace/myproject --username root --password 123456 --force --no-auth-cache</div></pre></td></tr></table></figure><h3 id="提交文件到-SVN-服务器"><a href="#提交文件到-SVN-服务器" class="headerlink" title="提交文件到 SVN 服务器"></a>提交文件到 SVN 服务器</h3><p>从本地提交文件到 SVN 服务器 ，其中 <code>root</code> 密码为 <code>/data/svn/myrpoject/conf/passwd</code> 文件存储的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /data/workspace/myproject</div><div class="line">echo test &gt;&gt;test.txt</div><div class="line">svn add test.txt</div><div class="line">svn commit test.txt -, 'test'</div></pre></td></tr></table></figure><p>提交成功后可以通过如下命令从本地项目删除文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/workspace/myproject</div><div class="line">rm -rf test.txt</div></pre></td></tr></table></figure><p>删除后可以通过 SVN 服务器恢复</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /data/workspace/myproject</div><div class="line">svn update</div></pre></td></tr></table></figure><h2 id="部署完成"><a href="#部署完成" class="headerlink" title="部署完成"></a>部署完成</h2><p>至此 SVN 环境的搭建就已经完成了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SVN-简介&quot;&gt;&lt;a href=&quot;#SVN-简介&quot; class=&quot;headerlink&quot; title=&quot;SVN 简介&quot;&gt;&lt;/a&gt;SVN 简介&lt;/h2&gt;&lt;p&gt;SVN 是 Subversion 的简称，是一个开放源代码的版本控制系统，相较于 RCS、CVS，它采用了分支管理系统，它的设计目标就是取代CVS。本实验带您一步步搭建属于自己的 SVN 服务器&lt;/p&gt;
&lt;h2 id=&quot;安装-SVN-服务器&quot;&gt;&lt;a href=&quot;#安装-SVN-服务器&quot; class=&quot;headerlink&quot; title=&quot;安装 SVN 服务器&quot;&gt;&lt;/a&gt;安装 SVN 服务器&lt;/h2&gt;&lt;h3 id=&quot;安装-Subversion&quot;&gt;&lt;a href=&quot;#安装-Subversion&quot; class=&quot;headerlink&quot; title=&quot;安装 Subversion&quot;&gt;&lt;/a&gt;安装 Subversion&lt;/h3&gt;&lt;p&gt;Subversion 是一个版本控制系统个 ，相对于的 RCS、CVS ，采用了分支管理系统，他的设计目标就是取代 CVS&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yum install -y subversion&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;创建-SVN-版本库&quot;&gt;&lt;a href=&quot;#创建-SVN-版本库&quot; class=&quot;headerlink&quot; title=&quot;创建 SVN 版本库&quot;&gt;&lt;/a&gt;创建 SVN 版本库&lt;/h3&gt;&lt;p&gt;创建项目版本库&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mkdir -p /data/svn/myproject&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;svnadmin create /data/svn/myproject&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://qzdotnet.github.io/tags/Linux/"/>
    
      <category term="SVN" scheme="http://qzdotnet.github.io/tags/SVN/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人 Leanote 云笔记本</title>
    <link href="http://qzdotnet.github.io/2017/10/25/%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA-Leanote-%E4%BA%91%E7%AC%94%E8%AE%B0%E6%9C%AC/"/>
    <id>http://qzdotnet.github.io/2017/10/25/搭建个人-Leanote-云笔记本/</id>
    <published>2017-10-25T06:03:32.000Z</published>
    <updated>2017-10-25T09:54:11.559Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Leanote-简介"><a href="#Leanote-简介" class="headerlink" title="Leanote 简介"></a>Leanote 简介</h2><p>Leanote 是目前为止发现的最有 bigger 的云笔记，具备 markdown 输入，代码高亮，多人协作，笔记历史记录，笔记内导航，直接发布为博客等等能力。本实验将带您一步步搭建属于自己的云笔记本，您将可以通过云笔记记录生活工作的点滴。</p><h2 id="下载启动-MongoDB"><a href="#下载启动-MongoDB" class="headerlink" title="下载启动 MongoDB"></a>下载启动 MongoDB</h2><p>leanote 依赖 MongoDB 作为数据存储 ，下面开始安装 MongoDB:</p><h3 id="下载-MongoDB"><a href="#下载-MongoDB" class="headerlink" title="下载 MongoDB"></a>下载 MongoDB</h3><p>进入 /home 目录，并下载 MongoDB:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /home</div></pre></td></tr></table></figure><p>下载源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz</div></pre></td></tr></table></figure><p>解压缩源码包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -xzvf mongodb-linux-x86_64-3.0.1.tgz</div></pre></td></tr></table></figure><a id="more"></a><h3 id="创建用于存储的文件夹目录"><a href="#创建用于存储的文件夹目录" class="headerlink" title="创建用于存储的文件夹目录"></a>创建用于存储的文件夹目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir -p /data/db</div></pre></td></tr></table></figure><p>配置 MongoDB 的环境变量：</p><p>编辑 /etc/profile, 在文件夹末尾追加以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">export PATH=$PATH:/home/mongodb-linux-x86_64-3.0.1/bin</div></pre></td></tr></table></figure><p>并执行以下命令，是环境变量生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure><h3 id="启动-MongoDB"><a href="#启动-MongoDB" class="headerlink" title="启动 MongoDB"></a>启动 MongoDB</h3><p>执行下面的命令启动 MongoDB 需要 3 ~ 5 分钟，耐心等待 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongod --bind_ip localhost --port 27017 --dbpath /data/db/ --logpath=/var/log/mongod.log --fork</div></pre></td></tr></table></figure><h2 id="安装-leanote"><a href="#安装-leanote" class="headerlink" title="安装 leanote"></a>安装 leanote</h2><p>Leanote 是一款 Linux 下开源的软件，下面开始安装 Leanote：</p><p>###下载 leanote</p><p>进入 /home 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /home</div></pre></td></tr></table></figure><p>下载 Leanote 源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://iweb.dl.sourceforge.net/project/leanote-bin/2.4/leanote-linux-amd64-v2.4.bin.tar.gz</div></pre></td></tr></table></figure><h3 id="解开压缩包"><a href="#解开压缩包" class="headerlink" title="解开压缩包"></a>解开压缩包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf leanote-linux-amd64-v2.4.bin.tar.gz</div></pre></td></tr></table></figure><h3 id="编辑-Leanote-配置文件"><a href="#编辑-Leanote-配置文件" class="headerlink" title="编辑 Leanote 配置文件"></a>编辑 Leanote 配置文件</h3><p>编辑文件 <em>app.conf</em>，在文件中找到 <code>app.secret=</code> 项，并修改为如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.secret=qcloud666</div></pre></td></tr></table></figure><h3 id="初始化数据库"><a href="#初始化数据库" class="headerlink" title="初始化数据库"></a>初始化数据库</h3><p>导入初始化数据：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mongorestore -h localhost -d leanote --dir /home/leanote/mongodb_backup/leanote_install_data/</div></pre></td></tr></table></figure><p>启动 Leanote 服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup /bin/bash /home/leanote/bin/run.sh &gt;&gt; /var/log/leanote.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure><h2 id="访问-Leanote-云笔记本"><a href="#访问-Leanote-云笔记本" class="headerlink" title="访问 Leanote 云笔记本"></a>访问 Leanote 云笔记本</h2><p>通过 ip 访问笔记本</p><p>通过访问 http://&lt;您的 IP 地址&gt;:9000 就可以了使用自己的笔记本。</p><ul><li>初始化账户： <code>admin</code></li><li>初始化密码： <code>abc123</code></li></ul><p>请修改密码已确保使用安全！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Leanote-简介&quot;&gt;&lt;a href=&quot;#Leanote-简介&quot; class=&quot;headerlink&quot; title=&quot;Leanote 简介&quot;&gt;&lt;/a&gt;Leanote 简介&lt;/h2&gt;&lt;p&gt;Leanote 是目前为止发现的最有 bigger 的云笔记，具备 markdown 输入，代码高亮，多人协作，笔记历史记录，笔记内导航，直接发布为博客等等能力。本实验将带您一步步搭建属于自己的云笔记本，您将可以通过云笔记记录生活工作的点滴。&lt;/p&gt;
&lt;h2 id=&quot;下载启动-MongoDB&quot;&gt;&lt;a href=&quot;#下载启动-MongoDB&quot; class=&quot;headerlink&quot; title=&quot;下载启动 MongoDB&quot;&gt;&lt;/a&gt;下载启动 MongoDB&lt;/h2&gt;&lt;p&gt;leanote 依赖 MongoDB 作为数据存储 ，下面开始安装 MongoDB:&lt;/p&gt;
&lt;h3 id=&quot;下载-MongoDB&quot;&gt;&lt;a href=&quot;#下载-MongoDB&quot; class=&quot;headerlink&quot; title=&quot;下载 MongoDB&quot;&gt;&lt;/a&gt;下载 MongoDB&lt;/h3&gt;&lt;p&gt;进入 /home 目录，并下载 MongoDB:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;cd /home&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下载源码&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.1.tgz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解压缩源码包&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;tar -xzvf mongodb-linux-x86_64-3.0.1.tgz&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
      <category term="leanote" scheme="http://qzdotnet.github.io/categories/Linux/leanote/"/>
    
    
      <category term="Linux" scheme="http://qzdotnet.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>玩转 Jupyter Notebook</title>
    <link href="http://qzdotnet.github.io/2017/10/24/%E7%8E%A9%E8%BD%AC-Jupyter-Notebook/"/>
    <id>http://qzdotnet.github.io/2017/10/24/玩转-Jupyter-Notebook/</id>
    <published>2017-10-24T09:12:22.000Z</published>
    <updated>2017-10-25T01:28:44.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装-Juptyer-Notebook"><a href="#安装-Juptyer-Notebook" class="headerlink" title="安装 Juptyer Notebook"></a>安装 Juptyer Notebook</h2><h3 id="Jupyter-Notebook-简介"><a href="#Jupyter-Notebook-简介" class="headerlink" title="Jupyter Notebook 简介"></a>Jupyter Notebook 简介</h3><p><strong>jupter Notebook</strong> 是一个开源的 Web 应用程序，可以用来创建和共享包含动态代码、方程式、可视化及解释性文本的文档。</p><p>其应用包括：数据整理与转换、数值模拟、统计建模、机器学习等等。</p><p>更多信息请见 <a href="http://jupyter.org/" target="_blank" rel="external">官网</a></p><a id="more"></a><h3 id="检查-Python-环境"><a href="#检查-Python-环境" class="headerlink" title="检查 Python 环境"></a>检查 Python 环境</h3><p>CentOS 7.2 中默认集成了 Python 2.7 ,可以通过下面命令检查 Python 版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python --version</div></pre></td></tr></table></figure><p>安装 pip</p><p>pip 是一个 Python 包管理工具，我们使用 yum 命令来安装该工具：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install python-pip</div></pre></td></tr></table></figure><blockquote><p>笔者在自己的机器测试的时候遇到了问题 需要安装 epel-release，解决办法参考<a href="http://blog.csdn.net/yulei_qq/article/details/52984334" target="_blank" rel="external">传送门</a></p></blockquote><p>使用下面命令升级 pip 到最新版本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install --upgrade pip</div></pre></td></tr></table></figure><blockquote><p>非常扯淡，不知道为什么下载的不是最新版本，还得升级。这个要是不熟悉就完蛋了。。。</p></blockquote><h3 id="安装相关依赖"><a href="#安装相关依赖" class="headerlink" title="安装相关依赖"></a>安装相关依赖</h3><p>安装 Jupyter 过工程中还需要一些依赖，我们使用一下命令安装他们：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">yum -y groupinstall "Development Tools"</div><div class="line">yum -y install python-devel</div></pre></td></tr></table></figure><h3 id="配置虚拟环境"><a href="#配置虚拟环境" class="headerlink" title="配置虚拟环境"></a>配置虚拟环境</h3><h4 id="安装-virtualenv"><a href="#安装-virtualenv" class="headerlink" title="安装 virtualenv"></a>安装 virtualenv</h4><p>我们将为 Jupyter 创建一个独立的虚拟环境，与系统自带的 Python 隔离开来，为此，先安装 virtualenv 库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install virtualenv</div></pre></td></tr></table></figure><h4 id="创建虚拟环境"><a href="#创建虚拟环境" class="headerlink" title="创建虚拟环境"></a>创建虚拟环境</h4><p>创建一个专门的虚拟环境 ，并直接激活进入该环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">virtualenv venv</div><div class="line">source venv/bin/activate</div></pre></td></tr></table></figure><h3 id="使用-pip-安装-Jupyter"><a href="#使用-pip-安装-Jupyter" class="headerlink" title="使用 pip 安装 Jupyter"></a>使用 pip 安装 Jupyter</h3><p>我们使用 pip 命令安装 jupyter</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install jupyter</div></pre></td></tr></table></figure><h2 id="配置-Jupyter-Notebook"><a href="#配置-Jupyter-Notebook" class="headerlink" title="配置 Jupyter Notebook"></a>配置 Jupyter Notebook</h2><h3 id="建立项目目录"><a href="#建立项目目录" class="headerlink" title="建立项目目录"></a>建立项目目录</h3><p>我们先为 Jupyter 相关文件准备一个目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir /data/jupyter</div><div class="line">cd /data/jupyterpy</div></pre></td></tr></table></figure><p>在建立一个目录作为 /jupyter 运行的根目录：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir /data/jupyter/root</div></pre></td></tr></table></figure><h3 id="准备密码密文"><a href="#准备密码密文" class="headerlink" title="准备密码密文"></a>准备密码密文</h3><p>由于我们将以需要密码验证的模式启动 Jupyter ,所以我们要预先生成所需的秘药对应的密文。</p><p><strong>生成密文 </strong></p><p>使用下面的命令，创建一个密文的密码：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python -c "import IPython;print IPython.lib.passwd()"</div></pre></td></tr></table></figure><p>执行后需要输入并确认密码，然后程序会返回一个 <code>&#39;sha1:...&#39;</code> 的密文，我们接下来将会用到它。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sha1:6889357b4a1f:1dc884a41c8c3db35f01dcdc0817c64fdc845c69</div></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="### 修改配置文件"></a>### 修改配置文件</h4><h4 id="生成配置文件"><a href="#生成配置文件" class="headerlink" title="生成配置文件"></a>生成配置文件</h4><p>我们使用 –generate-config 参数生成默认配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook --generate-config --allow-root</div></pre></td></tr></table></figure><p>生成的配置文件在 <code>/root/.jupyter/</code> 目录下。</p><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>然后在配置文件最下方加入以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">c.NotebookApp.ip = '*'</div><div class="line">c.NotebookApp.allow_root = True</div><div class="line">c.NotebookApp.open_browser = False</div><div class="line">c.NotebookApp.port = 8888</div><div class="line">c.NotebookApp.password = u'sha:6889357b4a1f:1dc884a41c8c3db35f01dcdc0817c64fdc845c69e'</div><div class="line">c.ContentsManager.root_dir = '/data/jupyter/root'</div></pre></td></tr></table></figure><p>其中：</p><ul><li><code>c.NotebookApp.password</code> 请将上一步中密文填入此项，包括 sha: 部分。</li></ul><p>你也可以直接配置或使用 <code>Nginx</code> 将服务代理到 80 或 443 端口。</p><h2 id="启动-Jupyter-Notebook"><a href="#启动-Jupyter-Notebook" class="headerlink" title="启动 Jupyter Notebook"></a>启动 Jupyter Notebook</h2><h3 id="直接启动"><a href="#直接启动" class="headerlink" title="直接启动"></a>直接启动</h3><p>使用一下指令启动  Jupyter Notebook：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jupyter notebook</div></pre></td></tr></table></figure><h3 id="创建-Notebook"><a href="#创建-Notebook" class="headerlink" title="创建 Notebook"></a>创建 Notebook</h3><ul><li>进入<code>【首页】</code> 首先需要输入前面不走中设置的密码。</li><li>然后点击右侧的<code>【new】</code> ，选择 Python2 新建一个 notebook ,这时跳转到编辑界面。</li><li>现在我们可以看到 <em>/data/jupyter/root/</em> 目录中出现了一个 <code>Untitled.ipynb</code> 文件，这就是我们刚刚新建的 Notebook 文件。我们建立的所有 Notebook 都将默认以该类型的文件格式保存。</li></ul><h3 id="后台运行"><a href="#后台运行" class="headerlink" title="后台运行"></a>后台运行</h3><p>直接以 <code>jupyter notebook</code> 命令启动 Jupyter 的方式在连接断开时将会中断，所以我们需要让 Jupyter 服务在后台常驻。</p><p>先按 <code>Ctrl + C</code> 并输入 <code>y</code> 停止 Jupyter 服务，然后执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nohup jupyter notebook &gt; /data/jupyter/jupyter.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure><p>该命令将使得 Jupyter 在后台运行，并将日志写在 <em>/data/jupyter/jupyter.log</em> 文件中。</p><h3 id="准备后续步骤的-Notebook"><a href="#准备后续步骤的-Notebook" class="headerlink" title="准备后续步骤的 Notebook"></a>准备后续步骤的 Notebook</h3><p>为了后面实验中实验室的步骤检查器能够更好的工作，此时我们使用以下命令预先创建几份 ipynb 文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /data/jupyter/root</div><div class="line">cp Untitled.ipynb first.ipynb</div><div class="line">cp Untitled.ipynb matplotlib.ipynb</div><div class="line">cp Untitled.ipynb tensorflow.ipynb</div><div class="line">rm -f Untitled.ipynb</div></pre></td></tr></table></figure><h2 id="使用-Jupyter-Notebook"><a href="#使用-Jupyter-Notebook" class="headerlink" title="使用 Jupyter Notebook"></a>使用 Jupyter Notebook</h2><blockquote><p>接下来的步骤中如遇到步骤检查未通过，请按下 Ctrl + S 保存，等待步骤检查器确认。</p></blockquote><h3 id="编辑界面"><a href="#编辑界面" class="headerlink" title="编辑界面"></a>编辑界面</h3><p>打开  <strong>first.ipynb 编辑界面。</strong></p><p><strong>Jupyter Notebook</strong> 的编辑界面主要由 <strong>工具栏</strong> 和 <strong>内容编辑区</strong> 构成。</p><p>下方编辑区，由 <strong>Cell</strong> 组成。每个 notebook 由多个 <strong>Cell</strong> 构成，每个 <strong>Cell</strong> 都可以有不同的用途。</p><h3 id="Code-Cell"><a href="#Code-Cell" class="headerlink" title="Code Cell"></a>Code Cell</h3><p>新建的 notebook 中包含一个代码 <strong>Cell</strong>（Code Cell），以 <code>[ ]</code> 开头，在该类型的 <strong>Cell</strong> 中，可以输入任意代码并执行。如输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1+1</div></pre></td></tr></table></figure><p>然后按下 <code>Shift + Enter</code> 键， <strong>Cell</strong> 中代码就会被执行，光标也会移动至下个新 <strong>Cell</strong> 中。我们接着输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print("Hello Jupyter")</div></pre></td></tr></table></figure><p>再次按下 <code>Shift + Enter</code> ，可以看到这次没有出现 <code>Out[..]</code> 这样的文字。这是因为我们只打印出来了某些值，而没有返回任何的值。</p><ul><li><strong>按下 Ctrl + S 保存，等待步骤检查器确认。</strong></li></ul><h3 id="Heading-Cell"><a href="#Heading-Cell" class="headerlink" title="Heading Cell"></a>Heading Cell</h3><p>新版本中已经没有独立的 <code>Heading Cell</code>，现在标题被整合在 <code>Markdown Cell</code> 之中。</p><p>如果我们想在顶部添加一个的标题。选中第一个 <strong>Cell</strong>，然后点击 <code>Insert -&gt; Insert Cell Above</code>。</p><p>你会发现，文档顶部马上就出现了一个新的 <strong>Cell</strong>。点击在工具栏中 <strong>Cell</strong> 类型（默认为 Code），将其变成 Markdown。接着在 <strong>Cell</strong> 中写下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"># My First Notebook</div></pre></td></tr></table></figure><p>然后按下 <code>Shift + Enter</code> 键，便可以看到生成了一行一级标题。</p><ul><li><strong>与 Markdown 语法相同，使用多个#将改变标题级别。</strong></li></ul><h3 id="Markdown-Cell"><a href="#Markdown-Cell" class="headerlink" title="Markdown Cell"></a>Markdown Cell</h3><p>上一步中我们尝试了使用 <code>Markdown Cell</code> 。 在该 Cell 中，除标题外其他语法同样支持。比如，我们在一个新的 Cell 中插入以下文本：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">This is a <span class="strong">**table**</span>:</div><div class="line"></div><div class="line">| Name | Value |</div><div class="line">|:----:|:-----:|</div><div class="line">|    A |     1 |</div><div class="line">|    B |     2 |</div><div class="line">|    C |     3 |</div></pre></td></tr></table></figure><p>然后按下 <code>Shift + Enter</code>，即可渲染出相应内容。</p><h4 id="高级用法-HTML"><a href="#高级用法-HTML" class="headerlink" title="高级用法 - HTML"></a>高级用法 - HTML</h4><p><code>MarkDown Cell</code> 中同样接受 HTML 代码。 这样，你就可以实现更加丰富的样式及结构、添加图片等等。</p><p>例如，如果想在 notebook 中添加 Jupyter 的 logo，并且添加 2px 的黑色边框，放置在单元格左侧，可以这样编写</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://jupyter.org/assets/nav_logo.svg"</span> <span class="attr">style</span>=<span class="string">"border: 2px solid black; float:left"</span> /&gt;</span></div></pre></td></tr></table></figure><p>然后按下 <code>Shift + Enter</code>，即可渲染出图片。</p><h4 id="高级用法-LaTex"><a href="#高级用法-LaTex" class="headerlink" title="高级用法 - LaTex"></a>高级用法 - LaTex</h4><p>Markdown Cell 还支持 LaTex 语法。 在 Cell 中插入以下本文：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"><span class="variable">$int_0</span>^&#123;+infty&#125; x^2 dx$$</span></div></pre></td></tr></table></figure><p>同样按下 <code>Shift + Enter</code>，即可渲染出公式。</p><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p>notebook 支持导出导出为 HTML、Markdown、PDF 等多种格式。</p><p>如点击 <code>File -&gt; Download as -&gt; HTML(.html)</code>，即可下载到 HTML 版本的 notebook。</p><h4 id="导出-PDF"><a href="#导出-PDF" class="headerlink" title="导出 PDF"></a>导出 PDF</h4><p>其中，导出 PDF 需要其他包的支持，我们需要使用一下命令安装这些依赖：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install pandoc texlive-*</div></pre></td></tr></table></figure><blockquote><p><strong>注：直接导出 PDF 时 Jupyter 可能会忽略一些 Cell，建议先导出为 HTML，然后使用浏览器将其转为 PDF。</strong></p></blockquote><h2 id="安装-Matplotlib"><a href="#安装-Matplotlib" class="headerlink" title="安装 Matplotlib"></a>安装 Matplotlib</h2><p>我们使用 pip 来安装 Matplotlib ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install matplotlib</div></pre></td></tr></table></figure><p>测试 Matplotlib</p><p>我们使用另一个 notebook （matplotlib.ipynb）来测试 Matplotlib。</p><p><strong>打开 matplotlib.ipynb 编辑界面。</strong></p><h4 id="魔法命令"><a href="#魔法命令" class="headerlink" title="魔法命令"></a>魔法命令</h4><p>在第一个 <strong>Cell</strong> 中，我们插入并执行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%matplotlib inline</div></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>关于 matplotlib 的使用请移步其<a href="http://matplotlib.org/" target="_blank" rel="external">官网</a>。</p><p>在接下来 <strong>Cell</strong> 中，我们插入几个官方示例测试：</p><ol><li><p><a href="http://matplotlib.org/examples/style_sheets/plot_bmh.html" target="_blank" rel="external">plot_bmh</a></p><p>示例代码：/plot_bmh.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> beta</div><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div></pre></td></tr></table></figure><p>plt.style.use(‘bmh’)</p></li></ol><p>   def plot_beta_hist(ax, a, b):<br>       ax.hist(beta(a, b, size=10000), histtype=”stepfilled”,<br>               bins=25, alpha=0.8, normed=True)</p><p>   fig, ax = plt.subplots()<br>   plot_beta_hist(ax, 10, 10)<br>   plot_beta_hist(ax, 4, 12)<br>   plot_beta_hist(ax, 50, 12)<br>   plot_beta_hist(ax, 6, 55)<br>   ax.set_title(“‘bmh’ style sheet”)</p><p>   plt.show()<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">   `Shift + Enter` 执行 **Cell**，即可看到绘制出的图像。</div><div class="line"></div><div class="line">2. [whats_new_99_mplot3d](http://matplotlib.org/examples/pyplots/whats_new_99_mplot3d.html)：</div><div class="line"></div><div class="line">   示例代码：/whats_new_99_mplot3d.py</div><div class="line"></div><div class="line">   ```python</div><div class="line">   import random</div><div class="line"></div><div class="line">   import numpy as np</div><div class="line">   import matplotlib.pyplot as plt</div><div class="line">   from matplotlib import cm</div><div class="line">   from mpl_toolkits.mplot3d import Axes3D</div><div class="line"></div><div class="line">   X = np.arange(-5, 5, 0.25)</div><div class="line">   Y = np.arange(-5, 5, 0.25)</div><div class="line">   X, Y = np.meshgrid(X, Y)</div><div class="line">   R = np.sqrt(X**2 + Y**2)</div><div class="line">   Z = np.sin(R)</div><div class="line"></div><div class="line">   fig = plt.figure()</div><div class="line">   ax = Axes3D(fig)</div><div class="line">   ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.viridis)</div><div class="line"></div><div class="line">   plt.show()</div></pre></td></tr></table></figure></p><h3 id="动手试试"><a href="#动手试试" class="headerlink" title="动手试试"></a>动手试试</h3><p>最后，我们来尝试回执一个<strong>二次函数</strong>图像，可以参考下面代码：</p><p><strong>示例代码</strong>：/my.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line">x = np.arange(<span class="number">-10</span>,<span class="number">11</span>)</div><div class="line">y = x**<span class="number">2</span></div><div class="line">plt.plot(x,y)</div><div class="line">plt.show();</div></pre></td></tr></table></figure><h2 id="搭配-TensorFlow-可选"><a href="#搭配-TensorFlow-可选" class="headerlink" title="搭配 TensorFlow (可选)"></a>搭配 TensorFlow (可选)</h2><p><strong>TensorFlow</strong>是一个采用数据流图，用于数值计算的开源软件库。他灵活的架构让你可以在多平台上展开计算，例如台式计算机中一个或多个CPU(或GPU),服务器，移动设备等等。</p><p><strong>TensorFlow</strong> 最初由 Google 大脑小组的研究员和工程师们开发出来，用于机器学习和深度神经网络方面的研究，但这个系统的通用性使其也可广泛用于其他计算领域。</p><h3 id="安装-TensorFlow"><a href="#安装-TensorFlow" class="headerlink" title="安装 TensorFlow"></a>安装 TensorFlow</h3><p>我们使用 pip 安装相关依赖及 Tensorflow</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pip install protobuf</div><div class="line">pip install tensorflow</div></pre></td></tr></table></figure><h3 id="测试-TensorFlow"><a href="#测试-TensorFlow" class="headerlink" title="测试 TensorFlow"></a>测试 TensorFlow</h3><p>关于 TensorFlow 的使用请移步其<a href="https://cloud.tencent.com/" target="_blank" rel="external">官网</a>，这里只是测试其在 Jupiter 中是否可用。</p><p><strong>打开 tensorflow.ipynb 编辑界面。</strong></p><p>在 <strong>Cell</strong> 中加入以下代码（整理自<a href="https://www.tensorflow.org/get_started/mnist/beginners" target="_blank" rel="external">官网 MNIST 教程</a>）：</p><h5 id="示例代码：-tensorflow-py"><a href="#示例代码：-tensorflow-py" class="headerlink" title="示例代码：/tensorflow.py"></a>示例代码：/tensorflow.py</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</div><div class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</div><div class="line"></div><div class="line"><span class="comment"># The MNIST Data</span></div><div class="line">mnist = input_data.read_data_sets(<span class="string">"MNIST_data/"</span>, one_hot=<span class="keyword">True</span>)</div><div class="line"></div><div class="line"><span class="comment"># Regression</span></div><div class="line">x = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">784</span>])</div><div class="line">W = tf.Variable(tf.zeros([<span class="number">784</span>, <span class="number">10</span>]))</div><div class="line">b = tf.Variable(tf.zeros([<span class="number">10</span>]))</div><div class="line">y = tf.nn.softmax(tf.matmul(x, W) + b)</div><div class="line"></div><div class="line"><span class="comment"># Training</span></div><div class="line">y_ = tf.placeholder(tf.float32, [<span class="keyword">None</span>, <span class="number">10</span>])</div><div class="line">cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[<span class="number">1</span>]))</div><div class="line">train_step = tf.train.GradientDescentOptimizer(<span class="number">0.05</span>).minimize(cross_entropy)</div><div class="line"></div><div class="line">sess = tf.InteractiveSession()</div><div class="line"></div><div class="line">tf.global_variables_initializer().run()</div><div class="line"></div><div class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">1000</span>):</div><div class="line">    batch_xs, batch_ys = mnist.train.next_batch(<span class="number">100</span>)</div><div class="line">    sess.run(train_step, feed_dict=&#123;x: batch_xs, y_: batch_ys&#125;)</div><div class="line"></div><div class="line"><span class="comment"># Evaluating</span></div><div class="line">correct_prediction = tf.equal(tf.argmax(y,<span class="number">1</span>), tf.argmax(y_,<span class="number">1</span>))</div><div class="line">accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</div><div class="line"></div><div class="line">print(sess.run(accuracy, feed_dict=&#123;x: mnist.test.images, y_: mnist.test.labels&#125;))</div></pre></td></tr></table></figure><p>按下 <code>Shift + Enter</code>，学习过程结束后可以看到输出了准确率（92% 左右）。</p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>我们已经成功搭建起了一个 Jupyter Notebook 环境。</p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.cnblogs.com/moxiaoan/p/5683743.html" target="_blank" rel="external">CentOS7使用firewalld打开关闭防火墙与端口</a></p><p><a href="http://matplotlib.org/" target="_blank" rel="external">http://matplotlib.org/</a></p><p><a href="https://www.liaoxuefeng.com/" target="_blank" rel="external">https://www.liaoxuefeng.com/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-Juptyer-Notebook&quot;&gt;&lt;a href=&quot;#安装-Juptyer-Notebook&quot; class=&quot;headerlink&quot; title=&quot;安装 Juptyer Notebook&quot;&gt;&lt;/a&gt;安装 Juptyer Notebook&lt;/h2&gt;&lt;h3 id=&quot;Jupyter-Notebook-简介&quot;&gt;&lt;a href=&quot;#Jupyter-Notebook-简介&quot; class=&quot;headerlink&quot; title=&quot;Jupyter Notebook 简介&quot;&gt;&lt;/a&gt;Jupyter Notebook 简介&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;jupter Notebook&lt;/strong&gt; 是一个开源的 Web 应用程序，可以用来创建和共享包含动态代码、方程式、可视化及解释性文本的文档。&lt;/p&gt;
&lt;p&gt;其应用包括：数据整理与转换、数值模拟、统计建模、机器学习等等。&lt;/p&gt;
&lt;p&gt;更多信息请见 &lt;a href=&quot;http://jupyter.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官网&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://qzdotnet.github.io/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://qzdotnet.github.io/tags/Linux/"/>
    
      <category term="Jupyter" scheme="http://qzdotnet.github.io/tags/Jupyter/"/>
    
  </entry>
  
</feed>
